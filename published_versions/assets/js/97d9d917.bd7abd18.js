"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6871],{28453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>l});var t=s(96540);const n={},i=t.createContext(n);function d(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(i.Provider,{value:r},e.children)}},43003:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"querying/sql-operators","title":"Druid SQL Operators","description":"\x3c!--","source":"@site/docs/33.0.0/querying/sql-operators.md","sourceDirName":"querying","slug":"/querying/sql-operators","permalink":"/docs/33.0.0/querying/sql-operators","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"sql-operators","title":"Druid SQL Operators","sidebar_label":"Operators"},"sidebar":"docs","previous":{"title":"SQL data types","permalink":"/docs/33.0.0/querying/sql-data-types"},"next":{"title":"Scalar functions","permalink":"/docs/33.0.0/querying/sql-scalar"}}');var n=s(74848),i=s(28453);const d={id:"sql-operators",title:"Druid SQL Operators",sidebar_label:"Operators"},l=void 0,c={},o=[{value:"Arithmetic operators",id:"arithmetic-operators",level:2},{value:"Datetime arithmetic operators",id:"datetime-arithmetic-operators",level:2},{value:"Concatenation operator",id:"concatenation-operator",level:2},{value:"Comparison operators",id:"comparison-operators",level:2},{value:"Logical operators",id:"logical-operators",level:2},{value:"Other operators",id:"other-operators",level:2}];function a(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.admonition,{type:"info",children:(0,n.jsxs)(r.p,{children:["Apache Druid supports two query languages: Druid SQL and ",(0,n.jsx)(r.a,{href:"/docs/33.0.0/querying/",children:"native queries"}),".\nThis document describes the SQL language."]})}),"\n",(0,n.jsxs)(r.p,{children:["Operators in ",(0,n.jsx)(r.a,{href:"/docs/33.0.0/querying/sql",children:"Druid SQL"})," typically operate on one or two values and return a result based on the values. Types of operators in Druid SQL include arithmetic, comparison, logical, and more, as described here."]}),"\n",(0,n.jsxs)(r.p,{children:["When performing math operations, Druid uses 64-bit integer (long) data type unless there are double or float values. If an operation uses float or double values, then the result is a double, which is a 64-bit float. The precision of float and double values is defined by ",(0,n.jsx)(r.a,{href:"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html",children:"Java"})," and ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/IEEE_754",children:"the IEEE standard"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Keep the following guidelines in mind to help you manage precision issues:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Long values can store up to 2^63 accurately with an additional bit used for the sign."}),"\n",(0,n.jsx)(r.li,{children:"Float values use 32 bits, and doubles use 64 bits. Both types are impacted by floating point precision. If you need exact decimal values, consider storing the number in a non-decimal format as a long value (up to the limit for longs). For example, if you need three decimal places, store the number multiplied by 1000 and then divide by 1000 when querying."}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"arithmetic-operators",children:"Arithmetic operators"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x + y"})}),(0,n.jsx)(r.td,{children:"Add"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x - y"})}),(0,n.jsx)(r.td,{children:"Subtract"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x * y"})}),(0,n.jsx)(r.td,{children:"Multiply"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x / y"})}),(0,n.jsx)(r.td,{children:"Divide"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"datetime-arithmetic-operators",children:"Datetime arithmetic operators"}),"\n",(0,n.jsxs)(r.p,{children:["For the datetime arithmetic operators, ",(0,n.jsx)(r.code,{children:"interval_expr"})," can include interval literals like ",(0,n.jsx)(r.code,{children:"INTERVAL '2' HOUR"}),".\nThis operator treats days as uniformly 86400 seconds long, and does not take into account daylight savings time.\nTo account for daylight savings time, use the ",(0,n.jsxs)(r.a,{href:"/docs/33.0.0/querying/sql-scalar#date-and-time-functions",children:[(0,n.jsx)(r.code,{children:"TIME_SHIFT"})," function"]}),".\nAlso see ",(0,n.jsx)(r.a,{href:"/docs/33.0.0/querying/sql-scalar#date-and-time-functions",children:(0,n.jsx)(r.code,{children:"TIMESTAMPADD"})})," for datetime arithmetic."]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"timestamp_expr + interval_expr"})}),(0,n.jsx)(r.td,{children:"Add an amount of time to a timestamp."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"timestamp_expr - interval_expr"})}),(0,n.jsx)(r.td,{children:"Subtract an amount of time from a timestamp."})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"concatenation-operator",children:"Concatenation operator"}),"\n",(0,n.jsxs)(r.p,{children:["Also see the ",(0,n.jsx)(r.a,{href:"/docs/33.0.0/querying/sql-scalar#string-functions",children:"CONCAT function"}),"."]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)("code",{children:"x || y"})}),(0,n.jsxs)(r.td,{children:["Concatenate strings ",(0,n.jsx)(r.code,{children:"x"})," and ",(0,n.jsx)(r.code,{children:"y"}),"."]})]})})]}),"\n",(0,n.jsx)(r.h2,{id:"comparison-operators",children:"Comparison operators"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x = y"})}),(0,n.jsx)(r.td,{children:"Equal to"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IS NOT DISTINCT FROM y"})}),(0,n.jsxs)(r.td,{children:["Equal to, considering ",(0,n.jsx)(r.code,{children:"NULL"})," as a value. Never returns ",(0,n.jsx)(r.code,{children:"NULL"}),"."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x <> y"})}),(0,n.jsx)(r.td,{children:"Not equal to"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IS DISTINCT FROM y"})}),(0,n.jsxs)(r.td,{children:["Not equal to, considering ",(0,n.jsx)(r.code,{children:"NULL"})," as a value. Never returns ",(0,n.jsx)(r.code,{children:"NULL"}),"."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x > y"})}),(0,n.jsx)(r.td,{children:"Greater than"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x >= y"})}),(0,n.jsx)(r.td,{children:"Greater than or equal to"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x < y"})}),(0,n.jsx)(r.td,{children:"Less than"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x <= y"})}),(0,n.jsx)(r.td,{children:"Less than or equal to"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"logical-operators",children:"Logical operators"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x AND y"})}),(0,n.jsx)(r.td,{children:"Boolean AND"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x OR y"})}),(0,n.jsx)(r.td,{children:"Boolean OR"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"NOT x"})}),(0,n.jsx)(r.td,{children:"Boolean NOT"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IS NULL"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is NULL or empty string"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IS NOT NULL"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is neither NULL nor empty string"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IS TRUE"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is true"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IS NOT TRUE"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is not true"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IS FALSE"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is false"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IS NOT FALSE"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is not false"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x BETWEEN y AND z"})}),(0,n.jsxs)(r.td,{children:["Equivalent to ",(0,n.jsx)(r.code,{children:"x >= y AND x <= z"})]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x NOT BETWEEN y AND z"})}),(0,n.jsxs)(r.td,{children:["Equivalent to ",(0,n.jsx)(r.code,{children:"x < y OR x > z"})]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x LIKE pattern [ESCAPE esc]"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," matches a SQL LIKE pattern (with an optional escape)"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x NOT LIKE pattern [ESCAPE esc]"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," does not match a SQL LIKE pattern (with an optional escape)"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IN (values)"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is one of the listed values"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x NOT IN (values)"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is not one of the listed values"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x IN (subquery)"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is returned by the subquery. This will be translated into a join; see ",(0,n.jsx)(r.a,{href:"/docs/33.0.0/querying/sql-translation",children:"Query translation"})," for details."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"x NOT IN (subquery)"})}),(0,n.jsxs)(r.td,{children:["True if ",(0,n.jsx)(r.em,{children:"x"})," is not returned by the subquery. This will be translated into a join; see ",(0,n.jsx)(r.a,{href:"/docs/33.0.0/querying/sql-translation",children:"Query translation"})," for details."]})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"other-operators",children:"Other operators"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"PIVOT (aggregation_function(column_to_aggregate) FOR column_with_values_to_pivot IN (pivoted_column1 [, pivoted_column2 ...]))"})}),(0,n.jsx)(r.td,{children:"Carries out an aggregation and transforms rows into columns in the output."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"UNPIVOT (values_column FOR names_column IN (unpivoted_column1 [, unpivoted_column2 ... ]))"})}),(0,n.jsx)(r.td,{children:"Transforms existing column values into rows."})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}}}]);