"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),s=l,k=c["".concat(p,".").concat(s)]||c[s]||m[s]||r;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:l,o[1]=i;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},85976:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>k,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),o=["components"],i={id:"druid-lookups",title:"Cached Lookup Module"},p=void 0,d={unversionedId:"development/extensions-core/druid-lookups",id:"development/extensions-core/druid-lookups",title:"Cached Lookup Module",description:"\x3c!--",source:"@site/docs/latest/development/extensions-core/druid-lookups.md",sourceDirName:"development/extensions-core",slug:"/development/extensions-core/druid-lookups",permalink:"/docs/latest/development/extensions-core/druid-lookups",draft:!1,tags:[],version:"current",frontMatter:{id:"druid-lookups",title:"Cached Lookup Module"}},u={},c=[{value:"Description",id:"description",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Data Fetcher layer",id:"data-fetcher-layer",level:3},{value:"Caching layer",id:"caching-layer",level:3},{value:"Poll lookup cache",id:"poll-lookup-cache",level:4},{value:"Loading lookup",id:"loading-lookup",level:4},{value:"Configuration and Operation:",id:"configuration-and-operation",level:2},{value:"Polling Lookup",id:"polling-lookup",level:3},{value:"Example of Polling On-heap Lookup",id:"example-of-polling-on-heap-lookup",level:5},{value:"Example Polling Off-heap Lookup",id:"example-polling-off-heap-lookup",level:5},{value:"Loading lookup",id:"loading-lookup-1",level:3},{value:"Example Loading On-heap Guava",id:"example-loading-on-heap-guava",level:5},{value:"Example Loading Off-heap MapDB",id:"example-loading-off-heap-mapdb",level:5},{value:"JDBC Data Fetcher",id:"jdbc-data-fetcher",level:3}],m={toc:c},s="wrapper";function k(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)(s,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"This Apache Druid module provides a per-lookup caching mechanism for JDBC data sources.\nThe main goal of this cache is to speed up the access to a high latency lookup sources and to provide a caching isolation for every lookup source.\nThus user can define various caching strategies or and implementation per lookup, even if the source is the same.\nThis module can be used side to side with other lookup module like the global cached lookup module."),(0,r.kt)("p",null,"To use this Apache Druid extension, ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/configuration/extensions#loading-extensions"},"include")," ",(0,r.kt)("inlineCode",{parentName:"p"},"druid-lookups-cached-single")," in the extensions load list."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To use JDBC, you must add your database client JAR files to the extension's directory.\nFor Postgres, the connector JAR is already included.\nSee the MySQL extension documentation for instructions to obtain ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/development/extensions-core/mysql#install-mysql-connectorj"},"MySQL")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/development/extensions-core/mysql#install-mariadb-connectorj"},"MariaDB")," connector libraries.\nCopy or symlink the downloaded file to ",(0,r.kt)("inlineCode",{parentName:"p"},"extensions/druid-lookups-cached-single")," under the distribution root directory.")),(0,r.kt)("h2",{id:"architecture"},"Architecture"),(0,r.kt)("p",null,"Generally speaking this module can be divided into two main component, namely, the data fetcher layer and caching layer."),(0,r.kt)("h3",{id:"data-fetcher-layer"},"Data Fetcher layer"),(0,r.kt)("p",null,"First part is the data fetcher layer API ",(0,r.kt)("inlineCode",{parentName:"p"},"DataFetcher"),", that exposes a set of fetch methods to fetch data from the actual Lookup dimension source.\nFor instance ",(0,r.kt)("inlineCode",{parentName:"p"},"JdbcDataFetcher")," provides an implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"DataFetcher")," that can be used to fetch key/value from a RDBMS via JDBC driver.\nIf you need new type of data fetcher, all you need to do, is to implement the interface ",(0,r.kt)("inlineCode",{parentName:"p"},"DataFetcher")," and load it via another druid module."),(0,r.kt)("h3",{id:"caching-layer"},"Caching layer"),(0,r.kt)("p",null,"This extension comes with two different caching strategies. First strategy is a poll based and the second is a load based."),(0,r.kt)("h4",{id:"poll-lookup-cache"},"Poll lookup cache"),(0,r.kt)("p",null,"The poll strategy cache strategy will fetch and swap all the pair of key/values periodically from the lookup source.\nHence, user should make sure that the cache can fit all the data.\nThe current implementation provides 2 type of poll cache, the first is on-heap (uses immutable map), while the second uses MapDB based off-heap map.\nUser can also implement a different lookup polling cache by implementing ",(0,r.kt)("inlineCode",{parentName:"p"},"PollingCacheFactory")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PollingCache")," interfaces."),(0,r.kt)("h4",{id:"loading-lookup"},"Loading lookup"),(0,r.kt)("p",null,"Loading cache strategy will load the key/value pair upon request on the key it self, the general algorithm is load key if absent.\nOnce the key/value  pair is loaded eviction will occur according to the cache eviction policy.\nThis module comes with two loading lookup implementation, the first is on-heap backed by a Guava cache implementation, the second is MapDB off-heap implementation.\nBoth implementations offer various eviction strategies.\nSame for Loading cache, developer can implement a new type of loading cache by implementing ",(0,r.kt)("inlineCode",{parentName:"p"},"LookupLoadingCache")," interface."),(0,r.kt)("h2",{id:"configuration-and-operation"},"Configuration and Operation:"),(0,r.kt)("h3",{id:"polling-lookup"},"Polling Lookup"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note that the current implementation of ",(0,r.kt)("inlineCode",{parentName:"strong"},"offHeapPolling")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"onHeapPolling")," will create two caches one to lookup value based on key and the other to reverse lookup the key from value")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dataFetcher"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the lookup data fetcher type for fetching data"),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cacheFactory"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Cache factory implementation"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"onHeapPolling")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pollPeriod"),(0,r.kt)("td",{parentName:"tr",align:null},"Period"),(0,r.kt)("td",{parentName:"tr",align:null},"polling period"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"null (poll once)")))),(0,r.kt)("h5",{id:"example-of-polling-on-heap-lookup"},"Example of Polling On-heap Lookup"),(0,r.kt)("p",null,"This example demonstrates a polling cache that will update its on-heap cache every 10 minutes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "pollingLookup",\n    "pollPeriod": "PT10M",\n    "dataFetcher": {\n       "type": "jdbcDataFetcher",\n       "connectorConfig": {\n          "connectURI": "jdbc://mysql://localhost:3306/my_data_base",\n          "user": "druid",\n          "password": "druid"\n       },\n       "table": "lookup_table_name",\n       "keyColumn": "key_column_name",\n       "valueColumn": "value_column_name"\n    },\n    "cacheFactory": {\n       "type": "onHeapPolling"\n    }\n}\n\n')),(0,r.kt)("h5",{id:"example-polling-off-heap-lookup"},"Example Polling Off-heap Lookup"),(0,r.kt)("p",null,"This example demonstrates an off-heap lookup that will be cached once and never swapped ",(0,r.kt)("inlineCode",{parentName:"p"},"(pollPeriod == null)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "type": "pollingLookup",\n   "dataFetcher": {\n      "type": "jdbcDataFetcher",\n      "connectorConfig": {\n         "connectURI": "jdbc://mysql://localhost:3306/my_data_base",\n         "user": "druid",\n         "password": "druid"\n      },\n      "table": "lookup_table_name",\n      "keyColumn": "key_column_name",\n      "valueColumn": "value_column_name"\n   },\n   "cacheFactory": {\n      "type": "offHeapPolling"\n   }\n}\n\n')),(0,r.kt)("h3",{id:"loading-lookup-1"},"Loading lookup"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dataFetcher"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the lookup data fetcher type  to use in order to fetch data"),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loadingCacheSpec"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Lookup cache spec implementation"),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reverseLoadingCacheSpec"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Reverse lookup cache  implementation"),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null},"null")))),(0,r.kt)("h5",{id:"example-loading-on-heap-guava"},"Example Loading On-heap Guava"),(0,r.kt)("p",null,"Guava cache configuration spec."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"concurrencyLevel"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Allowed concurrency among update operations"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialCapacity"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial capacity size"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maximumSize"),(0,r.kt)("td",{parentName:"tr",align:null},"long"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the maximum number of entries the cache may contain."),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"null (infinite capacity)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expireAfterAccess"),(0,r.kt)("td",{parentName:"tr",align:null},"long"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the eviction time after last read in milliseconds."),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"null (No read-time-based eviction when set to null)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expireAfterWrite"),(0,r.kt)("td",{parentName:"tr",align:null},"long"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the eviction time after last write in milliseconds."),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"null (No write-time-based eviction when set to null)")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "type": "loadingLookup",\n   "dataFetcher": {\n      "type": "jdbcDataFetcher",\n      "connectorConfig": {\n         "connectURI": "jdbc://mysql://localhost:3306/my_data_base",\n         "user": "druid",\n         "password": "druid"\n      },\n      "table": "lookup_table_name",\n      "keyColumn": "key_column_name",\n      "valueColumn": "value_column_name"\n   },\n   "loadingCacheSpec": {\n      "type": "guava"\n   },\n   "reverseLoadingCacheSpec": {\n      "type": "guava",\n      "maximumSize": 500000,\n      "expireAfterAccess": 100000,\n      "expireAfterWrite": 10000\n   }\n}\n')),(0,r.kt)("h5",{id:"example-loading-off-heap-mapdb"},"Example Loading Off-heap MapDB"),(0,r.kt)("p",null,"Off heap cache is backed by ",(0,r.kt)("a",{parentName:"p",href:"http://www.mapdb.org/"},"MapDB")," implementation. MapDB is using direct memory as memory pool, please take that into account when limiting the JVM direct memory setup."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxStoreSize"),(0,r.kt)("td",{parentName:"tr",align:null},"double"),(0,r.kt)("td",{parentName:"tr",align:null},"maximal size of store in GiB, if store is larger entries will start expiring"),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxEntriesSize"),(0,r.kt)("td",{parentName:"tr",align:null},"long"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the maximum number of entries the cache may contain."),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"0 (infinite capacity)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expireAfterAccess"),(0,r.kt)("td",{parentName:"tr",align:null},"long"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the eviction time after last read in milliseconds."),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"0 (No read-time-based eviction when set to null)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expireAfterWrite"),(0,r.kt)("td",{parentName:"tr",align:null},"long"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the eviction time after last write in milliseconds."),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"0 (No write-time-based eviction when set to null)")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "type": "loadingLookup",\n   "dataFetcher": {\n      "type": "jdbcDataFetcher",\n      "connectorConfig": {\n         "connectURI": "jdbc://mysql://localhost:3306/my_data_base",\n         "user": "druid",\n         "password": "druid"\n      },\n      "table": "lookup_table_name",\n      "keyColumn": "key_column_name",\n      "valueColumn": "value_column_name"\n   },\n   "loadingCacheSpec": {\n      "type": "mapDb",\n      "maxEntriesSize": 100000\n   },\n   "reverseLoadingCacheSpec": {\n      "type": "mapDb",\n      "maxStoreSize": 5,\n      "expireAfterAccess": 100000,\n      "expireAfterWrite": 10000\n   }\n}\n')),(0,r.kt)("h3",{id:"jdbc-data-fetcher"},"JDBC Data Fetcher"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"connectorConfig")),(0,r.kt)("td",{parentName:"tr",align:null},"JSON object"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the database connection details. You can set ",(0,r.kt)("inlineCode",{parentName:"td"},"connectURI"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"user")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"password"),". You can selectively allow JDBC properties in ",(0,r.kt)("inlineCode",{parentName:"td"},"connectURI"),". See ",(0,r.kt)("a",{parentName:"td",href:"/docs/latest/configuration/#jdbc-connections-to-external-databases"},"JDBC connections security config")," for more details."),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"table")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The table name to read from."),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"keyColumn")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The column name that contains the lookup key."),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"valueColumn")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"The column name that contains the lookup value."),(0,r.kt)("td",{parentName:"tr",align:null},"yes"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"streamingFetchSize")),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Fetch size used in JDBC connections."),(0,r.kt)("td",{parentName:"tr",align:null},"no"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")))))}k.isMDXComponent=!0}}]);