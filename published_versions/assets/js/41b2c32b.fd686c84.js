"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2636],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>y});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=p(n),m=r,y=g["".concat(i,".").concat(m)]||g[m]||u[m]||l;return n?a.createElement(y,o(o({ref:t},d),{},{components:n})):a.createElement(y,o({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[g]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>y,frontMatter:()=>s,metadata:()=>p,toc:()=>g});var a=n(58168),r=n(98587),l=(n(96540),n(15680)),o=["components"],s={id:"postgresql",title:"PostgreSQL Metadata Store"},i=void 0,p={unversionedId:"development/extensions-core/postgresql",id:"development/extensions-core/postgresql",title:"PostgreSQL Metadata Store",description:"\x3c!--",source:"@site/docs/29.0.0/development/extensions-core/postgresql.md",sourceDirName:"development/extensions-core",slug:"/development/extensions-core/postgresql",permalink:"/docs/29.0.0/development/extensions-core/postgresql",draft:!1,tags:[],version:"current",frontMatter:{id:"postgresql",title:"PostgreSQL Metadata Store"}},d={},g=[{value:"Setting up PostgreSQL",id:"setting-up-postgresql",level:2},{value:"Configuration",id:"configuration",level:2},{value:"PostgreSQL Firehose",id:"postgresql-firehose",level:3}],u={toc:g},m="wrapper";function y(e){var t=e.components,n=(0,r.A)(e,o);return(0,l.yg)(m,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("p",null,"To use this Apache Druid extension, ",(0,l.yg)("a",{parentName:"p",href:"/docs/29.0.0/configuration/extensions#loading-extensions"},"include")," ",(0,l.yg)("inlineCode",{parentName:"p"},"postgresql-metadata-storage")," in the extensions load list."),(0,l.yg)("h2",{id:"setting-up-postgresql"},"Setting up PostgreSQL"),(0,l.yg)("p",null,"To avoid issues with upgrades that require schema changes to a large metadata table, consider a PostgreSQL version that supports instant ADD COLUMN semantics."),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Install PostgreSQL"),(0,l.yg)("p",{parentName:"li"},"Use your favorite package manager to install PostgreSQL, e.g.:"))),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"on Ubuntu/Debian using apt ",(0,l.yg)("inlineCode",{parentName:"li"},"apt-get install postgresql")),(0,l.yg)("li",{parentName:"ul"},"on OS X, using ",(0,l.yg)("a",{parentName:"li",href:"http://brew.sh/"},"Homebrew")," ",(0,l.yg)("inlineCode",{parentName:"li"},"brew install postgresql"))),(0,l.yg)("ol",{start:2},(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Create a druid database and user"),(0,l.yg)("p",{parentName:"li"},"On the machine where PostgreSQL is installed, using an account with proper\npostgresql permissions:"),(0,l.yg)("p",{parentName:"li"},"Create a druid user, enter ",(0,l.yg)("inlineCode",{parentName:"p"},"diurd")," when prompted for the password."),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"createuser druid -P\n")),(0,l.yg)("p",{parentName:"li"},"Create a druid database owned by the user we just created"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"createdb druid -O druid\n")),(0,l.yg)("p",{parentName:"li"},(0,l.yg)("em",{parentName:"p"},"Note:")," On Ubuntu / Debian you may have to prefix the ",(0,l.yg)("inlineCode",{parentName:"p"},"createuser")," and\n",(0,l.yg)("inlineCode",{parentName:"p"},"createdb")," commands with ",(0,l.yg)("inlineCode",{parentName:"p"},"sudo -u postgres")," in order to gain proper\npermissions.")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Configure your Druid metadata storage extension:"),(0,l.yg)("p",{parentName:"li"},"Add the following parameters to your Druid configuration, replacing ",(0,l.yg)("inlineCode",{parentName:"p"},"<host>"),"\nwith the location (host name and port) of the database."),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-properties"},'druid.extensions.loadList=["postgresql-metadata-storage"]\ndruid.metadata.storage.type=postgresql\ndruid.metadata.storage.connector.connectURI=jdbc:postgresql://<host>/druid\ndruid.metadata.storage.connector.user=druid\ndruid.metadata.storage.connector.password=diurd\n')))),(0,l.yg)("h2",{id:"configuration"},"Configuration"),(0,l.yg)("p",null,"In most cases, the configuration options map directly to the ",(0,l.yg)("a",{parentName:"p",href:"https://jdbc.postgresql.org/documentation/use/#connecting-to-the-database"},"postgres JDBC connection options"),"."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Property"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Default"),(0,l.yg)("th",{parentName:"tr",align:null},"Required"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.useSSL")),(0,l.yg)("td",{parentName:"tr",align:null},"Enables SSL"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"false")),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslPassword")),(0,l.yg)("td",{parentName:"tr",align:null},"The ",(0,l.yg)("a",{parentName:"td",href:"/docs/29.0.0/operations/password-provider"},"Password Provider")," or String password for the client's key."),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslFactory")),(0,l.yg)("td",{parentName:"tr",align:null},"The class name to use as the ",(0,l.yg)("inlineCode",{parentName:"td"},"SSLSocketFactory")),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslFactoryArg")),(0,l.yg)("td",{parentName:"tr",align:null},"An optional argument passed to the sslFactory's constructor"),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslMode")),(0,l.yg)("td",{parentName:"tr",align:null},'The sslMode. Possible values are "disable", "require", "verify-ca", "verify-full", "allow" and "prefer"'),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslCert")),(0,l.yg)("td",{parentName:"tr",align:null},"The full path to the certificate file."),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslKey")),(0,l.yg)("td",{parentName:"tr",align:null},"The full path to the key file."),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslRootCert")),(0,l.yg)("td",{parentName:"tr",align:null},"The full path to the root certificate."),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslHostNameVerifier")),(0,l.yg)("td",{parentName:"tr",align:null},"The classname of the hostname verifier."),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.ssl.sslPasswordCallback")),(0,l.yg)("td",{parentName:"tr",align:null},"The classname of the SSL password provider."),(0,l.yg)("td",{parentName:"tr",align:null},"none"),(0,l.yg)("td",{parentName:"tr",align:null},"no")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"druid.metadata.postgres.dbTableSchema")),(0,l.yg)("td",{parentName:"tr",align:null},"druid meta table schema"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"public")),(0,l.yg)("td",{parentName:"tr",align:null},"no")))),(0,l.yg)("h3",{id:"postgresql-firehose"},"PostgreSQL Firehose"),(0,l.yg)("p",null,"The PostgreSQL extension provides an implementation of an ",(0,l.yg)("a",{parentName:"p",href:"/docs/29.0.0/ingestion/input-sources"},"SQL input source")," which can be used to ingest data into Druid from a PostgreSQL database."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "index_parallel",\n  "spec": {\n    "dataSchema": {\n      "dataSource": "some_datasource",\n      "dimensionsSpec": {\n        "dimensionExclusions": [],\n        "dimensions": [\n          "dim1",\n          "dim2",\n          "dim3"\n        ]\n      },\n      "timestampSpec": {\n        "format": "auto",\n        "column": "ts"\n      },\n      "metricsSpec": [],\n      "granularitySpec": {\n        "type": "uniform",\n        "segmentGranularity": "DAY",\n        "queryGranularity": {\n          "type": "none"\n        },\n        "rollup": false,\n        "intervals": null\n      },\n      "transformSpec": {\n        "filter": null,\n        "transforms": []\n      }\n    },\n    "ioConfig": {\n      "type": "index_parallel",\n      "inputSource": {\n        "type": "sql",\n        "database": {\n          "type": "postgresql",\n          "connectorConfig": {\n            "connectURI": "jdbc:postgresql://some-rds-host.us-west-1.rds.amazonaws.com:5432/druid",\n            "user": "admin",\n            "password": "secret"\n          }\n        },\n        "sqls": [\n          "SELECT * FROM some_table"\n        ]\n      },\n      "inputFormat": {\n        "type": "json"\n      }\n    },\n    "tuningConfig": {\n      "type": "index_parallel"\n    }\n  }\n}\n')))}y.isMDXComponent=!0}}]);