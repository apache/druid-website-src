"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2089],{332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"querying/timeseriesquery","title":"Timeseries queries","description":"\x3c!--","source":"@site/docs/33.0.0/querying/timeseriesquery.md","sourceDirName":"querying","slug":"/querying/timeseriesquery","permalink":"/docs/33.0.0/querying/timeseriesquery","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"timeseriesquery","title":"Timeseries queries","sidebar_label":"Timeseries"},"sidebar":"docs","previous":{"title":"Query context","permalink":"/docs/33.0.0/querying/query-context"},"next":{"title":"TopN","permalink":"/docs/33.0.0/querying/topnquery"}}');var r=t(74848),a=t(28453);const i={id:"timeseriesquery",title:"Timeseries queries",sidebar_label:"Timeseries"},l=void 0,d={},o=[{value:"Grand totals",id:"grand-totals",level:2},{value:"Empty bucket values",id:"empty-bucket-values",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Apache Druid supports two query languages: ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql",children:"Druid SQL"})," and ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/",children:"native queries"}),".\nThis document describes a query\ntype in the native language. For information about when Druid SQL will use this query type, refer to the\n",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-translation#query-types",children:"SQL documentation"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"These types of queries take a timeseries query object and return an array of JSON objects where each object represents a value asked for by the timeseries query."}),"\n",(0,r.jsx)(n.p,{children:"An example timeseries query object is shown below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "queryType": "timeseries",\n  "dataSource": "sample_datasource",\n  "granularity": "day",\n  "descending": "true",\n  "filter": {\n    "type": "and",\n    "fields": [\n      { "type": "selector", "dimension": "sample_dimension1", "value": "sample_value1" },\n      { "type": "or",\n        "fields": [\n          { "type": "selector", "dimension": "sample_dimension2", "value": "sample_value2" },\n          { "type": "selector", "dimension": "sample_dimension3", "value": "sample_value3" }\n        ]\n      }\n    ]\n  },\n  "aggregations": [\n    { "type": "longSum", "name": "sample_name1", "fieldName": "sample_fieldName1" },\n    { "type": "doubleSum", "name": "sample_name2", "fieldName": "sample_fieldName2" }\n  ],\n  "postAggregations": [\n    { "type": "arithmetic",\n      "name": "sample_divide",\n      "fn": "/",\n      "fields": [\n        { "type": "fieldAccess", "name": "postAgg__sample_name1", "fieldName": "sample_name1" },\n        { "type": "fieldAccess", "name": "postAgg__sample_name2", "fieldName": "sample_name2" }\n      ]\n    }\n  ],\n  "intervals": [ "2012-01-01T00:00:00.000/2012-01-03T00:00:00.000" ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"There are 7 main parts to a timeseries query:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"property"}),(0,r.jsx)(n.th,{children:"description"}),(0,r.jsx)(n.th,{children:"required?"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"queryType"}),(0,r.jsx)(n.td,{children:'This String should always be "timeseries"; this is the first thing Apache Druid looks at to figure out how to interpret the query'}),(0,r.jsx)(n.td,{children:"yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"dataSource"}),(0,r.jsxs)(n.td,{children:["A String or Object defining the data source to query, very similar to a table in a relational database. See ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource",children:"DataSource"})," for more information."]}),(0,r.jsx)(n.td,{children:"yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"descending"}),(0,r.jsxs)(n.td,{children:["Whether to make descending ordered result. Default is ",(0,r.jsx)(n.code,{children:"false"}),"(ascending)."]}),(0,r.jsx)(n.td,{children:"no"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"intervals"}),(0,r.jsx)(n.td,{children:"A JSON Object representing ISO-8601 Intervals. This defines the time ranges to run the query over."}),(0,r.jsx)(n.td,{children:"yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"granularity"}),(0,r.jsxs)(n.td,{children:["Defines the granularity to bucket query results. See ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/granularities",children:"Granularities"})]}),(0,r.jsx)(n.td,{children:"yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"filter"}),(0,r.jsxs)(n.td,{children:["See ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/filters",children:"Filters"})]}),(0,r.jsx)(n.td,{children:"no"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"virtualColumns"}),(0,r.jsxs)(n.td,{children:["A JSON list of ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/virtual-columns",children:"virtual columns"}),". You can reference the virtual columns in ",(0,r.jsx)(n.code,{children:"aggregations"})," or ",(0,r.jsx)(n.code,{children:"postAggregations"}),"."]}),(0,r.jsx)(n.td,{children:"no (default none)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"aggregations"}),(0,r.jsxs)(n.td,{children:["See ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/aggregations",children:"Aggregations"})]}),(0,r.jsx)(n.td,{children:"no"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"postAggregations"}),(0,r.jsxs)(n.td,{children:["See ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/post-aggregations",children:"Post Aggregations"})]}),(0,r.jsx)(n.td,{children:"no"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"limit"}),(0,r.jsx)(n.td,{children:"An integer that limits the number of results. The default is unlimited."}),(0,r.jsx)(n.td,{children:"no"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"context"}),(0,r.jsxs)(n.td,{children:["Can be used to modify query behavior, including ",(0,r.jsx)(n.a,{href:"#grand-totals",children:"grand totals"})," and ",(0,r.jsx)(n.a,{href:"#empty-bucket-values",children:"empty bucket values"}),". See also ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/query-context",children:"Context"})," for parameters that apply to all query types."]}),(0,r.jsx)(n.td,{children:"no"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:'To pull it all together, the above query would return 2 data points, one for each day between 2012-01-01 and 2012-01-03, from the "sample_datasource" table. Each data point would be the (long) sum of sample_fieldName1, the (double) sum of sample_fieldName2 and the (double) result of sample_fieldName1 divided by sample_fieldName2 for the filter set. The output looks like this:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "timestamp": "2012-01-01T00:00:00.000Z",\n    "result": { "sample_name1": <some_value>, "sample_name2": <some_value>, "sample_divide": <some_value> }\n  },\n  {\n    "timestamp": "2012-01-02T00:00:00.000Z",\n    "result": { "sample_name1": <some_value>, "sample_name2": <some_value>, "sample_divide": <some_value> }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"grand-totals",children:"Grand totals"}),"\n",(0,r.jsxs)(n.p,{children:['Druid can include an extra "grand totals" row as the last row of a timeseries result set. To enable this, add\n',(0,r.jsx)(n.code,{children:'"grandTotal" : true'})," to your query context. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "queryType": "timeseries",\n  "dataSource": "sample_datasource",\n  "intervals": [ "2012-01-01T00:00:00.000/2012-01-03T00:00:00.000" ],\n  "granularity": "day",\n  "aggregations": [\n    { "type": "longSum", "name": "sample_name1", "fieldName": "sample_fieldName1" },\n    { "type": "doubleSum", "name": "sample_name2", "fieldName": "sample_fieldName2" }\n  ],\n  "context": {\n    "grandTotal": true\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:'The grand totals row will appear as the last row in the result array, and will have no timestamp. It will be the last\nrow even if the query is run in "descending" mode. Post-aggregations in the grand totals row will be computed based\nupon the grand total aggregations.'}),"\n",(0,r.jsx)(n.h2,{id:"empty-bucket-values",children:"Empty bucket values"}),"\n",(0,r.jsxs)(n.p,{children:["By default Druid fills empty interior time buckets in the results of timeseries queries with the default value for the ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-aggregations",children:"aggregator function"}),'.\nFor example, if you issue a "day" granularity\ntimeseries query for the interval 2012-01-01/2012-01-04 using the SUM aggregator, and no data exists for 2012-01-02, Druid returns:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "timestamp": "2012-01-01T00:00:00.000Z",\n    "result": { "sample_name1": <some_value> }\n  },\n  {\n   "timestamp": "2012-01-02T00:00:00.000Z",\n   "result": { "sample_name1": NULL }\n  },\n  {\n    "timestamp": "2012-01-03T00:00:00.000Z",\n    "result": { "sample_name1": <some_value> }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Time buckets that lie completely outside the data interval are not filled with the default value."}),"\n",(0,r.jsxs)(n.p,{children:["You can disable all empty bucket filling with the context flag ",(0,r.jsx)(n.code,{children:"skipEmptyBuckets"}),".\nIn this mode, Druid omits the data point 2012-01-02 from the results.\nFor example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "queryType": "timeseries",\n  "dataSource": "sample_datasource",\n  "granularity": "day",\n  "aggregations": [\n    { "type": "longSum", "name": "sample_name1", "fieldName": "sample_fieldName1" }\n  ],\n  "intervals": [ "2012-01-01T00:00:00.000/2012-01-04T00:00:00.000" ],\n  "context" : {\n    "skipEmptyBuckets": "true"\n  }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);