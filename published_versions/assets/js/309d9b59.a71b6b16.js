"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5938],{28453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>c});var s=n(96540);const t={},i=s.createContext(t);function d(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(i.Provider,{value:r},e.children)}},76024:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"querying/sql-array-functions","title":"SQL ARRAY functions","description":"\x3c!--","source":"@site/docs/33.0.0/querying/sql-array-functions.md","sourceDirName":"querying","slug":"/querying/sql-array-functions","permalink":"/docs/33.0.0/querying/sql-array-functions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"sql-array-functions","title":"SQL ARRAY functions","sidebar_label":"Array functions"},"sidebar":"docs","previous":{"title":"Window functions","permalink":"/docs/33.0.0/querying/sql-window-functions"},"next":{"title":"Multi-value string functions","permalink":"/docs/33.0.0/querying/sql-multivalue-string-functions"}}');var t=n(74848),i=n(28453);const d={id:"sql-array-functions",title:"SQL ARRAY functions",sidebar_label:"Array functions"},c=void 0,a={},l=[];function o(e){const r={a:"a",admonition:"admonition",code:"code",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["Apache Druid supports two query languages: Druid SQL and ",(0,t.jsx)(r.a,{href:"/docs/33.0.0/querying/",children:"native queries"}),".\nThis document describes the SQL language."]})}),"\n",(0,t.jsxs)(r.p,{children:["This page describes the operations you can perform on arrays using ",(0,t.jsx)(r.a,{href:"/docs/33.0.0/querying/sql",children:"Druid SQL"}),". See ",(0,t.jsxs)(r.a,{href:"/docs/33.0.0/querying/sql-data-types#arrays",children:[(0,t.jsx)(r.code,{children:"ARRAY"})," data type documentation"]})," for additional details."]}),"\n",(0,t.jsxs)(r.p,{children:["All array references in the array function documentation can refer to multi-value string columns or ",(0,t.jsx)(r.code,{children:"ARRAY"})," literals.\nThese functions are largely identical to the ",(0,t.jsx)(r.a,{href:"/docs/33.0.0/querying/sql-multivalue-string-functions",children:"multi-value string functions"}),", but\nuse ",(0,t.jsx)(r.code,{children:"ARRAY"})," types and behavior. Multi-value string ",(0,t.jsx)(r.code,{children:"VARCHAR"})," columns can be converted to ",(0,t.jsx)(r.code,{children:"VARCHAR ARRAY"})," to use with\nthese functions using ",(0,t.jsx)(r.code,{children:"MV_TO_ARRAY"}),", and ",(0,t.jsx)(r.code,{children:"ARRAY"})," types can be converted to multi-value string ",(0,t.jsx)(r.code,{children:"VARCHAR"})," with\n",(0,t.jsx)(r.code,{children:"ARRAY_TO_MV"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["The following table describes array functions. To learn more about array aggregation functions, see ",(0,t.jsx)(r.a,{href:"/docs/33.0.0/querying/sql-aggregations",children:"SQL aggregation functions"}),"."]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Function"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY[expr1, expr2, ...]"})}),(0,t.jsxs)(r.td,{children:["Constructs a SQL ",(0,t.jsx)(r.code,{children:"ARRAY"})," literal from the provided expression arguments. All arguments must be of the same type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_APPEND(arr, expr)"})}),(0,t.jsx)(r.td,{children:"Appends the expression to the array. The source array type determines the resulting array type."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_CONCAT(arr1, arr2)"})}),(0,t.jsxs)(r.td,{children:["Concatenates two arrays. The type of ",(0,t.jsx)(r.code,{children:"arr1"})," determines the resulting array type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_CONTAINS(arr, expr)"})}),(0,t.jsx)(r.td,{children:"Checks if the array contains the specified expression. If the specified expression is a scalar value, returns true if the source array contains the value. If the specified expression is an array, returns true if the source array contains all elements of the expression."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_LENGTH(arr)"})}),(0,t.jsx)(r.td,{children:"Returns the length of the array."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_OFFSET(arr, long)"})}),(0,t.jsx)(r.td,{children:"Returns the array element at the specified zero-based index. Returns null if the index is out of bounds."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_OFFSET_OF(arr, expr)"})}),(0,t.jsxs)(r.td,{children:["Returns the 0-based index of the first occurrence of ",(0,t.jsx)(r.code,{children:"expr"})," in the array. If no matching elements exist in the array, returns ",(0,t.jsx)(r.code,{children:"null"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_ORDINAL(arr, long)"})}),(0,t.jsx)(r.td,{children:"Returns the array element at the specified one-based index. Returns null if the index is out of bounds."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_ORDINAL_OF(arr, expr)"})}),(0,t.jsxs)(r.td,{children:["Returns the 1-based index of the first occurrence of ",(0,t.jsx)(r.code,{children:"expr"})," in the array. If no matching elements exist in the array, returns ",(0,t.jsx)(r.code,{children:"null"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_OVERLAP(arr1, arr2)"})}),(0,t.jsxs)(r.td,{children:["Returns true if two arrays have any elements in common. Treats ",(0,t.jsx)(r.code,{children:"NULL"})," values as known elements."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_PREPEND(expr, arr)"})}),(0,t.jsx)(r.td,{children:"Prepends the expression to the array. The source array type determines the resulting array type."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_SLICE(arr, start, end)"})}),(0,t.jsxs)(r.td,{children:["Returns a subset of the array from the zero-based index ",(0,t.jsx)(r.code,{children:"start"})," (inclusive) to ",(0,t.jsx)(r.code,{children:"end"})," (exclusive). Returns null if ",(0,t.jsx)(r.code,{children:"start"})," is less than 0, greater than the length of the array, or greater than ",(0,t.jsx)(r.code,{children:"end"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_TO_MV(arr)"})}),(0,t.jsxs)(r.td,{children:["Converts an array of any type into a ",(0,t.jsx)(r.a,{href:"/docs/33.0.0/querying/sql-data-types#multi-value-strings",children:"multi-value string"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ARRAY_TO_STRING(arr, delimiter)"})}),(0,t.jsx)(r.td,{children:"Joins all elements of the array into a string using the specified delimiter."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"SCALAR_IN_ARRAY(expr, arr)"})}),(0,t.jsxs)(r.td,{children:["Checks if the scalar value is present in the array. Returns false if the value is non-null, or ",(0,t.jsx)(r.code,{children:"UNKNOWN"})," if the value is ",(0,t.jsx)(r.code,{children:"NULL"}),". Returns ",(0,t.jsx)(r.code,{children:"UNKNOWN"})," if the array is ",(0,t.jsx)(r.code,{children:"NULL"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"STRING_TO_ARRAY(string, delimiter)"})}),(0,t.jsx)(r.td,{children:"Splits the string into an array of substrings using the specified delimiter. The delimiter must be a valid regular expression."})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);