"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9120],{10763:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/tutorial-theta-03-d396351338383bf3cbd248be97a7c9ae.png"},18772:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/tutorial-theta-04-7c498583c84f25374a035507a41592da.png"},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(96540);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}},39576:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/tutorial-theta-08-8d2ab89aef3d1661329ad060467e2f9b.png"},39901:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/tutorial-theta-05-210059e731382527a704510b94d370d4.png"},41231:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/tutorial-theta-07-8c74460cb2ed72066ca3b0b3470657e0.png"},56134:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/tutorial-theta-06-4b588f7737377421937ed369bfe9a94e.png"},66988:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"tutorials/tutorial-sketches-theta","title":"Approximations with Theta sketches","description":"\x3c!--","source":"@site/docs/33.0.0/tutorials/tutorial-sketches-theta.md","sourceDirName":"tutorials","slug":"/tutorials/tutorial-sketches-theta","permalink":"/docs/33.0.0/tutorials/tutorial-sketches-theta","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"tutorial-sketches-theta","title":"Approximations with Theta sketches","sidebar_label":"Theta sketches tutorial"},"sidebar":"docs","previous":{"title":"Export results","permalink":"/docs/33.0.0/tutorials/tutorial-extern"},"next":{"title":"JDBC connector tutorial","permalink":"/docs/33.0.0/tutorials/tutorial-jdbc"}}');var i=s(74848),a=s(28453);const o={id:"tutorial-sketches-theta",title:"Approximations with Theta sketches",sidebar_label:"Theta sketches tutorial"},r=void 0,h={},c=[{value:"The problem with counts and set operations on large data sets",id:"the-problem-with-counts-and-set-operations-on-large-data-sets",level:2},{value:"Use Theta sketches for fast approximation with set operations",id:"use-theta-sketches-for-fast-approximation-with-set-operations",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Sample data",id:"sample-data",level:2},{value:"Ingest data using Theta sketches",id:"ingest-data-using-theta-sketches",level:2},{value:"Query the Theta sketch column",id:"query-the-theta-sketch-column",level:2},{value:"Basic counting",id:"basic-counting",level:3},{value:"Filtered metrics",id:"filtered-metrics",level:3},{value:"Set operations",id:"set-operations",level:3},{value:"Conclusions",id:"conclusions",level:2},{value:"Learn more",id:"learn-more",level:2},{value:"Acknowledgments",id:"acknowledgments",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Apache Druid can power real-time collection, streaming, and interactive visualization of clickstreams.\nA common problem in clickstream analytics is counting unique things, like visitors or sessions.\nGenerally this involves scanning through all detail data, because unique counts do not add up as you aggregate the numbers."}),"\n",(0,i.jsx)(t.h2,{id:"the-problem-with-counts-and-set-operations-on-large-data-sets",children:"The problem with counts and set operations on large data sets"}),"\n",(0,i.jsx)(t.p,{children:"Imagine you are interested in the number of visitors that watched episodes of a TV show. Let's say you found that at a given day, 1000 unique visitors watched the first episode, and 800 visitors watched the second episode. You may want to explore further trends, for example:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["How many visitors watched ",(0,i.jsx)(t.em,{children:"both"})," episodes?"]}),"\n",(0,i.jsxs)(t.li,{children:["How many visitors are there that watched ",(0,i.jsx)(t.em,{children:"at least one"})," of the episodes?"]}),"\n",(0,i.jsxs)(t.li,{children:["How many visitors watched episode 1 ",(0,i.jsx)(t.em,{children:"but not"})," episode 2?"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"There is no way to answer these questions by just looking at the aggregated numbers. You would have to go back to the detail data and scan every single row. If the data volume is high enough, this may take a very long time, meaning that an interactive data exploration is not possible."}),"\n",(0,i.jsxs)(t.p,{children:["An additional nuisance is that unique counts don't work well with rollups. For this example, it would be great if you could have just one row of data per 15 minute interval",(0,i.jsx)("sup",{children:(0,i.jsx)(t.sup,{children:(0,i.jsx)(t.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})}),", show, and episode. After all, you are not interested in the individual user IDs, just the unique counts."]}),"\n",(0,i.jsx)(t.p,{children:"Is there a way to avoid crunching the detail data every single time, and maybe even enable rollup?\nEnter Theta sketches."}),"\n",(0,i.jsx)(t.h2,{id:"use-theta-sketches-for-fast-approximation-with-set-operations",children:"Use Theta sketches for fast approximation with set operations"}),"\n",(0,i.jsxs)(t.p,{children:["Use Theta sketches to obtain a fast approximate estimate for the distinct count of values used to build the sketches.\nTheta sketches are a probabilistic data structure to enable approximate analysis of big data with known error distributions.\nDruid's implementation relies on the ",(0,i.jsx)(t.a,{href:"https://datasketches.apache.org/",children:"Apache DataSketches"})," library."]}),"\n",(0,i.jsx)(t.p,{children:"The following properties describe Theta sketches:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Similar to other sketches, Theta sketches are ",(0,i.jsx)(t.strong,{children:"mergeable"}),". This means you can work with rolled up data and merge the sketches over various time intervals. Thus, you can take advantage of Druid's rollup feature."]}),"\n",(0,i.jsxs)(t.li,{children:["Specific to sketches supported in Druid, Theta sketches support ",(0,i.jsx)(t.strong,{children:"set operations"}),". Given two Theta sketches over subsets of data, you can compute the union, intersection, or set difference of the two subsets. This enables you to answer questions like the number of visitors that watched a specific combination of episodes from the example."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"In this tutorial, you will learn how to do the following:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Create Theta sketches from your input data at ingestion time."}),"\n",(0,i.jsx)(t.li,{children:"Execute distinct count and set operation queries on the Theta sketches to explore the questions presented earlier."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(t.p,{children:["Before proceeding, download Druid as described in the ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/tutorials/",children:"single-machine quickstart"})," and have it running on your local machine. You don't need to load any data into the Druid cluster."]}),"\n",(0,i.jsxs)(t.p,{children:["It's helpful to have finished ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/tutorials/tutorial-batch",children:"Tutorial: Loading a file"})," and ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/tutorials/tutorial-query",children:"Tutorial: Querying data"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"sample-data",children:"Sample data"}),"\n",(0,i.jsx)(t.p,{children:"This tutorial works with the following data:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"date"}),": a timestamp. In this case it's just dates but as mentioned earlier, a finer granularity makes sense in real life."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"uid"}),": a user ID"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"show"}),": name of a TV show"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"episode"}),": episode identifier"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csv",children:"date,uid,show,episode\n2022-05-19,alice,Game of Thrones,S1E1\n2022-05-19,alice,Game of Thrones,S1E2\n2022-05-19,alice,Game of Thrones,S1E1\n2022-05-19,bob,Bridgerton,S1E1\n2022-05-20,alice,Game of Thrones,S1E1\n2022-05-20,carol,Bridgerton,S1E2\n2022-05-20,dan,Bridgerton,S1E1\n2022-05-21,alice,Game of Thrones,S1E1\n2022-05-21,carol,Bridgerton,S1E1\n2022-05-21,erin,Game of Thrones,S1E1\n2022-05-21,alice,Bridgerton,S1E1\n2022-05-22,bob,Game of Thrones,S1E1\n2022-05-22,bob,Bridgerton,S1E1\n2022-05-22,carol,Bridgerton,S1E2\n2022-05-22,bob,Bridgerton,S1E1\n2022-05-22,erin,Game of Thrones,S1E1\n2022-05-22,erin,Bridgerton,S1E2\n2022-05-23,erin,Game of Thrones,S1E1\n2022-05-23,alice,Game of Thrones,S1E1\n"})}),"\n",(0,i.jsx)(t.h2,{id:"ingest-data-using-theta-sketches",children:"Ingest data using Theta sketches"}),"\n",(0,i.jsxs)(t.p,{children:["Load the sample dataset using the ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/multi-stage-query/reference#insert",children:(0,i.jsx)(t.code,{children:"INSERT INTO"})})," statement and the ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/multi-stage-query/reference#extern-function",children:(0,i.jsx)(t.code,{children:"EXTERN"})})," function to ingest the sample data inline. In the ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/operations/web-console",children:"Druid web console"}),", go to the ",(0,i.jsx)(t.strong,{children:"Query"})," view and run the following query:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:'INSERT INTO "ts_tutorial"\nWITH "source" AS (SELECT * FROM TABLE(\n  EXTERN(\n    \'{"type":"inline","data":"date,uid,show,episode\\n2022-05-19,alice,Game of Thrones,S1E1\\n2022-05-19,alice,Game of Thrones,S1E2\\n2022-05-19,alice,Game of Thrones,S1E1\\n2022-05-19,bob,Bridgerton,S1E1\\n2022-05-20,alice,Game of Thrones,S1E1\\n2022-05-20,carol,Bridgerton,S1E2\\n2022-05-20,dan,Bridgerton,S1E1\\n2022-05-21,alice,Game of Thrones,S1E1\\n2022-05-21,carol,Bridgerton,S1E1\\n2022-05-21,erin,Game of Thrones,S1E1\\n2022-05-21,alice,Bridgerton,S1E1\\n2022-05-22,bob,Game of Thrones,S1E1\\n2022-05-22,bob,Bridgerton,S1E1\\n2022-05-22,carol,Bridgerton,S1E2\\n2022-05-22,bob,Bridgerton,S1E1\\n2022-05-22,erin,Game of Thrones,S1E1\\n2022-05-22,erin,Bridgerton,S1E2\\n2022-05-23,erin,Game of Thrones,S1E1\\n2022-05-23,alice,Game of Thrones,S1E1"}\',\n    \'{"type":"csv","findColumnsFromHeader":true}\'\n  )\n) EXTEND ("date" VARCHAR, "show" VARCHAR, "episode" VARCHAR, "uid" VARCHAR))\nSELECT\n  TIME_FLOOR(TIME_PARSE("date"), \'P1D\') AS "__time",\n  "show",\n  "episode",\n  COUNT(*) AS "count",\n  DS_THETA("uid") AS "theta_uid"\nFROM "source"\nGROUP BY 1, 2, 3\nPARTITIONED BY DAY\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Notice the ",(0,i.jsx)(t.code,{children:"theta_uid"})," column in the ",(0,i.jsx)(t.code,{children:"SELECT"})," statement. It defines the ",(0,i.jsx)(t.code,{children:"thetaSketch"})," aggregator on the ",(0,i.jsx)(t.code,{children:"uid"})," column during ingestion.\nIn this scenario you are not interested in individual user IDs, only the unique counts.\nInstead you create Theta sketches on the values of ",(0,i.jsx)(t.code,{children:"uid"})," using the ",(0,i.jsx)(t.code,{children:"DS_THETA"})," function."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-theta#aggregator",children:(0,i.jsx)(t.code,{children:"DS_THETA"})})," has an optional second parameter that controls the accuracy and size of the sketches."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"GROUP BY"})," statement groups the entries for each episode of a show watched on the same day."]}),"\n",(0,i.jsx)(t.h2,{id:"query-the-theta-sketch-column",children:"Query the Theta sketch column"}),"\n",(0,i.jsx)(t.p,{children:"Calculating a unique count estimate from a Theta sketch column involves the following steps:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Merge the Theta sketches in the column by means of the ",(0,i.jsx)(t.code,{children:"DS_THETA"})," ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/querying/sql-aggregations#theta-sketch-functions",children:"aggregator function"})," in Druid SQL."]}),"\n",(0,i.jsxs)(t.li,{children:["Retrieve the estimate from the merged sketch with the ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/querying/sql-scalar#theta-sketch-functions",children:(0,i.jsx)(t.code,{children:"THETA_SKETCH_ESTIMATE"})})," function."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Between steps 1 and 2, you can apply set functions as demonstrated later in ",(0,i.jsx)(t.a,{href:"#set-operations",children:"Set operations"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"basic-counting",children:"Basic counting"}),"\n",(0,i.jsx)(t.p,{children:"Let's first see what the data looks like in Druid. Run the following SQL statement in the query editor:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT * FROM ts_tutorial\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"View data with SELECT all query",src:s(10763).A+"",width:"1250",height:"640"})}),"\n",(0,i.jsxs)(t.p,{children:["The Theta sketch column ",(0,i.jsx)(t.code,{children:"theta_uid"})," appears as a Base64-encoded string; behind it is a bitmap."]}),"\n",(0,i.jsxs)(t.p,{children:["The following query uses ",(0,i.jsx)(t.code,{children:"THETA_SKETCH_ESTIMATE"})," to compute the distinct counts of user IDs and groups by the other dimensions:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:'SELECT\n  __time,\n  "show",\n  "episode",\n  THETA_SKETCH_ESTIMATE(theta_uid) AS users\nFROM ts_tutorial\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Count distinct with Theta sketches",src:s(18772).A+"",width:"1250",height:"640"})}),"\n",(0,i.jsx)(t.h3,{id:"filtered-metrics",children:"Filtered metrics"}),"\n",(0,i.jsxs)(t.p,{children:["Druid has the capability to use ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/querying/sql-aggregations",children:"filtered metrics"}),". This means you can include a WHERE clause in the SELECT part of the query."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"In the case of Theta sketches, the filter clause has to be inserted between the aggregator and the estimator."})}),"\n",(0,i.jsxs)(t.p,{children:["As an example, query the total unique users that watched ",(0,i.jsx)(t.em,{children:"Bridgerton"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT APPROX_COUNT_DISTINCT_DS_THETA(theta_uid) FILTER(WHERE \"show\" = 'Bridgerton') AS users\nFROM ts_tutorial\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Count distinct with Theta sketches and filters",src:s(39901).A+"",width:"1250",height:"640"})}),"\n",(0,i.jsxs)(t.p,{children:["In the preceding query, ",(0,i.jsx)(t.code,{children:"APPROX_COUNT_DISTINCT_DS_THETA"})," is equivalent to calling ",(0,i.jsx)(t.code,{children:"DS_THETA"})," and ",(0,i.jsx)(t.code,{children:"THETA_SKETCH_ESIMATE"})," as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT THETA_SKETCH_ESTIMATE(\n         DS_THETA(theta_uid) FILTER(WHERE \"show\" = 'Bridgerton')\n       ) AS users\nFROM ts_tutorial\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"APPROX_COUNT_DISTINCT_DS_THETA"})," function applies the following:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"DS_THETA"}),": Creates a new Theta sketch from the column of Theta sketches."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"THETA_SKETCH_ESTIMATE"}),": Calculates the distinct count estimate from the output of ",(0,i.jsx)(t.code,{children:"DS_THETA"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Note that the filter clause limits an aggregation query to only the rows that match the filter."}),"\n",(0,i.jsx)(t.h3,{id:"set-operations",children:"Set operations"}),"\n",(0,i.jsxs)(t.p,{children:["You can use this capability of filtering in the aggregator, together with ",(0,i.jsx)(t.em,{children:"set operations"}),", to finally answer the questions from the introduction."]}),"\n",(0,i.jsxs)(t.p,{children:["How many users watched both episodes of ",(0,i.jsx)(t.em,{children:"Bridgerton?"})," Use ",(0,i.jsx)(t.code,{children:"THETA_SKETCH_INTERSECT"})," to compute the unique count of the intersection of two (or more) segments:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT THETA_SKETCH_ESTIMATE(\n         THETA_SKETCH_INTERSECT(\n           DS_THETA(theta_uid) FILTER(WHERE \"show\" = 'Bridgerton' AND \"episode\" = 'S1E1'),\n           DS_THETA(theta_uid) FILTER(WHERE \"show\" = 'Bridgerton' AND \"episode\" = 'S1E2')\n         )\n       ) AS users\nFROM ts_tutorial\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Count distinct with Theta sketches, filters, and set operations",src:s(56134).A+"",width:"1250",height:"640"})}),"\n",(0,i.jsx)(t.p,{children:"Again, the set function is spliced in between the aggregator and the estimator."}),"\n",(0,i.jsxs)(t.p,{children:["Likewise, use ",(0,i.jsx)(t.code,{children:"THETA_SKETCH_UNION"})," to find the number of visitors that watched ",(0,i.jsx)(t.em,{children:"any"})," of the episodes:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT THETA_SKETCH_ESTIMATE(\n         THETA_SKETCH_UNION(\n           DS_THETA(theta_uid) FILTER(WHERE \"show\" = 'Bridgerton' AND \"episode\" = 'S1E1'),\n           DS_THETA(theta_uid) FILTER(WHERE \"show\" = 'Bridgerton' AND \"episode\" = 'S1E2')\n         )\n       ) AS users\nFROM ts_tutorial\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Count distinct with Theta sketches, filters, and set operations",src:s(41231).A+"",width:"1250",height:"640"})}),"\n",(0,i.jsxs)(t.p,{children:["And finally, there is ",(0,i.jsx)(t.code,{children:"THETA_SKETCH_NOT"})," which computes the set difference of two or more segments.\nThe result describes how many visitors watched episode 1 of Bridgerton but not episode 2."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT THETA_SKETCH_ESTIMATE(\n         THETA_SKETCH_NOT(\n           DS_THETA(theta_uid) FILTER(WHERE \"show\" = 'Bridgerton' AND \"episode\" = 'S1E1'),\n           DS_THETA(theta_uid) FILTER(WHERE \"show\" = 'Bridgerton' AND \"episode\" = 'S1E2')\n         )\n       ) AS users\nFROM ts_tutorial\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Count distinct with Theta sketches, filters, and set operations",src:s(39576).A+"",width:"1250",height:"640"})}),"\n",(0,i.jsx)(t.h2,{id:"conclusions",children:"Conclusions"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Counting distinct things for large data sets can be done with Theta sketches in Apache Druid."}),"\n",(0,i.jsx)(t.li,{children:"This allows us to use rollup and discard the individual values, just retaining statistical approximations in the sketches."}),"\n",(0,i.jsx)(t.li,{children:"With Theta sketch set operations, affinity analysis is easier, for example, to answer questions such as which segments correlate or overlap by how much."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"learn-more",children:"Learn more"}),"\n",(0,i.jsx)(t.p,{children:"See the following topics for more information:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-theta",children:"Theta sketch"})," for reference on ingestion and native queries on Theta sketches in Druid."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/33.0.0/querying/sql-scalar#theta-sketch-functions",children:"Theta sketch scalar functions"})," and ",(0,i.jsx)(t.a,{href:"/docs/33.0.0/querying/sql-aggregations#theta-sketch-functions",children:"Theta sketch aggregation functions"})," for Theta sketch functions in Druid SQL queries."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/33.0.0/ingestion/schema-design#sketches-for-high-cardinality-columns",children:"Sketches for high cardinality columns"})," for Druid schema design involving sketches."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-extension",children:"DataSketches extension"})," for more information about the DataSketches extension in Druid as well as other available sketches."]}),"\n",(0,i.jsxs)(t.li,{children:["The accuracy of queries using Theta sketches is governed by the size ",(0,i.jsx)(t.em,{children:"k"})," of the Theta sketch and by the operations you perform. See more details in the ",(0,i.jsx)(t.a,{href:"https://datasketches.apache.org/docs/Theta/ThetaAccuracy.html",children:"Apache DataSketches documentation"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"acknowledgments",children:"Acknowledgments"}),"\n",(0,i.jsxs)(t.p,{children:["This tutorial is adapted from a ",(0,i.jsx)(t.a,{href:"https://blog.hellmar-becker.de/2022/06/05/druid-data-cookbook-counting-unique-visitors-for-overlapping-segments/",children:"blog post"})," by community member Hellmar Becker."]}),"\n","\n",(0,i.jsxs)(t.section,{"data-footnotes":!0,className:"footnotes",children:[(0,i.jsx)(t.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{id:"user-content-fn-1",children:["\n",(0,i.jsxs)(t.p,{children:["Why 15 minutes and not just 1 hour? Intervals of 15 minutes work better with international timezones because those are not always aligned by hour. India, for instance, is 30 minutes off, and Nepal is even 45 minutes off. With 15 minute aggregates, you can get hourly sums for any of those timezones, too! ",(0,i.jsx)(t.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);