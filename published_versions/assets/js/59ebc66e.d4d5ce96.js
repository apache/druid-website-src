"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5260],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(96540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},92286:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"querying/dimensionspecs","title":"Query dimensions","description":"\x3c!--","source":"@site/docs/33.0.0/querying/dimensionspecs.md","sourceDirName":"querying","slug":"/querying/dimensionspecs","permalink":"/docs/33.0.0/querying/dimensionspecs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"dimensionspecs","title":"Query dimensions","sidebar_label":"Dimensions"},"sidebar":"docs","previous":{"title":"Granularities","permalink":"/docs/33.0.0/querying/granularities"},"next":{"title":"Aggregations","permalink":"/docs/33.0.0/querying/aggregations"}}');var s=i(74848),r=i(28453);const o={id:"dimensionspecs",title:"Query dimensions",sidebar_label:"Dimensions"},a=void 0,l={},c=[{value:"DimensionSpec",id:"dimensionspec",level:2},{value:"Default DimensionSpec",id:"default-dimensionspec",level:3},{value:"Extraction DimensionSpec",id:"extraction-dimensionspec",level:3},{value:"Filtered DimensionSpecs",id:"filtered-dimensionspecs",level:3},{value:"Lookup DimensionSpecs",id:"lookup-dimensionspecs",level:3},{value:"Output Types",id:"output-types",level:2},{value:"Extraction Functions",id:"extraction-functions",level:2},{value:"Regular Expression Extraction Function",id:"regular-expression-extraction-function",level:3},{value:"Partial Extraction Function",id:"partial-extraction-function",level:3},{value:"Search query extraction function",id:"search-query-extraction-function",level:3},{value:"Substring Extraction Function",id:"substring-extraction-function",level:3},{value:"Strlen Extraction Function",id:"strlen-extraction-function",level:3},{value:"Time Format Extraction Function",id:"time-format-extraction-function",level:3},{value:"Time Parsing Extraction Function",id:"time-parsing-extraction-function",level:3},{value:"JavaScript Extraction Function",id:"javascript-extraction-function",level:3},{value:"Registered lookup extraction function",id:"registered-lookup-extraction-function",level:3},{value:"Inline lookup extraction function",id:"inline-lookup-extraction-function",level:3},{value:"Cascade Extraction Function",id:"cascade-extraction-function",level:3},{value:"String Format Extraction Function",id:"string-format-extraction-function",level:3},{value:"Upper and Lower extraction functions.",id:"upper-and-lower-extraction-functions",level:3},{value:"Bucket Extraction Function",id:"bucket-extraction-function",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Apache Druid supports two query languages: ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql",children:"Druid SQL"})," and ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/",children:"native queries"}),".\nThis document describes the native\nlanguage. For information about functions available in SQL, refer to the\n",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-scalar",children:"SQL documentation"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"The following JSON fields can be used in a query to operate on dimension values."}),"\n",(0,s.jsx)(n.h2,{id:"dimensionspec",children:"DimensionSpec"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"DimensionSpec"})," defines how to transform dimension values prior to aggregation."]}),"\n",(0,s.jsx)(n.h3,{id:"default-dimensionspec",children:"Default DimensionSpec"}),"\n",(0,s.jsx)(n.p,{children:"Returns dimension values as is and optionally renames the dimension."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "default",\n  "dimension" : <dimension>,\n  "outputName": <output_name>,\n  "outputType": <"STRING"|"LONG"|"FLOAT">\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When specifying a ",(0,s.jsx)(n.code,{children:"DimensionSpec"})," on a numeric column, you should include the type of the column in the ",(0,s.jsx)(n.code,{children:"outputType"})," field. The ",(0,s.jsx)(n.code,{children:"outputType"})," defaults to STRING when not specified."]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"#output-types",children:"Output Types"})," for more details."]}),"\n",(0,s.jsx)(n.h3,{id:"extraction-dimensionspec",children:"Extraction DimensionSpec"}),"\n",(0,s.jsxs)(n.p,{children:["Returns dimension values transformed using the given ",(0,s.jsx)(n.a,{href:"#extraction-functions",children:"extraction function"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "extraction",\n  "dimension" : <dimension>,\n  "outputName" :  <output_name>,\n  "outputType": <"STRING"|"LONG"|"FLOAT">,\n  "extractionFn" : <extraction_function>\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can specify an ",(0,s.jsx)(n.code,{children:"outputType"})," in an ",(0,s.jsx)(n.code,{children:"ExtractionDimensionSpec"})," to apply type conversion to results before merging. The ",(0,s.jsx)(n.code,{children:"outputType"})," defaults to STRING when not specified."]}),"\n",(0,s.jsxs)(n.p,{children:["Please refer to the ",(0,s.jsx)(n.a,{href:"#output-types",children:"Output Types"})," section for more details."]}),"\n",(0,s.jsx)(n.h3,{id:"filtered-dimensionspecs",children:"Filtered DimensionSpecs"}),"\n",(0,s.jsxs)(n.p,{children:["A filtered ",(0,s.jsx)(n.code,{children:"DimensionSpec"}),' is only useful for multi-value dimensions. Say you have a row in Apache Druid that has a multi-value dimension with values ["v1", "v2", "v3"] and you send a groupBy/topN query grouping by that dimension with a ',(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/filters",children:"query filter"}),' for a value of "v1". In the response you will get 3 rows containing "v1", "v2" and "v3". This behavior might be unintuitive for some use cases.']}),"\n",(0,s.jsx)(n.p,{children:'This happens because Druid uses the "query filter" internally on bitmaps to match the row to include in query result processing. With multi-value dimensions, "query filter" behaves like a contains check, which matches the row with dimension value ["v1", "v2", "v3"].'}),"\n",(0,s.jsxs)(n.p,{children:['See the section on "Multi-value columns" in ',(0,s.jsx)(n.a,{href:"/docs/33.0.0/design/segments",children:"segment"})," for more details."]}),"\n",(0,s.jsx)(n.p,{children:'Then the groupBy/topN processing pipeline "explodes" all multi-value dimensions resulting 3 rows for "v1", "v2" and "v3" each.'}),"\n",(0,s.jsxs)(n.p,{children:['In addition to "query filter", which efficiently selects the rows to be processed, you can use the filtered dimension spec to filter for specific values within the values of a multi-value dimension. These dimension specs take a delegate ',(0,s.jsx)(n.code,{children:"DimensionSpec"}),' and a filtering criteria. From the "exploded" rows, only rows matching the given filtering criteria are returned in the query result.']}),"\n",(0,s.jsxs)(n.p,{children:["The following filtered dimension spec defines the values to include or exclude as per the ",(0,s.jsx)(n.code,{children:"isWhitelist"})," attribute value."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "listFiltered", "delegate" : <dimensionSpec>, "values": <array of strings>, "isWhitelist": <optional attribute for true/false, default is true> }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The following filtered dimension spec retains only the values matching a regex.  You should use the ",(0,s.jsx)(n.code,{children:"listFiltered"})," function for inclusion and exclusion use cases because it is faster."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "regexFiltered", "delegate" : <dimensionSpec>, "pattern": <java regex pattern> }\n'})}),"\n",(0,s.jsx)(n.p,{children:"The following filtered dimension spec retains only the values starting with the same prefix."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "prefixFiltered", "delegate" : <dimensionSpec>, "prefix": <prefix string> }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For more details and examples, see ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/multi-value-dimensions",children:"multi-value dimensions"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"lookup-dimensionspecs",children:"Lookup DimensionSpecs"}),"\n",(0,s.jsxs)(n.p,{children:["You can use lookup dimension specs to define a lookup implementation as a dimension spec directly.\nGenerally, there are two kinds of lookup implementations.\nThe first kind is passed at the query time like ",(0,s.jsx)(n.code,{children:"map"})," implementation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type":"lookup",\n  "dimension":"dimensionName",\n  "outputName":"dimensionOutputName",\n  "replaceMissingValueWith":"missing_value",\n  "retainMissingValue":false,\n  "lookup":{"type": "map", "map":{"key":"value"}, "isOneToOne":false}\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A property of ",(0,s.jsx)(n.code,{children:"retainMissingValue"})," and ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"})," can be specified at query time to hint how to handle missing values. Setting ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"})," to ",(0,s.jsx)(n.code,{children:'""'})," has the same effect as setting it to ",(0,s.jsx)(n.code,{children:"null"})," or omitting the property.\nSetting ",(0,s.jsx)(n.code,{children:"retainMissingValue"})," to true will use the dimension's original value if it is not found in the lookup.\nThe default values are ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith = null"})," and ",(0,s.jsx)(n.code,{children:"retainMissingValue = false"})," which causes missing values to be treated as missing."]}),"\n",(0,s.jsxs)(n.p,{children:["It is illegal to set ",(0,s.jsx)(n.code,{children:"retainMissingValue = true"})," and also specify a ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A property ",(0,s.jsx)(n.code,{children:"optimize"})," can be supplied to allow optimization of lookup based extraction filter (by default ",(0,s.jsx)(n.code,{children:"optimize = true"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"The second kind where it is not possible to pass at query time due to their size, will be based on an external lookup table or resource that is already registered via configuration file or/and Coordinator."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type":"lookup",\n  "dimension":"dimensionName",\n  "outputName":"dimensionOutputName",\n  "name":"lookupName"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"output-types",children:"Output Types"}),"\n",(0,s.jsxs)(n.p,{children:["The dimension specs provide an option to specify the output type of a column's values. This is necessary as it is possible for a column with given name to have different value types in different segments; results will be converted to the type specified by ",(0,s.jsx)(n.code,{children:"outputType"})," before merging."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that not all use cases for DimensionSpec currently support ",(0,s.jsx)(n.code,{children:"outputType"}),", the table below shows which use cases support this option:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Query Type"}),(0,s.jsx)(n.th,{children:"Supported?"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GroupBy (v1)"}),(0,s.jsx)(n.td,{children:"no"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GroupBy (v2)"}),(0,s.jsx)(n.td,{children:"yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TopN"}),(0,s.jsx)(n.td,{children:"yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Search"}),(0,s.jsx)(n.td,{children:"no"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Select"}),(0,s.jsx)(n.td,{children:"no"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Cardinality Aggregator"}),(0,s.jsx)(n.td,{children:"no"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"extraction-functions",children:"Extraction Functions"}),"\n",(0,s.jsx)(n.p,{children:"Extraction functions define the transformation applied to each dimension value."}),"\n",(0,s.jsxs)(n.p,{children:["Transformations can be applied to both regular (string) dimensions, as well\nas the special ",(0,s.jsx)(n.code,{children:"__time"})," dimension, which represents the current time bucket\naccording to the query ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/granularities",children:"aggregation granularity"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": for functions taking string values (such as regular expressions),\n",(0,s.jsx)(n.code,{children:"__time"})," dimension values will be formatted in ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/ISO_8601",children:"ISO-8601 format"}),"\nbefore getting passed to the extraction function."]}),"\n",(0,s.jsx)(n.h3,{id:"regular-expression-extraction-function",children:"Regular Expression Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:"Returns the first matching group for the given regular expression.\nIf there is no match, it returns the dimension value as is."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "regex",\n  "expr" : <regular_expression>,\n  "index" : <group to extract, default 1>\n  "replaceMissingValue" : true,\n  "replaceMissingValueWith" : "foobar"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For example, using ",(0,s.jsx)(n.code,{children:'"expr" : "(\\\\w\\\\w\\\\w).*"'})," will transform\n",(0,s.jsx)(n.code,{children:"'Monday'"}),", ",(0,s.jsx)(n.code,{children:"'Tuesday'"}),", ",(0,s.jsx)(n.code,{children:"'Wednesday'"})," into ",(0,s.jsx)(n.code,{children:"'Mon'"}),", ",(0,s.jsx)(n.code,{children:"'Tue'"}),", ",(0,s.jsx)(n.code,{children:"'Wed'"}),"."]}),"\n",(0,s.jsx)(n.p,{children:'If "index" is set, it will control which group from the match to extract. Index zero extracts the string matching the\nentire pattern.'}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.code,{children:"replaceMissingValue"})," property is true, the extraction function will transform dimension values that do not match the regex pattern to a user-specified String. Default value is ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"})," property sets the String that unmatched dimension values will be replaced with, if ",(0,s.jsx)(n.code,{children:"replaceMissingValue"})," is true. If ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"})," is not specified, unmatched dimension values will be replaced with nulls."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if ",(0,s.jsx)(n.code,{children:"expr"})," is ",(0,s.jsx)(n.code,{children:'"(a\\w+)"'})," in the example JSON above, a regex that matches words starting with the letter ",(0,s.jsx)(n.code,{children:"a"}),", the extraction function will convert a dimension value like ",(0,s.jsx)(n.code,{children:"banana"})," to ",(0,s.jsx)(n.code,{children:"foobar"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"partial-extraction-function",children:"Partial Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:"Returns the dimension value unchanged if the regular expression matches, otherwise returns null."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "partial", "expr" : <regular_expression> }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"search-query-extraction-function",children:"Search query extraction function"}),"\n",(0,s.jsxs)(n.p,{children:["Returns the dimension value unchanged if the given ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/searchquery#searchqueryspec",children:(0,s.jsx)(n.code,{children:"SearchQuerySpec"})}),"\nmatches, otherwise returns null."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "searchQuery", "query" : <search_query_spec> }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"substring-extraction-function",children:"Substring Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:'Returns a substring of the dimension value starting from the supplied index and of the desired length. Both index\nand length are measured in the number of Unicode code units present in the string as if it were encoded in UTF-16.\nNote that some Unicode characters may be represented by two code units. This is the same behavior as the Java String\nclass\'s "substring" method.'}),"\n",(0,s.jsx)(n.p,{children:"If the desired length exceeds the length of the dimension value, the remainder of the string starting at index will\nbe returned. If index is greater than the length of the dimension value, null will be returned."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "substring", "index" : 1, "length" : 4 }\n'})}),"\n",(0,s.jsx)(n.p,{children:"The length may be omitted for substring to return the remainder of the dimension value starting from index,\nor null if index greater than the length of the dimension value."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "substring", "index" : 3 }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"strlen-extraction-function",children:"Strlen Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:'Returns the length of dimension values, as measured in the number of Unicode code units present in the string as if it\nwere encoded in UTF-16. Note that some Unicode characters may be represented by two code units. This is the same\nbehavior as the Java String class\'s "length" method.'}),"\n",(0,s.jsx)(n.p,{children:"null strings are considered as having zero length."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "strlen" }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"time-format-extraction-function",children:"Time Format Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:"Returns the dimension value formatted according to the given format string, time zone, and locale."}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"__time"})," dimension values, this formats the time value bucketed by the\n",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/granularities",children:"aggregation granularity"})]}),"\n",(0,s.jsxs)(n.p,{children:["For a regular dimension, it assumes the string is formatted in\n",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/ISO_8601",children:"ISO-8601 date and time format"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"format"})," : date time format for the resulting dimension value, in ",(0,s.jsx)(n.a,{href:"http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html",children:"Joda Time DateTimeFormat"}),", or null to use the default ISO8601 format."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"locale"})," : locale (language and country) to use, given as a ",(0,s.jsx)(n.a,{href:"https://www.oracle.com/java/technologies/javase/jdk11-suported-locales.html#util-text",children:"IETF BCP 47 language tag"}),", e.g. ",(0,s.jsx)(n.code,{children:"en-US"}),", ",(0,s.jsx)(n.code,{children:"en-GB"}),", ",(0,s.jsx)(n.code,{children:"fr-FR"}),", ",(0,s.jsx)(n.code,{children:"fr-CA"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timeZone"})," : time zone to use in ",(0,s.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones",children:"IANA tz database format"}),", e.g. ",(0,s.jsx)(n.code,{children:"Europe/Berlin"})," (this can possibly be different than the aggregation time-zone)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"granularity"})," : ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/granularities",children:"granularity"})," to apply before formatting, or omit to not apply any granularity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"asMillis"})," : boolean value, set to true to treat input strings as millis rather than ISO8601 strings. Additionally, if ",(0,s.jsx)(n.code,{children:"format"})," is null or not specified, output will be in millis rather than ISO8601."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "timeFormat",\n  "format" : <output_format> (optional),\n  "timeZone" : <time_zone> (optional, default UTC),\n  "locale" : <locale> (optional, default current locale),\n  "granularity" : <granularity> (optional, default none) },\n  "asMillis" : <true or false> (optional) }\n'})}),"\n",(0,s.jsx)(n.p,{children:"For example, the following dimension spec returns the day of the week for Montr\xe9al in French:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "extraction",\n  "dimension" : "__time",\n  "outputName" :  "dayOfWeek",\n  "extractionFn" : {\n    "type" : "timeFormat",\n    "format" : "EEEE",\n    "timeZone" : "America/Montreal",\n    "locale" : "fr"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"time-parsing-extraction-function",children:"Time Parsing Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:"Parses dimension values as timestamps using the given input format,\nand returns them formatted using the given output format."}),"\n",(0,s.jsxs)(n.p,{children:["Note, if you are working with the ",(0,s.jsx)(n.code,{children:"__time"})," dimension, you should consider using the\n",(0,s.jsx)(n.a,{href:"#time-format-extraction-function",children:"time extraction function instead"})," instead,\nwhich works on time value directly as opposed to string values."]}),"\n",(0,s.jsxs)(n.p,{children:['If "joda" is true, time formats are described in the ',(0,s.jsx)(n.a,{href:"http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html",children:"Joda DateTimeFormat documentation"}),'.\nIf "joda" is false (or unspecified) then formats are described in the ',(0,s.jsx)(n.a,{href:"http://icu-project.org/apiref/icu4j/com/ibm/icu/text/SimpleDateFormat.html",children:"SimpleDateFormat documentation"}),'.\nIn general, we recommend setting "joda" to true since Joda format strings are more common in Druid APIs and since Joda handles certain edge cases (like weeks and weekyears near\nthe start and end of calendar years) in a more ISO8601 compliant way.']}),"\n",(0,s.jsx)(n.p,{children:"If a value cannot be parsed using the provided timeFormat, it will be returned as-is."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "time",\n  "timeFormat" : <input_format>,\n  "resultFormat" : <output_format>,\n  "joda" : <true, false> }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"javascript-extraction-function",children:"JavaScript Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:"Returns the dimension value, as transformed by the given JavaScript function."}),"\n",(0,s.jsx)(n.p,{children:"For regular dimensions, the input value is passed as a string."}),"\n",(0,s.jsxs)(n.p,{children:["For the ",(0,s.jsx)(n.code,{children:"__time"})," dimension, the input value is passed as a number\nrepresenting the number of milliseconds since January 1, 1970 UTC."]}),"\n",(0,s.jsx)(n.p,{children:"Example for a regular dimension"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "javascript",\n  "function" : "function(str) { return str.substr(0, 3); }"\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "javascript",\n  "function" : "function(str) { return str + \'!!!\'; }",\n  "injective" : true\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A property of ",(0,s.jsx)(n.code,{children:"injective"})," specifies if the JavaScript function preserves uniqueness. The default value is ",(0,s.jsx)(n.code,{children:"false"})," meaning uniqueness is not preserved"]}),"\n",(0,s.jsxs)(n.p,{children:["Example for the ",(0,s.jsx)(n.code,{children:"__time"})," dimension:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "javascript",\n  "function" : "function(t) { return \'Second \' + Math.floor((t % 60000) / 1000); }"\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["JavaScript-based functionality is disabled by default. Please refer to the Druid ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/development/javascript",children:"JavaScript programming guide"})," for guidelines about using Druid's JavaScript functionality, including instructions on how to enable it."]})}),"\n",(0,s.jsx)(n.h3,{id:"registered-lookup-extraction-function",children:"Registered lookup extraction function"}),"\n",(0,s.jsxs)(n.p,{children:["Lookups are a concept in Druid where dimension values are (optionally) replaced with new values.\nFor more documentation on using lookups, please see ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/lookups",children:"Lookups"}),'.\nThe "registeredLookup" extraction function lets you refer to a lookup that has been registered in the cluster-wide\nconfiguration.']}),"\n",(0,s.jsx)(n.p,{children:"An example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type":"registeredLookup",\n  "lookup":"some_lookup_name",\n  "retainMissingValue":true\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A property of ",(0,s.jsx)(n.code,{children:"retainMissingValue"})," and ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"})," can be specified at query time to hint how to handle\nmissing values. Setting ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"})," to ",(0,s.jsx)(n.code,{children:'""'})," has the same effect as setting it to ",(0,s.jsx)(n.code,{children:"null"})," or omitting the\nproperty. Setting ",(0,s.jsx)(n.code,{children:"retainMissingValue"})," to true will use the dimension's original value if it is not found in the lookup.\nThe default values are ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith = null"})," and ",(0,s.jsx)(n.code,{children:"retainMissingValue = false"})," which causes missing values to\nbe treated as missing."]}),"\n",(0,s.jsxs)(n.p,{children:["It is illegal to set ",(0,s.jsx)(n.code,{children:"retainMissingValue = true"})," and also specify a ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A property of ",(0,s.jsx)(n.code,{children:"injective"})," can override the lookup's own sense of whether or not it is\n",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/lookups#injective-lookups",children:"injective"}),". If left unspecified, Druid will use the registered cluster-wide lookup\nconfiguration."]}),"\n",(0,s.jsxs)(n.p,{children:["A property ",(0,s.jsx)(n.code,{children:"optimize"})," can be supplied to allow optimization of lookup based extraction filter (by default ",(0,s.jsx)(n.code,{children:"optimize = true"}),").\nThe optimization layer will run on the Broker and it will rewrite the extraction filter as clause of selector filters.\nFor instance the following filter"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "filter": {\n        "type": "selector",\n        "dimension": "product",\n        "value": "bar_1",\n        "extractionFn": {\n            "type": "registeredLookup",\n            "optimize": true,\n            "lookup": "some_lookup_name"\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'will be rewritten as the following simpler query, assuming a lookup that maps "product_1" and "product_3" to the value\n"bar_1":'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n   "filter":{\n      "type":"or",\n      "fields":[\n         {\n            "filter":{\n               "type":"selector",\n               "dimension":"product",\n               "value":"product_1"\n            }\n         },\n         {\n            "filter":{\n               "type":"selector",\n               "dimension":"product",\n               "value":"product_3"\n            }\n         }\n      ]\n   }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A null dimension value can be mapped to a specific value by specifying the empty string as the key in your lookup file.\nThis allows distinguishing between a null dimension and a lookup resulting in a null.\nFor example, specifying ",(0,s.jsx)(n.code,{children:'{"":"bar","bat":"baz"}'})," with dimension values ",(0,s.jsx)(n.code,{children:'[null, "foo", "bat"]'})," and replacing missing values with ",(0,s.jsx)(n.code,{children:'"oof"'})," will yield results of ",(0,s.jsx)(n.code,{children:'["bar", "oof", "baz"]'}),".\nOmitting the empty string key will cause the missing value to take over. For example, specifying ",(0,s.jsx)(n.code,{children:'{"bat":"baz"}'})," with dimension values ",(0,s.jsx)(n.code,{children:'[null, "foo", "bat"]'})," and replacing missing values with ",(0,s.jsx)(n.code,{children:'"oof"'})," will yield results of ",(0,s.jsx)(n.code,{children:'["oof", "oof", "baz"]'}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"inline-lookup-extraction-function",children:"Inline lookup extraction function"}),"\n",(0,s.jsxs)(n.p,{children:["Lookups are a concept in Druid where dimension values are (optionally) replaced with new values.\nFor more documentation on using lookups, please see ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/lookups",children:"Lookups"}),'.\nThe "lookup" extraction function lets you specify an inline lookup map without registering one in the cluster-wide\nconfiguration.']}),"\n",(0,s.jsx)(n.p,{children:"Examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type":"lookup",\n  "lookup":{\n    "type":"map",\n    "map":{"foo":"bar", "baz":"bat"}\n  },\n  "retainMissingValue":true,\n  "injective":true\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type":"lookup",\n  "lookup":{\n    "type":"map",\n    "map":{"foo":"bar", "baz":"bat"}\n  },\n  "retainMissingValue":false,\n  "injective":false,\n  "replaceMissingValueWith":"MISSING"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The inline lookup should be of type ",(0,s.jsx)(n.code,{children:"map"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The properties ",(0,s.jsx)(n.code,{children:"retainMissingValue"}),", ",(0,s.jsx)(n.code,{children:"replaceMissingValueWith"}),", ",(0,s.jsx)(n.code,{children:"injective"}),", and ",(0,s.jsx)(n.code,{children:"optimize"})," behave similarly to the\n",(0,s.jsx)(n.a,{href:"#registered-lookup-extraction-function",children:"registered lookup extraction function"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"cascade-extraction-function",children:"Cascade Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:"Provides chained execution of extraction functions."}),"\n",(0,s.jsxs)(n.p,{children:["A property of ",(0,s.jsx)(n.code,{children:"extractionFns"})," contains an array of any extraction functions, which is executed in the array index order."]}),"\n",(0,s.jsxs)(n.p,{children:["Example for chaining ",(0,s.jsx)(n.a,{href:"#regular-expression-extraction-function",children:"regular expression extraction function"}),", ",(0,s.jsx)(n.a,{href:"#javascript-extraction-function",children:"JavaScript extraction function"}),", and ",(0,s.jsx)(n.a,{href:"#substring-extraction-function",children:"substring extraction function"})," is as followings."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "cascade",\n  "extractionFns": [\n    {\n      "type" : "regex",\n      "expr" : "/([^/]+)/",\n      "replaceMissingValue": false,\n      "replaceMissingValueWith": null\n    },\n    {\n      "type" : "javascript",\n      "function" : "function(str) { return \\"the \\".concat(str) }"\n    },\n    {\n      "type" : "substring",\n      "index" : 0, "length" : 7\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["It will transform dimension values with specified extraction functions in the order named.\nFor example, ",(0,s.jsx)(n.code,{children:"'/druid/prod/historical'"})," is transformed to ",(0,s.jsx)(n.code,{children:"'the dru'"})," as regular expression extraction function first transforms it to ",(0,s.jsx)(n.code,{children:"'druid'"})," and then, JavaScript extraction function transforms it to ",(0,s.jsx)(n.code,{children:"'the druid'"}),", and lastly, substring extraction function transforms it to ",(0,s.jsx)(n.code,{children:"'the dru'"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"string-format-extraction-function",children:"String Format Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:"Returns the dimension value formatted according to the given format string."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{ "type" : "stringFormat", "format" : <sprintf_expression>, "nullHandling" : <optional attribute for handling null value> }\n'})}),"\n",(0,s.jsxs)(n.p,{children:['For example if you want to concat "[" and "]" before and after the actual dimension value, you need to specify "[%s]" as format string. "nullHandling" can be one of ',(0,s.jsx)(n.code,{children:"nullString"}),", ",(0,s.jsx)(n.code,{children:"emptyString"})," or ",(0,s.jsx)(n.code,{children:"returnNull"}),'. With "[%s]" format, each configuration will result ',(0,s.jsx)(n.code,{children:"[null]"}),", ",(0,s.jsx)(n.code,{children:"[]"}),", ",(0,s.jsx)(n.code,{children:"null"}),". Default is ",(0,s.jsx)(n.code,{children:"nullString"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"upper-and-lower-extraction-functions",children:"Upper and Lower extraction functions."}),"\n",(0,s.jsx)(n.p,{children:"Returns the dimension values as all upper case or lower case.\nOptionally user can specify the language to use in order to perform upper or lower transformation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "upper",\n  "locale":"fr"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'or without setting "locale" (in this case, the current value of the default locale for this instance of the Java Virtual Machine.)'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "lower"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"bucket-extraction-function",children:"Bucket Extraction Function"}),"\n",(0,s.jsx)(n.p,{children:"Bucket extraction function is used to bucket numerical values in each range of the given size by converting them to the same base value. Non numeric values are converted to null."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"size"})," : the size of the buckets (optional, default 1)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"offset"})," : the offset for the buckets (optional, default 0)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The following extraction function creates buckets of 5 starting from 2. In this case, values in the range of [2, 7) will be converted to 2, values in [7, 12) will be converted to 7, etc."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "bucket",\n  "size" : 5,\n  "offset" : 2\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);