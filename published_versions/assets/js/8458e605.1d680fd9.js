"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8648],{28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>l});var n=t(96540);const o={},a=n.createContext(o);function r(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(a.Provider,{value:s},e.children)}},51317:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"development/extensions-core/test-stats","title":"Test stats aggregators","description":"\x3c!--","source":"@site/docs/33.0.0/development/extensions-core/test-stats.md","sourceDirName":"development/extensions-core","slug":"/development/extensions-core/test-stats","permalink":"/docs/33.0.0/development/extensions-core/test-stats","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"test-stats","title":"Test stats aggregators"}}');var o=t(74848),a=t(28453);const r={id:"test-stats",title:"Test stats aggregators"},l=void 0,c={},i=[{value:"Z-Score for two sample ztests post aggregator",id:"z-score-for-two-sample-ztests-post-aggregator",level:2},{value:"zscore2sample post aggregator",id:"zscore2sample-post-aggregator",level:3},{value:"pvalue2tailedZtest post aggregator",id:"pvalue2tailedztest-post-aggregator",level:3},{value:"Example usage",id:"example-usage",level:2}];function p(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.p,{children:["The ",(0,o.jsx)(s.code,{children:"druid-stats"})," extension for Apache Druid incorporates aggregators to compute test statistics, including z-scores and p-values.\nPlease refer to ",(0,o.jsx)(s.a,{href:"https://medium.com/paypal-tech/democratizing-experimentation-data-for-product-innovations-8b6e1cf40c27",children:"Democratizing Experimentation Data for Product Innovations"})," for math background and details."]}),"\n",(0,o.jsxs)(s.p,{children:["Make sure to include ",(0,o.jsx)(s.code,{children:"druid-stats"})," extension in order to use these aggregators."]}),"\n",(0,o.jsx)(s.h2,{id:"z-score-for-two-sample-ztests-post-aggregator",children:"Z-Score for two sample ztests post aggregator"}),"\n",(0,o.jsxs)(s.p,{children:["Please refer to ",(0,o.jsx)(s.a,{href:"https://www.isixsigma.com/tools-templates/hypothesis-testing/making-sense-two-proportions-test/",children:"Making Sense of the Two-Proportions Test"})," and ",(0,o.jsx)(s.a,{href:"https://userweb.ucs.louisiana.edu/~jcb0773/Berry_statbook/427bookall-August2024.pdf",children:"An Introduction to Statistics: Comparing Two Means"})," for more details."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"z = (p1 - p2) / S.E.  (assuming null hypothesis is true)\n"})}),"\n",(0,o.jsx)(s.p,{children:"Please see below for p1 and p2.\nPlease note S.E. stands for standard error where"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"S.E. = sqrt{ p1 * ( 1 - p1 )/n1 + p2 * (1 - p2)/n2) }\n"})}),"\n",(0,o.jsx)(s.p,{children:"(p1 \u2013 p2) is the observed difference between two sample proportions."}),"\n",(0,o.jsx)(s.h3,{id:"zscore2sample-post-aggregator",children:"zscore2sample post aggregator"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"zscore2sample"})}),": calculate the z-score using two-sample z-test while converting binary variables (",(0,o.jsx)(s.em,{children:(0,o.jsx)(s.strong,{children:"e.g."})})," success or not) to continuous variables (",(0,o.jsx)(s.em,{children:(0,o.jsx)(s.strong,{children:"e.g."})})," conversion rate)."]}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'{\n  "type": "zscore2sample",\n  "name": "<output_name>",\n  "successCount1": <post_aggregator> success count of sample 1,\n  "sample1Size": <post_aggregaror> sample 1 size,\n  "successCount2": <post_aggregator> success count of sample 2,\n  "sample2Size" : <post_aggregator> sample 2 size\n}\n'})}),"\n",(0,o.jsx)(s.p,{children:"Please note the post aggregator will be converting binary variables to continuous variables for two population proportions.  Specifically"}),"\n",(0,o.jsx)(s.p,{children:"p1 = (successCount1) / (sample size 1)"}),"\n",(0,o.jsx)(s.p,{children:"p2 = (successCount2) / (sample size 2)"}),"\n",(0,o.jsx)(s.h3,{id:"pvalue2tailedztest-post-aggregator",children:"pvalue2tailedZtest post aggregator"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:(0,o.jsx)(s.code,{children:"pvalue2tailedZtest"})}),": calculate p-value of two-sided z-test from zscore","\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.em,{children:(0,o.jsx)(s.strong,{children:"pvalue2tailedZtest(zscore)"})})," - the input is a z-score which can be calculated using the zscore2sample post aggregator"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'{\n  "type": "pvalue2tailedZtest",\n  "name": "<output_name>",\n  "zScore": <zscore post_aggregator>\n}\n'})}),"\n",(0,o.jsx)(s.h2,{id:"example-usage",children:"Example usage"}),"\n",(0,o.jsx)(s.p,{children:"In this example, we use zscore2sample post aggregator to calculate z-score, and then feed the z-score to pvalue2tailedZtest post aggregator to calculate p-value."}),"\n",(0,o.jsx)(s.p,{children:"A JSON query example can be as follows:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'{\n  ...\n    "postAggregations" : {\n    "type"   : "pvalue2tailedZtest",\n    "name"   : "pvalue",\n    "zScore" :\n    {\n     "type"   : "zscore2sample",\n     "name"   : "zscore",\n     "successCount1" :\n       { "type"   : "constant",\n         "name"   : "successCountFromPopulation1Sample",\n         "value"  : 300\n       },\n     "sample1Size" :\n       { "type"   : "constant",\n         "name"   : "sampleSizeOfPopulation1",\n         "value"  : 500\n       },\n     "successCount2":\n       { "type"   : "constant",\n         "name"   : "successCountFromPopulation2Sample",\n         "value"  : 450\n       },\n     "sample2Size" :\n       { "type"   : "constant",\n         "name"   : "sampleSizeOfPopulation2",\n         "value"  : 600\n       }\n     }\n    }\n}\n\n'})})]})}function d(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);