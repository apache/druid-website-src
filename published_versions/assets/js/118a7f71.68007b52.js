"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5751],{12100:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"development/extensions-contrib/ambari-metrics-emitter","title":"Ambari Metrics Emitter","description":"\x3c!--","source":"@site/docs/33.0.0/development/extensions-contrib/ambari-metrics-emitter.md","sourceDirName":"development/extensions-contrib","slug":"/development/extensions-contrib/ambari-metrics-emitter","permalink":"/docs/33.0.0/development/extensions-contrib/ambari-metrics-emitter","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"ambari-metrics-emitter","title":"Ambari Metrics Emitter"}}');var n=t(74848),s=t(28453);const d={id:"ambari-metrics-emitter",title:"Ambari Metrics Emitter"},c=void 0,o={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Druid to Ambari Metrics Timeline Event Converter",id:"druid-to-ambari-metrics-timeline-event-converter",level:3},{value:"Send-All converter",id:"send-all-converter",level:4},{value:"White-list based converter",id:"white-list-based-converter",level:4}];function a(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["To use this Apache Druid extension, ",(0,n.jsx)(i.a,{href:"/docs/33.0.0/configuration/extensions#loading-extensions",children:"include"})," ",(0,n.jsx)(i.code,{children:"ambari-metrics-emitter"})," in the extensions load list."]}),"\n",(0,n.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(i.p,{children:"This extension emits Druid metrics to an ambari-metrics carbon server. Events are sent after been pickled (i.e., batched). The size of the batch is configurable."}),"\n",(0,n.jsx)(i.h2,{id:"configuration",children:"Configuration"}),"\n",(0,n.jsxs)(i.p,{children:["All the configuration parameters for ambari-metrics emitter are under ",(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics"}),"."]}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"property"}),(0,n.jsx)(i.th,{children:"description"}),(0,n.jsx)(i.th,{children:"required?"}),(0,n.jsx)(i.th,{children:"default"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.hostname"})}),(0,n.jsx)(i.td,{children:"The hostname of the ambari-metrics server."}),(0,n.jsx)(i.td,{children:"yes"}),(0,n.jsx)(i.td,{children:"none"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.port"})}),(0,n.jsx)(i.td,{children:"The port of the ambari-metrics server."}),(0,n.jsx)(i.td,{children:"yes"}),(0,n.jsx)(i.td,{children:"none"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.protocol"})}),(0,n.jsx)(i.td,{children:"The protocol used to send metrics to ambari metrics collector. One of http/https"}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"http"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.trustStorePath"})}),(0,n.jsx)(i.td,{children:"Path to trustStore to be used for https"}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"none"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.trustStoreType"})}),(0,n.jsx)(i.td,{children:"trustStore type to be used for https"}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"none"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.trustStoreType"})}),(0,n.jsx)(i.td,{children:"trustStore password to be used for https"}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"none"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.batchSize"})}),(0,n.jsx)(i.td,{children:"Number of events to send as one batch."}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"100"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.eventConverter"})}),(0,n.jsx)(i.td,{children:"Filter and converter of druid events to ambari-metrics timeline event(please see next section)."}),(0,n.jsx)(i.td,{children:"yes"}),(0,n.jsx)(i.td,{children:"none"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.flushPeriod"})}),(0,n.jsx)(i.td,{children:"Queue flushing period in milliseconds."}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"1 minute"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.maxQueueSize"})}),(0,n.jsx)(i.td,{children:"Maximum size of the queue used to buffer events."}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"MAX_INT"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.alertEmitters"})}),(0,n.jsx)(i.td,{children:"List of emitters where alerts will be forwarded to."}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"empty list (no forwarding)"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.emitWaitTime"})}),(0,n.jsx)(i.td,{children:"wait time in milliseconds to try to send the event otherwise emitter will throwing event."}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"0"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"druid.emitter.ambari-metrics.waitForEventTime"})}),(0,n.jsx)(i.td,{children:"waiting time in milliseconds if necessary for an event to become available."}),(0,n.jsx)(i.td,{children:"no"}),(0,n.jsx)(i.td,{children:"1000 (1 sec)"})]})]})]}),"\n",(0,n.jsx)(i.h3,{id:"druid-to-ambari-metrics-timeline-event-converter",children:"Druid to Ambari Metrics Timeline Event Converter"}),"\n",(0,n.jsxs)(i.p,{children:["Ambari Metrics Timeline Event Converter defines a mapping between druid metrics name plus dimensions to a timeline event metricName.\nambari-metrics metric path is organized using the following schema:\n",(0,n.jsx)(i.code,{children:"<namespacePrefix>.[<druid service name>].[<druid hostname>].<druid metrics dimensions>.<druid metrics name>"}),"\nProperly naming the metrics is critical to avoid conflicts, confusing data and potentially wrong interpretation later on."]}),"\n",(0,n.jsxs)(i.p,{children:["Example ",(0,n.jsx)(i.code,{children:"druid.historical.hist-host1:8080.MyDataSourceName.GroupBy.query/time"}),":"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"druid"})," -> namespace prefix"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"historical"})," -> service name"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"hist-host1:8080"})," -> druid hostname"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"MyDataSourceName"})," -> dimension value"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"GroupBy"})," -> dimension value"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"query/time"})," -> metric name"]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"We have two different implementation of event converter:"}),"\n",(0,n.jsx)(i.h4,{id:"send-all-converter",children:"Send-All converter"}),"\n",(0,n.jsxs)(i.p,{children:["The first implementation called ",(0,n.jsx)(i.code,{children:"all"}),", will send all the druid service metrics events.\nThe path will be in the form ",(0,n.jsx)(i.code,{children:"<namespacePrefix>.[<druid service name>].[<druid hostname>].<dimensions values ordered by dimension's name>.<metric>"}),"\nUser has control of ",(0,n.jsx)(i.code,{children:"<namespacePrefix>.[<druid service name>].[<druid hostname>]."})]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-json",children:'\ndruid.emitter.ambari-metrics.eventConverter={"type":"all", "namespacePrefix": "druid.test", "appName":"druid"}\n\n'})}),"\n",(0,n.jsx)(i.h4,{id:"white-list-based-converter",children:"White-list based converter"}),"\n",(0,n.jsxs)(i.p,{children:["The second implementation called ",(0,n.jsx)(i.code,{children:"whiteList"}),", will send only the white listed metrics and dimensions.\nSame as for the ",(0,n.jsx)(i.code,{children:"all"})," converter user has control of ",(0,n.jsx)(i.code,{children:"<namespacePrefix>.[<druid service name>].[<druid hostname>]."}),"\nWhite-list based converter comes with the following  default white list map located under resources in ",(0,n.jsx)(i.code,{children:"./src/main/resources/defaultWhiteListMap.json"})]}),"\n",(0,n.jsxs)(i.p,{children:["Although user can override the default white list map by supplying a property called ",(0,n.jsx)(i.code,{children:"mapPath"}),".\nThis property is a String containing  the path for the file containing ",(0,n.jsx)(i.strong,{children:"white list map JSON object"}),".\nFor example the following converter will read the map from the file ",(0,n.jsx)(i.code,{children:"/pathPrefix/fileName.json"}),"."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-json",children:'\ndruid.emitter.ambari-metrics.eventConverter={"type":"whiteList", "namespacePrefix": "druid.test", "ignoreHostname":true, "appName":"druid", "mapPath":"/pathPrefix/fileName.json"}\n\n'})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsxs)(i.strong,{children:["Druid emits a huge number of metrics we highly recommend to use the ",(0,n.jsx)(i.code,{children:"whiteList"})," converter"]})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>d,x:()=>c});var r=t(96540);const n={},s=r.createContext(n);function d(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);