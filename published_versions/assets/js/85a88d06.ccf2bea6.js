"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1839],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(96540);const o={},s=i.createContext(o);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(s.Provider,{value:n},e.children)}},39336:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"operations/dynamic-config-provider","title":"Dynamic Config Providers","description":"\x3c!--","source":"@site/docs/33.0.0/operations/dynamic-config-provider.md","sourceDirName":"operations","slug":"/operations/dynamic-config-provider","permalink":"/docs/33.0.0/operations/dynamic-config-provider","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"dynamic-config-provider","title":"Dynamic Config Providers"},"sidebar":"docs","previous":{"title":"Password providers","permalink":"/docs/33.0.0/operations/password-provider"},"next":{"title":"TLS support","permalink":"/docs/33.0.0/operations/tls-support"}}');var o=r(74848),s=r(28453);const t={id:"dynamic-config-provider",title:"Dynamic Config Providers"},a=void 0,d={},c=[{value:"Environment variable dynamic config provider",id:"environment-variable-dynamic-config-provider",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Druid relies on dynamic config providers to supply multiple related sets of credentials, secrets, and configurations within a Druid extension. Dynamic config providers are intended to eventually replace ",(0,o.jsx)(n.a,{href:"/docs/33.0.0/operations/password-provider",children:"PasswordProvider"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["By default, Druid includes an environment variable dynamic config provider that supports Kafka consumer configuration in ",(0,o.jsx)(n.a,{href:"/docs/33.0.0/ingestion/kafka-ingestion",children:"Kafka ingestion"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To develop a custom extension of the ",(0,o.jsx)(n.code,{children:"DynamicConfigProvider"})," interface that is registered at Druid process startup, see ",(0,o.jsx)(n.a,{href:"/docs/33.0.0/development/modules#adding-a-new-dynamicconfigprovider-implementation",children:"Adding a new DynamicConfigProvider implementation"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"environment-variable-dynamic-config-provider",children:"Environment variable dynamic config provider"}),"\n",(0,o.jsxs)(n.p,{children:["You can use the environment variable dynamic config provider (",(0,o.jsx)(n.code,{children:"EnvironmentVariableDynamicConfigProvider"}),") to store passwords or other sensitive information using system environment variables instead of plain text configuration."]}),"\n",(0,o.jsx)(n.p,{children:"The environment variable dynamic config provider uses the following syntax:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'druid.dynamic.config.provider={"type": "environment","variables":{"secret1": "SECRET1_VAR","secret2": "SECRET2_VAR"}}\n'})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Field"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"}),(0,o.jsx)(n.th,{children:"Required"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"type"})}),(0,o.jsx)(n.td,{children:"String"}),(0,o.jsx)(n.td,{children:"dynamic config provider type"}),(0,o.jsxs)(n.td,{children:["Yes: ",(0,o.jsx)(n.code,{children:"environment"})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"variables"})}),(0,o.jsx)(n.td,{children:"Map"}),(0,o.jsx)(n.td,{children:"environment variables that store the configuration information"}),(0,o.jsx)(n.td,{children:"Yes"})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"When using the environment variable config provider, consider the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"If you manually specify a configuration key-value pair and use the dynamic config provider for the same key, Druid uses the value from the dynamic config provider."}),"\n",(0,o.jsx)(n.li,{children:"For use in a supervisor spec, environment variables must be available to the system user that runs the Overlord service and that runs the Peon service."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The following example shows how to configure environment variables to store the SSL key and truststore passwords for Kafka."}),"\n",(0,o.jsx)(n.p,{children:"On the Overlord and Peon machines, set the following environment variables for the system user that runs the Druid services:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"export SSL_KEY_PASSWORD=mysecretkeypassword\nexport SSL_KEYSTORE_PASSWORD=mysecretkeystorepassword\nexport SSL_TRUSTSTORE_PASSWORD=mysecrettruststorepassword\n"})}),"\n",(0,o.jsx)(n.p,{children:"When you define the consumer properties in the supervisor spec, use the dynamic config provider to refer to the environment variables:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'...\n   "consumerProperties": {\n        "bootstrap.servers": "localhost:9092",\n        "ssl.keystore.location": "/opt/kafka/config/kafka01.keystore.jks",\n        "ssl.truststore.location": "/opt/kafka/config/kafka.truststore.jks",\n        "druid.dynamic.config.provider": {\n          "type": "environment",\n          "variables": {\n            "ssl.key.password": "SSL_KEY_PASSWORD",\n            "ssl.keystore.password": "SSL_KEYSTORE_PASSWORD",\n            "ssl.truststore.password": "SSL_TRUSTSTORE_PASSWORD"\n          }\n        }\n      },\n...\n'})}),"\n",(0,o.jsx)(n.p,{children:"When connecting to Kafka, Druid replaces the environment variables with their corresponding values."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);