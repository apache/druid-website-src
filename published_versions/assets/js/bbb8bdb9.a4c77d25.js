"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5568],{16549:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"querying/lookups","title":"Lookups","description":"\x3c!--","source":"@site/docs/33.0.0/querying/lookups.md","sourceDirName":"querying","slug":"/querying/lookups","permalink":"/docs/33.0.0/querying/lookups","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"lookups","title":"Lookups"},"sidebar":"docs","previous":{"title":"Joins","permalink":"/docs/33.0.0/querying/joins"},"next":{"title":"Globally Cached Lookups","permalink":"/docs/33.0.0/querying/lookups-cached-global"}}');var r=s(74848),i=s(28453);const t={id:"lookups",title:"Lookups"},l=void 0,d={},c=[{value:"Query Syntax",id:"query-syntax",level:2},{value:"Query Rewrites",id:"query-rewrites",level:2},{value:"Reverse lookup",id:"reverse-lookup",level:3},{value:"Pull up",id:"pull-up",level:3},{value:"Injective lookups",id:"injective-lookups",level:3},{value:"Dynamic Configuration",id:"dynamic-configuration",level:2},{value:"Configuration propagation behavior",id:"configuration-propagation-behavior",level:2},{value:"API",id:"api",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Saving configuration across restarts",id:"saving-configuration-across-restarts",level:2},{value:"Introspect a Lookup",id:"introspect-a-lookup",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Lookups are a concept in Apache Druid where dimension values are (optionally) replaced with new values, allowing join-like\nfunctionality. Applying lookups in Druid is similar to joining a dimension table in a data warehouse. See\n",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/dimensionspecs",children:"dimension specs"}),' for more information. For the purpose of these documents, a "key"\nrefers to a dimension value to match, and a "value" refers to its replacement. So if you wanted to map\n',(0,r.jsx)(n.code,{children:"appid-12345"})," to ",(0,r.jsx)(n.code,{children:"Super Mega Awesome App"})," then the key would be ",(0,r.jsx)(n.code,{children:"appid-12345"})," and the value would be\n",(0,r.jsx)(n.code,{children:"Super Mega Awesome App"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It is worth noting that lookups support not just use cases where keys map one-to-one to unique values, such as country\ncode and country name, but also support use cases where multiple IDs map to the same value, e.g. multiple app-ids\nmapping to a single account manager. When lookups are one-to-one, Druid is able to apply additional\n",(0,r.jsx)(n.a,{href:"#query-rewrites",children:"query rewrites"}),"; see below for more details."]}),"\n",(0,r.jsx)(n.p,{children:"Lookups do not have history. They always use the current data. This means that if the chief account manager for a\nparticular app-id changes, and you issue a query with a lookup to store the app-id to account manager relationship,\nit will return the current account manager for that app-id REGARDLESS of the time range over which you query."}),"\n",(0,r.jsx)(n.p,{children:"If you require data time range sensitive lookups, such a use case is not currently supported dynamically at query time,\nand such data belongs in the raw denormalized data for use in Druid."}),"\n",(0,r.jsxs)(n.p,{children:['Lookups are generally preloaded in-memory on all servers. But very small lookups (on the order of a few dozen to a few\nhundred entries) can also be passed inline in native queries time using the "map" lookup type. Refer to the\n',(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/dimensionspecs",children:"dimension specs"})," documentation for details."]}),"\n",(0,r.jsx)(n.p,{children:"Other lookup types are available as extensions, including:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Globally cached lookups from local files, remote URIs, or JDBC through ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/lookups-cached-global",children:"lookups-cached-global"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Globally cached lookups from a Kafka topic through ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/kafka-extraction-namespace",children:"kafka-extraction-namespace"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/multi-value-dimensions",children:"Multi-value dimensions"})," (MVDs) are not supported as keys in lookups. For example, to map the MVD ",(0,r.jsx)(n.code,{children:'["A", "B", "C"]'})," to the value ",(0,r.jsx)(n.code,{children:"x"})," in your lookup, flatten the MVD and map each element of the MVD to the value. Your lookup will have separate key-value pairs for each element of the MVD: ",(0,r.jsx)(n.code,{children:'"A": "x"'}),", ",(0,r.jsx)(n.code,{children:'"B": "x"'}),", and ",(0,r.jsx)(n.code,{children:'"C": "x"'}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"query-syntax",children:"Query Syntax"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql",children:"Druid SQL"}),", lookups can be queried using the ",(0,r.jsxs)(n.a,{href:"/docs/33.0.0/querying/sql-scalar#string-functions",children:[(0,r.jsx)(n.code,{children:"LOOKUP"})," function"]}),", for example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n  LOOKUP(store, 'store_to_country') AS country,\n  SUM(revenue)\nFROM sales\nGROUP BY 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function also accepts a third argument called ",(0,r.jsx)(n.code,{children:"replaceMissingValueWith"})," as a constant string. If the lookup\ndoes not contain a value for the provided key, then the ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function returns this ",(0,r.jsx)(n.code,{children:"replaceMissingValueWith"})," value\nrather than ",(0,r.jsx)(n.code,{children:"NULL"}),", just like ",(0,r.jsx)(n.code,{children:"COALESCE"}),". For example, ",(0,r.jsx)(n.code,{children:"LOOKUP(store, 'store_to_country', 'NA')"})," is equivalent to\n",(0,r.jsx)(n.code,{children:"COALESCE(LOOKUP(store, 'store_to_country'), 'NA')"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Lookups can be queried using the ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource#join",children:"JOIN operator"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n  store_to_country.v AS country,\n  SUM(sales.revenue) AS country_revenue\nFROM\n  sales\n  INNER JOIN lookup.store_to_country ON sales.store = store_to_country.k\nGROUP BY 1\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function has automatic ",(0,r.jsx)(n.a,{href:"#query-rewrites",children:"query rewrites"})," available that the ",(0,r.jsx)(n.code,{children:"JOIN"})," approach does not,\nincluding ",(0,r.jsx)(n.a,{href:"#reverse-lookup",children:"reverse lookups"})," and ",(0,r.jsxs)(n.a,{href:"#pull-up",children:["pulling up through ",(0,r.jsx)(n.code,{children:"GROUP BY"})]}),". If these rewrites are\nimportant for you, consider using the ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function instead of ",(0,r.jsx)(n.code,{children:"JOIN"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["In native queries, lookups can be queried with ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/dimensionspecs",children:"dimension specs or extraction functions"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"query-rewrites",children:"Query Rewrites"}),"\n",(0,r.jsxs)(n.p,{children:["Druid can perform two automatic query rewrites when using the ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function: ",(0,r.jsx)(n.a,{href:"#reverse-lookup",children:"reverse lookups"})," and\n",(0,r.jsxs)(n.a,{href:"#pull-up",children:["pulling up through ",(0,r.jsx)(n.code,{children:"GROUP BY"})]}),". These rewrites and their requirements are described in the following\nsections."]}),"\n",(0,r.jsx)(n.h3,{id:"reverse-lookup",children:"Reverse lookup"}),"\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function calls appear in the ",(0,r.jsx)(n.code,{children:"WHERE"})," clause of a query, Druid reverses them ",(0,r.jsx)(n.a,{href:"#table",children:"when possible"}),".\nFor example, if the lookup table ",(0,r.jsx)(n.code,{children:"sku_to_name"})," contains the mapping ",(0,r.jsx)(n.code,{children:"'WB00013' => 'WhizBang Sprocket'"}),", then Druid\nautomatically rewrites this query:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n  LOOKUP(sku, 'sku_to_name') AS name,\n  SUM(revenue)\nFROM sales\nWHERE LOOKUP(sku, 'sku_to_name') = 'WhizBang Sprocket'\nGROUP BY LOOKUP(sku, 'sku_to_name')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Into this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n  LOOKUP(sku, 'sku_to_name') AS name,\n  SUM(revenue)\nFROM sales\nWHERE sku = 'WB00013'\nGROUP BY LOOKUP(sku, 'sku_to_name')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The difference is that in the latter case, data servers do not need to apply the ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function while filtering, and\ncan make more efficient use of indexes for ",(0,r.jsx)(n.code,{children:"sku"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("a",{name:"table",children:"The following table"})," contains examples of when it is possible to reverse calls to ",(0,r.jsx)(n.code,{children:"LOOKUP"})," while in\nDruid's default null handling mode. The list of examples is illustrative, albeit not exhaustive."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"SQL"}),(0,r.jsx)(n.th,{children:"Reversible?"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') = 'WhizBang Sprocket'"})}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') IS NOT DISTINCT FROM 'WhizBang Sprocket'"})}),(0,r.jsx)(n.td,{children:"Yes, for non-null literals"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') <> 'WhizBang Sprocket'"})}),(0,r.jsxs)(n.td,{children:["No, unless ",(0,r.jsx)(n.code,{children:"sku_to_name"})," is ",(0,r.jsx)(n.a,{href:"#injective-lookups",children:"injective"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') IS DISTINCT FROM 'WhizBang Sprocket'"})}),(0,r.jsx)(n.td,{children:"Yes, for non-null literals"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') = 'WhizBang Sprocket' IS NOT TRUE"})}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') IN ('WhizBang Sprocket', 'WhizBang Chain')"})}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') NOT IN ('WhizBang Sprocket', 'WhizBang Chain')"})}),(0,r.jsxs)(n.td,{children:["No, unless ",(0,r.jsx)(n.code,{children:"sku_to_name"})," is ",(0,r.jsx)(n.a,{href:"#injective-lookups",children:"injective"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') IN ('WhizBang Sprocket', 'WhizBang Chain') IS NOT TRUE"})}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') IS NULL"})}),(0,r.jsx)(n.td,{children:"No"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name') IS NOT NULL"})}),(0,r.jsx)(n.td,{children:"No"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOOKUP(UPPER(sku), 'sku_to_name') = 'WhizBang Sprocket'"})}),(0,r.jsxs)(n.td,{children:["Yes, to ",(0,r.jsx)(n.code,{children:"UPPER(sku) = [key for 'WhizBang Sprocket']"})," (the ",(0,r.jsx)(n.code,{children:"UPPER"})," function remains)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COALESCE(LOOKUP(sku, 'sku_to_name'), 'N/A') = 'WhizBang Sprocket'"})}),(0,r.jsxs)(n.td,{children:["Yes, but see next item for ",(0,r.jsx)(n.code,{children:"= 'N/A'"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COALESCE(LOOKUP(sku, 'sku_to_name'), 'N/A') = 'N/A'"})}),(0,r.jsxs)(n.td,{children:["No, unless ",(0,r.jsx)(n.code,{children:"sku_to_name"})," is ",(0,r.jsx)(n.a,{href:"#injective-lookups",children:"injective"}),", which allows Druid to ignore the ",(0,r.jsx)(n.code,{children:"COALESCE"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COALESCE(LOOKUP(sku, 'sku_to_name'), 'N/A') = 'WhizBang Sprocket' IS NOT TRUE"})}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COALESCE(LOOKUP(sku, 'sku_to_name'), 'N/A') <> 'WhizBang Sprocket'"})}),(0,r.jsxs)(n.td,{children:["Yes, but see next item for ",(0,r.jsx)(n.code,{children:"<> 'N/A'"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COALESCE(LOOKUP(sku, 'sku_to_name'), 'N/A') <> 'N/A'"})}),(0,r.jsxs)(n.td,{children:["No, unless ",(0,r.jsx)(n.code,{children:"sku_to_name"})," is ",(0,r.jsx)(n.a,{href:"#injective-lookups",children:"injective"}),", which allows Druid to ignore the ",(0,r.jsx)(n.code,{children:"COALESCE"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"COALESCE(LOOKUP(sku, 'sku_to_name'), sku) = 'WhizBang Sprocket'"})}),(0,r.jsxs)(n.td,{children:["No, ",(0,r.jsx)(n.code,{children:"COALESCE"})," is only reversible when the second argument is a constant"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LOWER(LOOKUP(sku, 'sku_to_name')) = 'whizbang sprocket'"})}),(0,r.jsxs)(n.td,{children:["No, functions other than ",(0,r.jsx)(n.code,{children:"COALESCE"})," are not reversible"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MV_CONTAINS(LOOKUP(sku, 'sku_to_name'), 'WhizBang Sprocket')"})}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"NOT MV_CONTAINS(LOOKUP(sku, 'sku_to_name'), 'WhizBang Sprocket')"})}),(0,r.jsxs)(n.td,{children:["No, unless ",(0,r.jsx)(n.code,{children:"sku_to_name"})," is ",(0,r.jsx)(n.a,{href:"#injective-lookups",children:"injective"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MV_OVERLAP(LOOKUP(sku, 'sku_to_name'), ARRAY['WhizBang Sprocket'])"})}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"NOT MV_OVERLAP(LOOKUP(sku, 'sku_to_name'), ARRAY['WhizBang Sprocket'])"})}),(0,r.jsxs)(n.td,{children:["No, unless ",(0,r.jsx)(n.code,{children:"sku_to_name"})," is ",(0,r.jsx)(n.a,{href:"#injective-lookups",children:"injective"})]})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["You can see the difference in the native query that is generated during SQL planning, which you\ncan retrieve with ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql#explain-plan",children:(0,r.jsx)(n.code,{children:"EXPLAIN PLAN FOR"})}),". When a lookup is reversed in this way, the ",(0,r.jsx)(n.code,{children:"lookup"}),"\nfunction disappears and is replaced by a simpler filter, typically of type ",(0,r.jsx)(n.code,{children:"equals"})," or ",(0,r.jsx)(n.code,{children:"in"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Lookups are not reversed if the number of matching keys exceeds the ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-query-context",children:(0,r.jsx)(n.code,{children:"sqlReverseLookupThreshold"})}),"\nor ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-query-context",children:(0,r.jsx)(n.code,{children:"inSubQueryThreshold"})})," for the query."]}),"\n",(0,r.jsxs)(n.p,{children:["This rewrite adds some planning time that may become noticeable for larger lookups, especially if many keys map to the\nsame value. You can see the impact on planning time in the ",(0,r.jsx)(n.code,{children:"sqlQuery/planningTimeMs"})," metric. You can also measure the\ntime taken by ",(0,r.jsx)(n.code,{children:"EXPLAIN PLAN FOR"}),", which plans the query but does not execute it."]}),"\n",(0,r.jsxs)(n.p,{children:["This rewrite can be disabled by setting ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-query-context",children:(0,r.jsx)(n.code,{children:"sqlReverseLookup: false"})})," in your query context."]}),"\n",(0,r.jsx)(n.h3,{id:"pull-up",children:"Pull up"}),"\n",(0,r.jsxs)(n.p,{children:["Lookups marked as ",(0,r.jsx)(n.a,{href:"#injective-lookups",children:(0,r.jsx)(n.em,{children:"injective"})})," can be pulled up through a ",(0,r.jsx)(n.code,{children:"GROUP BY"}),". For example, if the lookup\n",(0,r.jsx)(n.code,{children:"sku_to_name"})," is injective, Druid automatically rewrites this query:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n  LOOKUP(sku, 'sku_to_name') AS name,\n  SUM(revenue)\nFROM sales\nGROUP BY LOOKUP(sku, 'sku_to_name')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Into this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n  LOOKUP(sku, 'sku_to_name') AS name,\n  SUM(revenue)\nFROM sales\nGROUP BY sku\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The difference is that the ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function is not applied until after the ",(0,r.jsx)(n.code,{children:"GROUP BY"})," is finished, which speeds up\nthe ",(0,r.jsx)(n.code,{children:"GROUP BY"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can see the difference in the native query that is generated during SQL planning, which you\ncan retrieve with ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql#explain-plan",children:(0,r.jsx)(n.code,{children:"EXPLAIN PLAN FOR"})}),". When a lookup is pulled up in this way, the ",(0,r.jsx)(n.code,{children:"lookup"}),"\nfunction call typically moves from the ",(0,r.jsx)(n.code,{children:"virtualColumns"})," or ",(0,r.jsx)(n.code,{children:"dimensions"})," section of a native query into the\n",(0,r.jsx)(n.code,{children:"postAggregations"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This rewrite can be disabled by setting ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-query-context",children:(0,r.jsx)(n.code,{children:"sqlPullUpLookup: false"})})," in your query context."]}),"\n",(0,r.jsx)(n.h3,{id:"injective-lookups",children:"Injective lookups"}),"\n",(0,r.jsx)(n.p,{children:'Injective lookups are eligible for the largest set of query rewrites. Injective lookups must satisfy the following\n"one-to-one lookup" properties:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All values in the lookup table must be unique. That is, no two keys can map to the same value."}),"\n",(0,r.jsxs)(n.li,{children:["The lookup table must have a key-value pair defined for every input that the ",(0,r.jsx)(n.code,{children:"LOOKUP"})," function call may\nencounter. For example, when calling ",(0,r.jsx)(n.code,{children:"LOOKUP(sku, 'sku_to_name')"}),", the ",(0,r.jsx)(n.code,{children:"sku_to_name"})," lookup table must have a key\nfor all possible ",(0,r.jsx)(n.code,{children:"sku"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Injective lookup tables are not required to have keys for ",(0,r.jsx)(n.code,{children:"null"}),", since ",(0,r.jsx)(n.code,{children:"LOOKUP"})," of ",(0,r.jsx)(n.code,{children:"null"})," is always ",(0,r.jsx)(n.code,{children:"null"})," itself."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To determine whether a lookup is injective, Druid relies on an ",(0,r.jsx)(n.code,{children:"injective"})," property that you can set in the\n",(0,r.jsx)(n.a,{href:"/docs/33.0.0/querying/lookups-cached-global",children:"lookup definition"}),". In general, you should set\n",(0,r.jsx)(n.code,{children:"injective: true"})," for any lookup that satisfies the required properties, to allow Druid to run your queries as fast as\npossible."]}),"\n",(0,r.jsxs)(n.p,{children:["Druid does not verify whether lookups satisfy these required properties. Druid may return incorrect query results\nif you set ",(0,r.jsx)(n.code,{children:"injective: true"})," for a lookup table that is not actually a one-to-one lookup."]}),"\n",(0,r.jsx)(n.h2,{id:"dynamic-configuration",children:"Dynamic Configuration"}),"\n",(0,r.jsxs)(n.p,{children:['The following documents the behavior of the cluster-wide config which is accessible through the Coordinator.\nThe configuration is propagated through the concept of "tier" of servers.\nA "tier" is defined as a group of services which should receive a set of lookups.\nFor example, you might have all Historicals be part of ',(0,r.jsx)(n.code,{children:"__default"}),", and Peons be part of individual tiers for the datasources they are tasked with.\nThe tiers for lookups are completely independent of Historical tiers."]}),"\n",(0,r.jsx)(n.p,{children:"These configs are accessed using JSON through the following URI template"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"http://<COORDINATOR_IP>:<PORT>/druid/coordinator/v1/lookups/config/{tier}/{id}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["All URIs below are assumed to have ",(0,r.jsx)(n.code,{children:"http://<COORDINATOR_IP>:<PORT>"})," prepended."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have NEVER configured lookups before, you MUST post an empty json object ",(0,r.jsx)(n.code,{children:"{}"})," to ",(0,r.jsx)(n.code,{children:"/druid/coordinator/v1/lookups/config"})," to initialize the configuration."]}),"\n",(0,r.jsx)(n.p,{children:"These endpoints will return one of the following results:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"404 if the resource is not found"}),"\n",(0,r.jsx)(n.li,{children:"400 if there is a problem in the formatting of the request"}),"\n",(0,r.jsxs)(n.li,{children:["202 if the request was accepted asynchronously (",(0,r.jsx)(n.code,{children:"POST"})," and ",(0,r.jsx)(n.code,{children:"DELETE"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["200 if the request succeeded (",(0,r.jsx)(n.code,{children:"GET"})," only)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-propagation-behavior",children:"Configuration propagation behavior"}),"\n",(0,r.jsx)(n.p,{children:"The configuration is propagated to the query serving processes (Broker / Router / Peon / Historical) by the Coordinator.\nThe query serving processes have an internal API for managing lookups on the process and those are used by the Coordinator.\nThe Coordinator periodically checks if any of the processes need to load/drop lookups and updates them appropriately."}),"\n",(0,r.jsx)(n.p,{children:"Please note that only 2 simultaneous lookup configuration propagation requests can be concurrently handled by a single query serving process. This limit is applied to prevent lookup handling from consuming too many server HTTP connections."}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/api-reference/lookups-api",children:"Lookups API"})," for reference on configuring lookups and lookup status."]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/docs/33.0.0/configuration/#lookups-dynamic-configuration",children:"Lookups Dynamic Configuration"})," for Coordinator configuration."]}),"\n",(0,r.jsx)(n.p,{children:"To configure a Broker / Router / Historical / Peon to announce itself as part of a lookup tier, use following properties."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Default"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.lookup.lookupTier"})}),(0,r.jsxs)(n.td,{children:["The tier for ",(0,r.jsx)(n.strong,{children:"lookups"})," for this process. This is independent of other tiers."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"__default"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.lookup.lookupTierIsDatasource"})}),(0,r.jsxs)(n.td,{children:["For some things like indexing service tasks, the datasource is passed in the runtime properties of a task. This option fetches the tierName from the same value as the datasource for the task. It is suggested to only use this as Peon options for the indexing service, if at all. If true, ",(0,r.jsx)(n.code,{children:"druid.lookup.lookupTier"})," MUST NOT be specified"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"false"'})})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"To configure the behavior of the dynamic configuration manager, use the following properties on the Coordinator:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Default"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.manager.lookups.hostTimeout"})}),(0,r.jsx)(n.td,{children:"Timeout (in ms) PER HOST for processing request"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"2000"}),"(2 seconds)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.manager.lookups.allHostTimeout"})}),(0,r.jsx)(n.td,{children:"Timeout (in ms) to finish lookup management on all the processes."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"900000"}),"(15 mins)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.manager.lookups.period"})}),(0,r.jsx)(n.td,{children:"How long to pause between management cycles"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"120000"}),"(2 mins)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.manager.lookups.threadPoolSize"})}),(0,r.jsx)(n.td,{children:"Number of service processes that can be managed concurrently"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"10"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"saving-configuration-across-restarts",children:"Saving configuration across restarts"}),"\n",(0,r.jsx)(n.p,{children:"It is possible to save the configuration across restarts such that a process will not have to wait for Coordinator action to re-populate its lookups. To do this the following property is set:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Default"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.lookup.snapshotWorkingDir"})}),(0,r.jsx)(n.td,{children:"Working path used to store snapshot of current lookup configuration, leaving this property null will disable snapshot/bootstrap utility"}),(0,r.jsx)(n.td,{children:"null"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.lookup.enableLookupSyncOnStartup"})}),(0,r.jsx)(n.td,{children:"Enable the lookup synchronization process with Coordinator on startup. The queryable processes will fetch and load the lookups from the Coordinator instead of waiting for the Coordinator to load the lookups for them. Users may opt to disable this option if there are no lookups configured in the cluster."}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.lookup.numLookupLoadingThreads"})}),(0,r.jsx)(n.td,{children:"Number of threads for loading the lookups in parallel on startup. This thread pool is destroyed once startup is done. It is not kept during the lifetime of the JVM"}),(0,r.jsx)(n.td,{children:"Available Processors / 2"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.lookup.coordinatorFetchRetries"})}),(0,r.jsx)(n.td,{children:"How many times to retry to fetch the lookup bean list from Coordinator, during the sync on startup."}),(0,r.jsx)(n.td,{children:"3"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.lookup.lookupStartRetries"})}),(0,r.jsx)(n.td,{children:"How many times to retry to start each lookup, either during the sync on startup, or during the runtime."}),(0,r.jsx)(n.td,{children:"3"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"druid.lookup.coordinatorRetryDelay"})}),(0,r.jsx)(n.td,{children:"How long to delay (in millis) between retries to fetch lookup list from the Coordinator during the sync on startup."}),(0,r.jsx)(n.td,{children:"60_000"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"introspect-a-lookup",children:"Introspect a Lookup"}),"\n",(0,r.jsxs)(n.p,{children:["The Broker provides an API for lookup introspection if the lookup type implements a ",(0,r.jsx)(n.code,{children:"LookupIntrospectHandler"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"GET"})," request to ",(0,r.jsx)(n.code,{children:"/druid/v1/lookups/introspect/{lookupId}"})," will return the map of complete values."]}),"\n",(0,r.jsxs)(n.p,{children:["ex: ",(0,r.jsx)(n.code,{children:"GET /druid/v1/lookups/introspect/nato-phonetic"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n    "A": "Alfa",\n    "B": "Bravo",\n    "C": "Charlie",\n    ...\n    "Y": "Yankee",\n    "Z": "Zulu",\n    "-": "Dash"\n}\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The list of keys can be retrieved via ",(0,r.jsx)(n.code,{children:"GET"})," to ",(0,r.jsx)(n.code,{children:'/druid/v1/lookups/introspect/{lookupId}/keys"'})]}),"\n",(0,r.jsxs)(n.p,{children:["ex: ",(0,r.jsx)(n.code,{children:"GET /druid/v1/lookups/introspect/nato-phonetic/keys"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[\n    "A",\n    "B",\n    "C",\n    ...\n    "Y",\n    "Z",\n    "-"\n]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"GET"})," request to ",(0,r.jsx)(n.code,{children:'/druid/v1/lookups/introspect/{lookupId}/values"'})," will return the list of values."]}),"\n",(0,r.jsxs)(n.p,{children:["ex: ",(0,r.jsx)(n.code,{children:"GET /druid/v1/lookups/introspect/nato-phonetic/values"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[\n    "Alfa",\n    "Bravo",\n    "Charlie",\n    ...\n    "Yankee",\n    "Zulu",\n    "Dash"\n]\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var o=s(96540);const r={},i=o.createContext(r);function t(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);