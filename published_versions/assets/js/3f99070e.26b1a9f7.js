"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5484],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>o});var i=s(96540);const t={},r=i.createContext(t);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}},81422:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"ingestion/index","title":"Ingestion overview","description":"\x3c!--","source":"@site/docs/33.0.0/ingestion/index.md","sourceDirName":"ingestion","slug":"/ingestion/","permalink":"/docs/33.0.0/ingestion/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"index","title":"Ingestion overview","sidebar_label":"Overview"},"sidebar":"docs","previous":{"title":"ZooKeeper","permalink":"/docs/33.0.0/design/zookeeper"},"next":{"title":"Source input formats","permalink":"/docs/33.0.0/ingestion/data-formats"}}');var t=s(74848),r=s(28453);const d={id:"index",title:"Ingestion overview",sidebar_label:"Overview"},o=void 0,c={},a=[{value:"Ingestion methods",id:"ingestion-methods",level:2},{value:"Streaming",id:"streaming",level:3},{value:"Batch",id:"batch",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Loading data in Druid is called ",(0,t.jsx)(n.em,{children:"ingestion"})," or ",(0,t.jsx)(n.em,{children:"indexing"}),". When you ingest data into Druid, Druid reads the data from\nyour source system and stores it in data files called ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/design/segments",children:(0,t.jsx)(n.em,{children:"segments"})}),".\nIn general, segment files contain a few million rows each."]}),"\n",(0,t.jsxs)(n.p,{children:["For most ingestion methods, the Druid ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/design/middlemanager",children:"Middle Manager"})," processes or the\n",(0,t.jsx)(n.a,{href:"/docs/33.0.0/design/indexer",children:"Indexer"})," processes load your source data. The sole exception is Hadoop-based ingestion, which\nuses a Hadoop MapReduce job on YARN."]}),"\n",(0,t.jsxs)(n.p,{children:["During ingestion, Druid creates segments and stores them in ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/design/deep-storage",children:"deep storage"}),". Historical nodes load the segments into memory to respond to queries. For streaming ingestion, the Middle Managers and indexers can respond to queries in real-time with arriving data. For more information, see ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/design/storage",children:"Storage overview"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This topic introduces streaming and batch ingestion methods. The following topics describe ingestion concepts and information that apply to all ",(0,t.jsx)(n.a,{href:"#ingestion-methods",children:"ingestion methods"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/schema-model",children:"Druid schema model"})," introduces concepts of datasources, primary timestamp, dimensions, and metrics."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/rollup",children:"Data rollup"})," describes rollup as a concept and provides suggestions to maximize the benefits of rollup."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/partitioning",children:"Partitioning"})," describes time chunk and secondary partitioning in Druid."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/ingestion-spec",children:"Ingestion spec reference"})," provides a reference for the configuration options in the ingestion spec."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For additional information about concepts and configurations that are unique to each ingestion method, see the topic for the ingestion method."}),"\n",(0,t.jsx)(n.h2,{id:"ingestion-methods",children:"Ingestion methods"}),"\n",(0,t.jsx)(n.p,{children:"The tables below list Druid's most common data ingestion methods, along with comparisons to help you choose\nthe best one for your situation. Each ingestion method supports its own set of source systems to pull from. For details\nabout how each method works, as well as configuration properties specific to that method, check out its documentation\npage."}),"\n",(0,t.jsx)(n.h3,{id:"streaming",children:"Streaming"}),"\n",(0,t.jsx)(n.p,{children:"There are two available options for streaming ingestion. Streaming ingestion is controlled by a continuously-running\nsupervisor."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Method"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/kafka-ingestion",children:"Kafka"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/kinesis-ingestion",children:"Kinesis"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Supervisor type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"kafka"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"kinesis"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"How it works"})}),(0,t.jsx)(n.td,{children:"Druid reads directly from Apache Kafka."}),(0,t.jsx)(n.td,{children:"Druid reads directly from Amazon Kinesis."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Can ingest late data?"})}),(0,t.jsx)(n.td,{children:"Yes."}),(0,t.jsx)(n.td,{children:"Yes."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Exactly-once guarantees?"})}),(0,t.jsx)(n.td,{children:"Yes."}),(0,t.jsx)(n.td,{children:"Yes."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"batch",children:"Batch"}),"\n",(0,t.jsx)(n.p,{children:"There are three available options for batch ingestion. Batch ingestion jobs are associated with a controller task that\nruns for the duration of the job."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Method"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/native-batch",children:"Native batch"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/",children:"SQL"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/hadoop",children:"Hadoop-based"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Controller task type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"index_parallel"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"query_controller"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"index_hadoop"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"How you submit it"})}),(0,t.jsxs)(n.td,{children:["Send an ",(0,t.jsx)(n.code,{children:"index_parallel"})," spec to the ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/api-reference/tasks-api",children:"Tasks API"}),"."]}),(0,t.jsxs)(n.td,{children:["Send an ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts#insert",children:"INSERT"})," or ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts#replace",children:"REPLACE"})," statement to the ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/api-reference/sql-ingestion-api#submit-a-query",children:"SQL task API"}),"."]}),(0,t.jsxs)(n.td,{children:["Send an ",(0,t.jsx)(n.code,{children:"index_hadoop"})," spec to the ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/api-reference/tasks-api",children:"Tasks API"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Parallelism"})}),(0,t.jsxs)(n.td,{children:["Using subtasks, if ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/native-batch#tuningconfig",children:(0,t.jsx)(n.code,{children:"maxNumConcurrentSubTasks"})})," is greater than 1."]}),(0,t.jsxs)(n.td,{children:["Using ",(0,t.jsx)(n.code,{children:"query_worker"})," subtasks."]}),(0,t.jsx)(n.td,{children:"Using YARN."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Fault tolerance"})}),(0,t.jsx)(n.td,{children:"Workers automatically relaunched upon failure. Controller task failure leads to job failure."}),(0,t.jsx)(n.td,{children:"Controller or worker task failure leads to job failure."}),(0,t.jsx)(n.td,{children:"YARN containers automatically relaunched upon failure. Controller task failure leads to job failure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Can append?"})}),(0,t.jsx)(n.td,{children:"Yes."}),(0,t.jsx)(n.td,{children:"Yes (INSERT)."}),(0,t.jsx)(n.td,{children:"No."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Can overwrite?"})}),(0,t.jsx)(n.td,{children:"Yes."}),(0,t.jsx)(n.td,{children:"Yes (REPLACE)."}),(0,t.jsx)(n.td,{children:"Yes."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"External dependencies"})}),(0,t.jsx)(n.td,{children:"None."}),(0,t.jsx)(n.td,{children:"None."}),(0,t.jsx)(n.td,{children:"Hadoop cluster."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Input sources"})}),(0,t.jsxs)(n.td,{children:["Any ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/input-sources",children:(0,t.jsx)(n.code,{children:"inputSource"})}),"."]}),(0,t.jsxs)(n.td,{children:["Any ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/input-sources",children:(0,t.jsx)(n.code,{children:"inputSource"})})," (using ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts#extern",children:"EXTERN"}),") or Druid datasource (using FROM)."]}),(0,t.jsx)(n.td,{children:"Any Hadoop FileSystem or Druid datasource."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Input formats"})}),(0,t.jsxs)(n.td,{children:["Any ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/data-formats#input-format",children:(0,t.jsx)(n.code,{children:"inputFormat"})}),"."]}),(0,t.jsxs)(n.td,{children:["Any ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/data-formats#input-format",children:(0,t.jsx)(n.code,{children:"inputFormat"})}),"."]}),(0,t.jsx)(n.td,{children:"Any Hadoop InputFormat."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Secondary partitioning options"})}),(0,t.jsxs)(n.td,{children:["Dynamic, hash-based, and range-based partitioning methods are available. See ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/native-batch#partitionsspec",children:"partitionsSpec"})," for details."]}),(0,t.jsxs)(n.td,{children:["Range partitioning (",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts#clustering",children:"CLUSTERED BY"}),")."]}),(0,t.jsxs)(n.td,{children:["Hash-based or range-based partitioning via ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/hadoop#partitionsspec",children:(0,t.jsx)(n.code,{children:"partitionsSpec"})}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/rollup#perfect-rollup-vs-best-effort-rollup",children:"Rollup modes"})})}),(0,t.jsxs)(n.td,{children:["Perfect if ",(0,t.jsx)(n.code,{children:"forceGuaranteedRollup"})," = true in the ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/native-batch#tuningconfig",children:(0,t.jsx)(n.code,{children:"tuningConfig"})}),"."]}),(0,t.jsx)(n.td,{children:"Always perfect."}),(0,t.jsx)(n.td,{children:"Always perfect."})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);