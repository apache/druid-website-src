"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9994],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var r=t(96540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},64946:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"api-reference/sql-ingestion-api","title":"SQL-based ingestion API","description":"\x3c!--","source":"@site/docs/33.0.0/api-reference/sql-ingestion-api.md","sourceDirName":"api-reference","slug":"/api-reference/sql-ingestion-api","permalink":"/docs/33.0.0/api-reference/sql-ingestion-api","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"sql-ingestion-api","title":"SQL-based ingestion API","sidebar_label":"SQL-based ingestion"},"sidebar":"docs","previous":{"title":"Druid SQL","permalink":"/docs/33.0.0/api-reference/sql-api"},"next":{"title":"JSON querying","permalink":"/docs/33.0.0/api-reference/json-querying-api"}}');var s=t(74848),a=t(28453),i=t(65537),d=t(79329);const l={id:"sql-ingestion-api",title:"SQL-based ingestion API",sidebar_label:"SQL-based ingestion"},o=void 0,c={},u=[{value:"Submit a query",id:"submit-a-query",level:2},{value:"URL",id:"url",level:3},{value:"Responses",id:"responses",level:3},{value:"Sample request",id:"sample-request",level:3},{value:"Sample response",id:"sample-response",level:3},{value:"Get the status for a query task",id:"get-the-status-for-a-query-task",level:2},{value:"URL",id:"url-1",level:3},{value:"Responses",id:"responses-1",level:3},{value:"Sample request",id:"sample-request-1",level:3},{value:"Sample response",id:"sample-response-1",level:3},{value:"Get the report for a query task",id:"get-the-report-for-a-query-task",level:2},{value:"URL",id:"url-2",level:3},{value:"Responses",id:"responses-2",level:3},{value:"Sample request",id:"sample-request-2",level:3},{value:"Sample response",id:"sample-response-2",level:3},{value:"Cancel a query task",id:"cancel-a-query-task",level:2},{value:"URL",id:"url-3",level:3},{value:"Responses",id:"responses-3",level:3},{value:"Sample request",id:"sample-request-3",level:3},{value:"Sample response",id:"sample-response-3",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["This page describes SQL-based batch ingestion using the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/",children:(0,s.jsx)(n.code,{children:"druid-multi-stage-query"})}),"\nextension, new in Druid 24.0. Refer to the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/ingestion/#batch",children:"ingestion methods"})," table to determine which\ningestion method is right for you."]})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Query"})," view in the web console provides a friendly experience for the multi-stage query task engine (MSQ task engine) and multi-stage query architecture. We recommend using the web console if you don't need a programmatic interface."]}),"\n",(0,s.jsx)(n.p,{children:"When using the API for the MSQ task engine, the action you want to take determines the endpoint you use:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/druid/v2/sql/task"}),": Submit a query for ingestion."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/druid/indexer/v1/task"}),": Interact with a query, including getting its status or details, or canceling the query. This page describes a few of the Overlord Task APIs that you can use with the MSQ task engine. For information about Druid APIs, see the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/ingestion/tasks",children:"API reference for Druid"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In this topic, ",(0,s.jsx)(n.code,{children:"http://ROUTER_IP:ROUTER_PORT"})," is a placeholder for your Router service address and port. Replace it with the information for your deployment. For example, use ",(0,s.jsx)(n.code,{children:"http://localhost:8888"})," for quickstart deployments."]}),"\n",(0,s.jsx)(n.h2,{id:"submit-a-query",children:"Submit a query"}),"\n",(0,s.jsx)(n.p,{children:"Submits queries to the MSQ task engine."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"/druid/v2/sql/task"})," endpoint accepts the following:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/api-reference/sql-api#request-body",children:"SQL requests in the JSON-over-HTTP form"})," using the\n",(0,s.jsx)(n.code,{children:"query"}),", ",(0,s.jsx)(n.code,{children:"context"}),", and ",(0,s.jsx)(n.code,{children:"parameters"})," fields. The endpoint ignores the ",(0,s.jsx)(n.code,{children:"resultFormat"}),", ",(0,s.jsx)(n.code,{children:"header"}),", ",(0,s.jsx)(n.code,{children:"typesHeader"}),", and ",(0,s.jsx)(n.code,{children:"sqlTypesHeader"})," fields."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#insert",children:"INSERT"})," and ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#replace",children:"REPLACE"})," statements."]}),"\n",(0,s.jsxs)(n.li,{children:["SELECT queries (experimental feature). SELECT query results are collected from workers by the controller, and written into the ",(0,s.jsx)(n.a,{href:"#get-the-report-for-a-query-task",children:"task report"})," as an array of arrays. The behavior and result format of plain SELECT queries (without INSERT or REPLACE) is subject to change."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"url",children:"URL"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"POST"})," ",(0,s.jsx)(n.code,{children:"/druid/v2/sql/task"})]}),"\n",(0,s.jsx)(n.h3,{id:"responses",children:"Responses"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(d.A,{value:"1",label:"200 SUCCESS",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Successfully submitted query"})})}),(0,s.jsxs)(d.A,{value:"2",label:"400 BAD REQUEST",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Error thrown due to bad query. Returns a JSON object detailing the error with the following format:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error.",\n    "errorClass": "Class of exception that caused this error.",\n    "host": "The host on which the error occurred."\n}\n'})})]}),(0,s.jsxs)(d.A,{value:"3",label:"500 INTERNAL SERVER ERROR",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Request not sent due to unexpected conditions. Returns a JSON object detailing the error with the following format:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error.",\n    "errorClass": "Class of exception that caused this error.",\n    "host": "The host on which the error occurred."\n}\n'})})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"sample-request",children:"Sample request"}),"\n",(0,s.jsxs)(n.p,{children:["The following example shows a query that fetches data from an external JSON source and inserts it into a table named ",(0,s.jsx)(n.code,{children:"wikipedia"}),"."]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(d.A,{value:"4",label:"HTTP",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTTP",children:'POST /druid/v2/sql/task HTTP/1.1\nHost: http://ROUTER_IP:ROUTER_PORT\nContent-Type: application/json\n\n{\n  "query": "INSERT INTO wikipedia\\nSELECT\\n  TIME_PARSE(\\"timestamp\\") AS __time,\\n  *\\nFROM TABLE(\\n  EXTERN(\\n    \'{\\"type\\": \\"http\\", \\"uris\\": [\\"https://druid.apache.org/data/wikipedia.json.gz\\"]}\',\\n    \'{\\"type\\": \\"json\\"}\',\\n    \'[{\\"name\\": \\"added\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"channel\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"cityName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"comment\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"commentLength\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"countryIsoCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"countryName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"deleted\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"delta\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"deltaBucket\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"diffUrl\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"flags\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isAnonymous\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isMinor\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isNew\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isRobot\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isUnpatrolled\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"metroCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"namespace\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"page\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"regionIsoCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"regionName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"timestamp\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"user\\", \\"type\\": \\"string\\"}]\'\\n  )\\n)\\nPARTITIONED BY DAY",\n  "context": {\n    "maxNumTasks": 3\n  }\n}\n'})})}),(0,s.jsx)(d.A,{value:"5",label:"cURL",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl --location --request POST \'http://ROUTER_IP:ROUTER_PORT/druid/v2/sql/task\' \\\n  --header \'Content-Type: application/json\' \\\n  --data-raw \'{\n    "query": "INSERT INTO wikipedia\\nSELECT\\n  TIME_PARSE(\\"timestamp\\") AS __time,\\n  *\\nFROM TABLE(\\n  EXTERN(\\n    \'\\\'\'{\\"type\\": \\"http\\", \\"uris\\": [\\"https://druid.apache.org/data/wikipedia.json.gz\\"]}\'\\\'\',\\n    \'\\\'\'{\\"type\\": \\"json\\"}\'\\\'\',\\n    \'\\\'\'[{\\"name\\": \\"added\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"channel\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"cityName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"comment\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"commentLength\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"countryIsoCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"countryName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"deleted\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"delta\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"deltaBucket\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"diffUrl\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"flags\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isAnonymous\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isMinor\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isNew\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isRobot\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isUnpatrolled\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"metroCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"namespace\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"page\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"regionIsoCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"regionName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"timestamp\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"user\\", \\"type\\": \\"string\\"}]\'\\\'\'\\n  )\\n)\\nPARTITIONED BY DAY",\n    "context": {\n        "maxNumTasks": 3\n    }\n  }\'\n'})})}),(0,s.jsx)(d.A,{value:"6",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import json\nimport requests\n\nurl = "http://ROUTER_IP:ROUTER_PORT/druid/v2/sql/task"\n\npayload = json.dumps({\n  "query": "INSERT INTO wikipedia\\nSELECT\\n  TIME_PARSE(\\"timestamp\\") AS __time,\\n  *\\nFROM TABLE(\\n  EXTERN(\\n    \'{\\"type\\": \\"http\\", \\"uris\\": [\\"https://druid.apache.org/data/wikipedia.json.gz\\"]}\',\\n    \'{\\"type\\": \\"json\\"}\',\\n    \'[{\\"name\\": \\"added\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"channel\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"cityName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"comment\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"commentLength\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"countryIsoCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"countryName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"deleted\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"delta\\", \\"type\\": \\"long\\"}, {\\"name\\": \\"deltaBucket\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"diffUrl\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"flags\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isAnonymous\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isMinor\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isNew\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isRobot\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"isUnpatrolled\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"metroCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"namespace\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"page\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"regionIsoCode\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"regionName\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"timestamp\\", \\"type\\": \\"string\\"}, {\\"name\\": \\"user\\", \\"type\\": \\"string\\"}]\'\\n  )\\n)\\nPARTITIONED BY DAY",\n  "context": {\n    "maxNumTasks": 3\n  }\n})\nheaders = {\n  \'Content-Type\': \'application/json\'\n}\n\nresponse = requests.post(url, headers=headers, data=payload)\n\nprint(response.text)\n\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"sample-response",children:"Sample response"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"View the response"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "taskId": "query-f795a235-4dc7-4fef-abac-3ae3f9686b79",\n  "state": "RUNNING",\n}\n'})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response fields"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"taskId"})}),(0,s.jsxs)(n.td,{children:["Controller task ID. You can use Druid's standard ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/api-reference/tasks-api",children:"Tasks API"})," to interact with this controller task."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"state"})}),(0,s.jsx)(n.td,{children:"Initial state for the query."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"get-the-status-for-a-query-task",children:"Get the status for a query task"}),"\n",(0,s.jsx)(n.p,{children:"Retrieves the status of a query task. It returns a JSON object with the task's status code, runner status, task type, datasource, and other relevant metadata."}),"\n",(0,s.jsx)(n.h3,{id:"url-1",children:"URL"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"GET"})," ",(0,s.jsx)(n.code,{children:"/druid/indexer/v1/task/{taskId}/status"})]}),"\n",(0,s.jsx)(n.h3,{id:"responses-1",children:"Responses"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(d.A,{value:"7",label:"200 SUCCESS",children:[(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Successfully retrieved task status"})})]}),(0,s.jsxs)(d.A,{value:"8",label:"404 NOT FOUND",children:[(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Cannot find task with ID"})})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"sample-request-1",children:"Sample request"}),"\n",(0,s.jsxs)(n.p,{children:["The following example shows how to retrieve the status of a task with the ID ",(0,s.jsx)(n.code,{children:"query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e"}),"."]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(d.A,{value:"9",label:"HTTP",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTTP",children:"GET /druid/indexer/v1/task/query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e/status HTTP/1.1\nHost: http://ROUTER_IP:ROUTER_PORT\n"})})}),(0,s.jsx)(d.A,{value:"10",label:"cURL",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl --location --request GET 'http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/task/query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e/status'\n"})})}),(0,s.jsx)(d.A,{value:"11",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import requests\n\nurl = "http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/task/query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e/status"\n\npayload={}\nheaders = {}\n\nresponse = requests.post(url, headers=headers, data=payload)\n\nprint(response.text)\nprint(response.text)\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"sample-response-1",children:"Sample response"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"View the response"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "task": "query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e",\n  "status": {\n    "id": "query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e",\n    "groupId": "query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e",\n    "type": "query_controller",\n    "createdTime": "2022-09-14T22:12:00.183Z",\n    "queueInsertionTime": "1970-01-01T00:00:00.000Z",\n    "statusCode": "RUNNING",\n    "status": "RUNNING",\n    "runnerStatusCode": "RUNNING",\n    "duration": -1,\n    "location": {\n      "host": "localhost",\n      "port": 8100,\n      "tlsPort": -1\n    },\n    "dataSource": "kttm_simple",\n    "errorMsg": null\n  }\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"get-the-report-for-a-query-task",children:"Get the report for a query task"}),"\n",(0,s.jsx)(n.p,{children:"Retrieves the task report for a query.\nThe report provides detailed information about the query task, including things like the stages, warnings, and errors."}),"\n",(0,s.jsx)(n.p,{children:"Keep the following in mind when using the task API to view reports:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The task report for an entire job is associated with the ",(0,s.jsx)(n.code,{children:"query_controller"})," task. The ",(0,s.jsx)(n.code,{children:"query_worker"})," tasks don't have their own reports; their information is incorporated into the controller report."]}),"\n",(0,s.jsxs)(n.li,{children:["The task report API may report ",(0,s.jsx)(n.code,{children:"404 Not Found"})," temporarily while the task is in the process of starting up."]}),"\n",(0,s.jsxs)(n.li,{children:["As an experimental feature, the MSQ task engine supports running SELECT queries. SELECT query results are written into\nthe ",(0,s.jsx)(n.code,{children:"multiStageQuery.payload.results.results"})," task report key as an array of arrays. The behavior and result format of plain\nSELECT queries (without INSERT or REPLACE) is subject to change."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"multiStageQuery.payload.results.resultsTruncated"})," denotes whether the results of the report have been truncated to prevent the reports from blowing up."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For an explanation of the fields in a report, see ",(0,s.jsx)(n.a,{href:"#report-response-fields",children:"Report response fields"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"url-2",children:"URL"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"GET"})," ",(0,s.jsx)(n.code,{children:"/druid/indexer/v1/task/{taskId}/reports"})]}),"\n",(0,s.jsx)(n.h3,{id:"responses-2",children:"Responses"}),"\n",(0,s.jsx)(i.A,{children:(0,s.jsxs)(d.A,{value:"12",label:"200 SUCCESS",children:[(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Successfully retrieved task report"})})]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"sample-request-2",children:"Sample request"}),"\n",(0,s.jsxs)(n.p,{children:["The following example shows how to retrieve the report for a query with the task ID ",(0,s.jsx)(n.code,{children:"query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e"}),"."]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(d.A,{value:"13",label:"HTTP",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTTP",children:"GET /druid/indexer/v1/task/query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e/reports HTTP/1.1\nHost: http://ROUTER_IP:ROUTER_PORT\n"})})}),(0,s.jsx)(d.A,{value:"14",label:"cURL",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl --location --request GET 'http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/task/query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e/reports'\n"})})}),(0,s.jsx)(d.A,{value:"15",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import requests\n\nurl = "http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/task/query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e/reports"\n\nheaders = {}\n\nresponse = requests.post(url, headers=headers, data=payload)\n\nprint(response.text)\nprint(response.text)\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"sample-response-2",children:"Sample response"}),"\n",(0,s.jsx)(n.p,{children:"The response shows an example report for a query."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"View the response"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "multiStageQuery": {\n    "type": "multiStageQuery",\n    "taskId": "query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e",\n    "payload": {\n      "status": {\n        "status": "SUCCESS",\n        "startTime": "2022-09-14T22:12:09.266Z",\n        "durationMs": 28227,\n        "workers": {\n          "0": [\n            {\n              "workerId": "query-3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e-worker0_0",\n              "state": "SUCCESS",\n              "durationMs": 15511,\n              "pendingMs": 137\n            }\n          ]\n        },\n        "pendingTasks": 0,\n        "runningTasks": 2,\n        "segmentLoadWaiterStatus": {\n          "state": "SUCCESS",\n          "dataSource": "kttm_simple",\n          "startTime": "2022-09-14T23:12:09.266Z",\n          "duration": 15,\n          "totalSegments": 1,\n          "usedSegments": 1,\n          "precachedSegments": 0,\n          "onDemandSegments": 0,\n          "pendingSegments": 0,\n          "unknownSegments": 0\n        },\n        "segmentReport": {\n          "shardSpec": "NumberedShardSpec",\n          "details": "Cannot use RangeShardSpec, RangedShardSpec only supports string CLUSTER BY keys. Using NumberedShardSpec instead."\n        }\n      },\n      "stages": [\n        {\n          "stageNumber": 0,\n          "definition": {\n            "id": "71ecb11e-09d7-42f8-9225-1662c8e7e121_0",\n            "input": [\n              {\n                "type": "external",\n                "inputSource": {\n                  "type": "http",\n                  "uris": [\n                    "https://static.imply.io/example-data/kttm-v2/kttm-v2-2019-08-25.json.gz"\n                  ],\n                  "httpAuthenticationUsername": null,\n                  "httpAuthenticationPassword": null\n                },\n                "inputFormat": {\n                  "type": "json",\n                  "flattenSpec": null,\n                  "featureSpec": {},\n                  "keepNullColumns": false\n                },\n                "signature": [\n                  {\n                    "name": "timestamp",\n                    "type": "STRING"\n                  },\n                  {\n                    "name": "agent_category",\n                    "type": "STRING"\n                  },\n                  {\n                    "name": "agent_type",\n                    "type": "STRING"\n                  }\n                ]\n              }\n            ],\n            "processor": {\n              "type": "scan",\n              "query": {\n                "queryType": "scan",\n                "dataSource": {\n                  "type": "inputNumber",\n                  "inputNumber": 0\n                },\n                "intervals": {\n                  "type": "intervals",\n                  "intervals": [\n                    "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"\n                  ]\n                },\n                "resultFormat": "compactedList",\n                "columns": [\n                  "agent_category",\n                  "agent_type",\n                  "timestamp"\n                ],\n                "context": {\n                  "finalize": false,\n                  "finalizeAggregations": false,\n                  "groupByEnableMultiValueUnnesting": false,\n                  "scanSignature": "[{\\"name\\":\\"agent_category\\",\\"type\\":\\"STRING\\"},{\\"name\\":\\"agent_type\\",\\"type\\":\\"STRING\\"},{\\"name\\":\\"timestamp\\",\\"type\\":\\"STRING\\"}]",\n                  "sqlInsertSegmentGranularity": "{\\"type\\":\\"all\\"}",\n                  "sqlQueryId": "3dc0c45d-34d7-4b15-86c9-cdb2d3ebfc4e",\n                  "sqlReplaceTimeChunks": "all"\n                },\n                "granularity": {\n                  "type": "all"\n                }\n              }\n            },\n            "signature": [\n              {\n                "name": "__boost",\n                "type": "LONG"\n              },\n              {\n                "name": "agent_category",\n                "type": "STRING"\n              },\n              {\n                "name": "agent_type",\n                "type": "STRING"\n              },\n              {\n                "name": "timestamp",\n                "type": "STRING"\n              }\n            ],\n            "shuffleSpec": {\n              "type": "targetSize",\n              "clusterBy": {\n                "columns": [\n                  {\n                    "columnName": "__boost"\n                  }\n                ]\n              },\n              "targetSize": 3000000\n            },\n            "maxWorkerCount": 1,\n            "shuffleCheckHasMultipleValues": true\n          },\n          "phase": "FINISHED",\n          "workerCount": 1,\n          "partitionCount": 1,\n          "startTime": "2022-09-14T22:12:11.663Z",\n          "duration": 19965,\n          "sort": true\n        },\n        {\n          "stageNumber": 1,\n          "definition": {\n            "id": "71ecb11e-09d7-42f8-9225-1662c8e7e121_1",\n            "input": [\n              {\n                "type": "stage",\n                "stage": 0\n              }\n            ],\n            "processor": {\n              "type": "segmentGenerator",\n              "dataSchema": {\n                "dataSource": "kttm_simple",\n                "timestampSpec": {\n                  "column": "__time",\n                  "format": "millis",\n                  "missingValue": null\n                },\n                "dimensionsSpec": {\n                  "dimensions": [\n                    {\n                      "type": "string",\n                      "name": "timestamp",\n                      "multiValueHandling": "SORTED_ARRAY",\n                      "createBitmapIndex": true\n                    },\n                    {\n                      "type": "string",\n                      "name": "agent_category",\n                      "multiValueHandling": "SORTED_ARRAY",\n                      "createBitmapIndex": true\n                    },\n                    {\n                      "type": "string",\n                      "name": "agent_type",\n                      "multiValueHandling": "SORTED_ARRAY",\n                      "createBitmapIndex": true\n                    }\n                  ],\n                  "dimensionExclusions": [\n                    "__time"\n                  ],\n                  "includeAllDimensions": false\n                },\n                "metricsSpec": [],\n                "granularitySpec": {\n                  "type": "arbitrary",\n                  "queryGranularity": {\n                    "type": "none"\n                  },\n                  "rollup": false,\n                  "intervals": [\n                    "-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z"\n                  ]\n                },\n                "transformSpec": {\n                  "filter": null,\n                  "transforms": []\n                }\n              },\n              "columnMappings": [\n                {\n                  "queryColumn": "timestamp",\n                  "outputColumn": "timestamp"\n                },\n                {\n                  "queryColumn": "agent_category",\n                  "outputColumn": "agent_category"\n                },\n                {\n                  "queryColumn": "agent_type",\n                  "outputColumn": "agent_type"\n                }\n              ],\n              "tuningConfig": {\n                "maxNumWorkers": 1,\n                "maxRowsInMemory": 100000,\n                "rowsPerSegment": 3000000\n              }\n            },\n            "signature": [],\n            "maxWorkerCount": 1\n          },\n          "phase": "FINISHED",\n          "workerCount": 1,\n          "partitionCount": 1,\n          "startTime": "2022-09-14T22:12:31.602Z",\n          "duration": 5891\n        }\n      ],\n      "counters": {\n        "0": {\n          "0": {\n            "input0": {\n              "type": "channel",\n              "rows": [\n                465346\n              ],\n              "files": [\n                1\n              ],\n              "totalFiles": [\n                1\n              ]\n            },\n            "output": {\n              "type": "channel",\n              "rows": [\n                465346\n              ],\n              "bytes": [\n                43694447\n              ],\n              "frames": [\n                7\n              ]\n            },\n            "shuffle": {\n              "type": "channel",\n              "rows": [\n                465346\n              ],\n              "bytes": [\n                41835307\n              ],\n              "frames": [\n                73\n              ]\n            },\n            "sortProgress": {\n              "type": "sortProgress",\n              "totalMergingLevels": 3,\n              "levelToTotalBatches": {\n                "0": 1,\n                "1": 1,\n                "2": 1\n              },\n              "levelToMergedBatches": {\n                "0": 1,\n                "1": 1,\n                "2": 1\n              },\n              "totalMergersForUltimateLevel": 1,\n              "progressDigest": 1\n            }\n          }\n        },\n        "1": {\n          "0": {\n            "input0": {\n              "type": "channel",\n              "rows": [\n                465346\n              ],\n              "bytes": [\n                41835307\n              ],\n              "frames": [\n                73\n              ]\n            },\n            "segmentGenerationProgress": {\n              "type": "segmentGenerationProgress",\n              "rowsProcessed": 465346,\n              "rowsPersisted": 465346,\n              "rowsMerged": 465346\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'})})]}),"\n",(0,s.jsx)("a",{name:"report-response-fields"}),"\n",(0,s.jsxs)(n.p,{children:["The following table describes the response fields when you retrieve a report for a MSQ task engine using the ",(0,s.jsx)(n.code,{children:"/druid/indexer/v1/task/{taskId}/reports"})," endpoint:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.taskId"})}),(0,s.jsx)(n.td,{children:"Controller task ID."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status"})}),(0,s.jsx)(n.td,{children:"Query status container."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.status"})}),(0,s.jsx)(n.td,{children:"RUNNING, SUCCESS, or FAILED."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.startTime"})}),(0,s.jsx)(n.td,{children:"Start time of the query in ISO format. Only present if the query has started running."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.durationMs"})}),(0,s.jsx)(n.td,{children:"Milliseconds elapsed after the query has started running. -1 denotes that the query hasn't started running yet."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.workers"})}),(0,s.jsx)(n.td,{children:"Workers for the controller task."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.workers.<workerNumber>"})}),(0,s.jsx)(n.td,{children:"Array of worker tasks including retries."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.workers.<workerNumber>[].workerId"})}),(0,s.jsx)(n.td,{children:"Id of the worker task."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.workers.<workerNumber>[].status"})}),(0,s.jsx)(n.td,{children:"RUNNING, SUCCESS, or FAILED."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.workers.<workerNumber>[].durationMs"})}),(0,s.jsx)(n.td,{children:"Milliseconds elapsed between when the worker task was first requested and when it finished. It is -1 for worker tasks with status RUNNING."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.workers.<workerNumber>[].pendingMs"})}),(0,s.jsxs)(n.td,{children:["Milliseconds elapsed between when the worker task was first requested and when it fully started RUNNING. Actual work time can be calculated using ",(0,s.jsx)(n.code,{children:"actualWorkTimeMS = durationMs - pendingMs"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.pendingTasks"})}),(0,s.jsx)(n.td,{children:"Number of tasks that are not fully started. -1 denotes that the number is currently unknown."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.runningTasks"})}),(0,s.jsx)(n.td,{children:"Number of currently running tasks. Should be at least 1 since the controller is included."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus"})}),(0,s.jsx)(n.td,{children:"Segment loading container. Only present after the segments have been published."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.state"})}),(0,s.jsx)(n.td,{children:"Either INIT, WAITING, SUCCESS, FAILED or TIMED_OUT."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.startTime"})}),(0,s.jsx)(n.td,{children:"Time since which the controller has been waiting for the segments to finish loading."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.duration"})}),(0,s.jsx)(n.td,{children:"The duration in milliseconds that the controller has been waiting for the segments to load."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.totalSegments"})}),(0,s.jsx)(n.td,{children:"The total number of segments generated by the job. This includes tombstone segments (if any)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.usedSegments"})}),(0,s.jsx)(n.td,{children:"The number of segments which are marked as used based on the load rules. Unused segments can be cleaned up at any time."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.precachedSegments"})}),(0,s.jsx)(n.td,{children:"The number of segments which are marked as precached and served by historicals, as per the load rules."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.onDemandSegments"})}),(0,s.jsx)(n.td,{children:"The number of segments which are not loaded on any historical, as per the load rules."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.pendingSegments"})}),(0,s.jsx)(n.td,{children:"The number of segments remaining to be loaded."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentLoadStatus.unknownSegments"})}),(0,s.jsx)(n.td,{children:"The number of segments whose status is unknown."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentReport"})}),(0,s.jsx)(n.td,{children:"Segment report. Only present if the query is an ingestion."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentReport.shardSpec"})}),(0,s.jsx)(n.td,{children:"Contains the shard spec chosen."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.segmentReport.details"})}),(0,s.jsx)(n.td,{children:"Contains further reasoning about the shard spec chosen."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.errorReport"})}),(0,s.jsx)(n.td,{children:"Error object. Only present if there was an error."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.errorReport.taskId"})}),(0,s.jsx)(n.td,{children:"The task that reported the error, if known. May be a controller task or a worker task."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.errorReport.host"})}),(0,s.jsx)(n.td,{children:"The hostname and port of the task that reported the error, if known."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.errorReport.stageNumber"})}),(0,s.jsx)(n.td,{children:"The stage number that reported the error, if it happened during execution of a specific stage."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.errorReport.error"})}),(0,s.jsxs)(n.td,{children:["Error object. Contains ",(0,s.jsx)(n.code,{children:"errorCode"})," at a minimum, and may contain other fields as described in the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#error-codes",children:"error code table"}),". Always present if there is an error."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.errorReport.error.errorCode"})}),(0,s.jsxs)(n.td,{children:["One of the error codes from the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#error-codes",children:"error code table"}),". Always present if there is an error."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.errorReport.error.errorMessage"})}),(0,s.jsx)(n.td,{children:"User-friendly error message. Not always present, even if there is an error."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.status.errorReport.exceptionStackTrace"})}),(0,s.jsx)(n.td,{children:"Java stack trace in string form, if the error was due to a server-side exception."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages"})}),(0,s.jsx)(n.td,{children:"Array of query stages."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].stageNumber"})}),(0,s.jsx)(n.td,{children:"Each stage has a number that differentiates it from other stages."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].phase"})}),(0,s.jsx)(n.td,{children:"Either NEW, READING_INPUT, POST_READING, RESULTS_COMPLETE, or FAILED. Only present if the stage has started."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].workerCount"})}),(0,s.jsx)(n.td,{children:"Number of parallel tasks that this stage is running on. Only present if the stage has started."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].partitionCount"})}),(0,s.jsx)(n.td,{children:"Number of output partitions generated by this stage. Only present if the stage has started and has computed its number of output partitions."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].startTime"})}),(0,s.jsx)(n.td,{children:"Start time of this stage. Only present if the stage has started."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].duration"})}),(0,s.jsx)(n.td,{children:"The number of milliseconds that the stage has been running. Only present if the stage has started."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].sort"})}),(0,s.jsxs)(n.td,{children:["A boolean that is set to ",(0,s.jsx)(n.code,{children:"true"})," if the stage does a sort as part of its execution."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].definition"})}),(0,s.jsx)(n.td,{children:"The object defining what the stage does."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].definition.id"})}),(0,s.jsx)(n.td,{children:"The unique identifier of the stage."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].definition.input"})}),(0,s.jsx)(n.td,{children:"Array of inputs that the stage has."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].definition.broadcast"})}),(0,s.jsx)(n.td,{children:"Array of input indexes that get broadcasted. Only present if there are inputs that get broadcasted."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].definition.processor"})}),(0,s.jsx)(n.td,{children:"An object defining the processor logic."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"multiStageQuery.payload.stages[].definition.signature"})}),(0,s.jsx)(n.td,{children:"The output signature of the stage."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"cancel-a-query-task",children:"Cancel a query task"}),"\n",(0,s.jsx)(n.p,{children:"Cancels a query task.\nReturns a JSON object with the ID of the task that was canceled successfully."}),"\n",(0,s.jsx)(n.h3,{id:"url-3",children:"URL"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"POST"})," ",(0,s.jsx)(n.code,{children:"/druid/indexer/v1/task/{taskId}/shutdown"})]}),"\n",(0,s.jsx)(n.h3,{id:"responses-3",children:"Responses"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(d.A,{value:"16",label:"200 SUCCESS",children:[(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Successfully shut down task"})})]}),(0,s.jsxs)(d.A,{value:"17",label:"404 NOT FOUND",children:[(0,s.jsx)("br",{}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Cannot find task with ID or task is no longer running"})})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"sample-request-3",children:"Sample request"}),"\n",(0,s.jsxs)(n.p,{children:["The following example shows how to cancel a query task with the ID ",(0,s.jsx)(n.code,{children:"query-655efe33-781a-4c50-ae84-c2911b42d63c"}),"."]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(d.A,{value:"18",label:"HTTP",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-HTTP",children:"POST /druid/indexer/v1/task/query-655efe33-781a-4c50-ae84-c2911b42d63c/shutdown HTTP/1.1\nHost: http://ROUTER_IP:ROUTER_PORT\n"})})}),(0,s.jsx)(d.A,{value:"19",label:"cURL",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl --location --request POST 'http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/task/query-655efe33-781a-4c50-ae84-c2911b42d63c/shutdown'\n"})})}),(0,s.jsx)(d.A,{value:"20",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import requests\n\nurl = "http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/task/query-655efe33-781a-4c50-ae84-c2911b42d63c/shutdown"\n\npayload = {}\nheaders = {}\n\nresponse = requests.post(url, headers=headers, data=payload)\n\nprint(response.text)\nprint(response.text)\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"sample-response-3",children:"Sample response"}),"\n",(0,s.jsx)(n.p,{children:"The response shows the ID of the task that was canceled."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "task": "query-655efe33-781a-4c50-ae84-c2911b42d63c"\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>T});var r=t(96540),s=t(18215),a=t(65627),i=t(56347),d=t(50372),l=t(30604),o=t(11861),c=t(78749);function u(e){var n,t;return null!=(n=null==(t=r.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,r.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function h(e){var n=e.values,t=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:function(e){return u(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(t);return function(e){var n=(0,o.XI)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function m(e){var n=e.queryString,t=void 0!==n&&n,s=e.groupId,a=(0,i.W6)(),d=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:s});return[(0,l.aZ)(d),(0,r.useCallback)((function(e){if(d){var n=new URLSearchParams(a.location.search);n.set(d,e),a.replace(Object.assign({},a.location,{search:n.toString()}))}}),[d,a])]}function x(e){var n,t,s,a,i=e.defaultValue,l=e.queryString,o=void 0!==l&&l,u=e.groupId,x=h(e),g=(0,r.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var s=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:i,tabValues:x})})),j=g[0],y=g[1],f=m({queryString:o,groupId:u}),b=f[0],S=f[1],T=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,c.Dv)(n),s=t[0],a=t[1],[s,(0,r.useCallback)((function(e){n&&a.set(e)}),[n,a])]),v=T[0],k=T[1],R=function(){var e=null!=b?b:v;return p({value:e,tabValues:x})?e:null}();return(0,d.A)((function(){R&&y(R)}),[R]),{selectedValue:j,selectValue:(0,r.useCallback)((function(e){if(!p({value:e,tabValues:x}))throw new Error("Can't select invalid tab value="+e);y(e),S(e),k(e)}),[S,k,x]),tabValues:x}}var g=t(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function f(e){var n=e.className,t=e.block,r=e.selectedValue,i=e.selectValue,d=e.tabValues,l=[],o=(0,a.a_)().blockElementScrollPositionUntilNextRender,c=function(e){var n=e.currentTarget,t=l.indexOf(n),s=d[t].value;s!==r&&(o(n),i(s))},u=function(e){var n,t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":var r,s=l.indexOf(e.currentTarget)+1;t=null!=(r=l[s])?r:l[0];break;case"ArrowLeft":var a,i=l.indexOf(e.currentTarget)-1;t=null!=(a=l[i])?a:l[l.length-1]}null==(n=t)||n.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:d.map((function(e){var n=e.value,t=e.label,a=e.attributes;return(0,y.jsx)("li",Object.assign({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:function(e){l.push(e)},onKeyDown:u,onClick:c},a,{className:(0,s.A)("tabs__item",j.tabItem,null==a?void 0:a.className,{"tabs__item--active":r===n}),children:null!=t?t:n}),n)}))})}function b(e){var n=e.lazy,t=e.children,a=e.selectedValue,i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var d=i.find((function(e){return e.props.value===a}));return d?(0,r.cloneElement)(d,{className:(0,s.A)("margin-top--md",d.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})}))})}function S(e){var n=x(e);return(0,y.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,y.jsx)(f,Object.assign({},n,e)),(0,y.jsx)(b,Object.assign({},n,e))]})}function T(e){var n=(0,g.A)();return(0,y.jsx)(S,Object.assign({},e,{children:u(e.children)}),String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(18215);const s={tabItem:"tabItem_Ymn6"};var a=t(74848);function i(e){var n=e.children,t=e.hidden,i=e.className;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:t,children:n})}}}]);