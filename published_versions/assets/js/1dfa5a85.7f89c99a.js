"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6424],{8710:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"multi-stage-query/known-issues","title":"SQL-based ingestion known issues","description":"\x3c!--","source":"@site/docs/33.0.0/multi-stage-query/known-issues.md","sourceDirName":"multi-stage-query","slug":"/multi-stage-query/known-issues","permalink":"/docs/33.0.0/multi-stage-query/known-issues","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"known-issues","title":"SQL-based ingestion known issues","sidebar_label":"Known issues"},"sidebar":"docs","previous":{"title":"Reference","permalink":"/docs/33.0.0/multi-stage-query/reference"},"next":{"title":"Streaming ingestion","permalink":"/docs/33.0.0/ingestion/streaming"}}');var t=i(74848),r=i(28453);const o={id:"known-issues",title:"SQL-based ingestion known issues",sidebar_label:"Known issues"},c=void 0,d={},l=[{value:"Multi-stage query task runtime",id:"multi-stage-query-task-runtime",level:2},{value:"<code>SELECT</code> Statement",id:"select-statement",level:2},{value:"<code>INSERT</code> and <code>REPLACE</code> Statements",id:"insert-and-replace-statements",level:2},{value:"<code>EXTERN</code> Function",id:"extern-function",level:2},{value:"<code>WINDOW</code> Function",id:"window-function",level:2},{value:"Automatic compaction",id:"automatic-compaction",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This page describes SQL-based batch ingestion using the ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/",children:(0,t.jsx)(n.code,{children:"druid-multi-stage-query"})}),"\nextension, new in Druid 24.0. Refer to the ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/#batch",children:"ingestion methods"})," table to determine which\ningestion method is right for you."]})}),"\n",(0,t.jsx)(n.h2,{id:"multi-stage-query-task-runtime",children:"Multi-stage query task runtime"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Fault tolerance is partially implemented. Workers get relaunched when they are killed unexpectedly. The controller does not get relaunched if it is killed unexpectedly."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Worker task stage outputs are stored in the working directory given by ",(0,t.jsx)(n.code,{children:"druid.indexer.task.baseDir"}),". Stages that\ngenerate a large amount of output data may exhaust all available disk space. In this case, the query fails with\nan ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#error_UnknownError",children:"UnknownError"}),' with a message including "No space left on device".']}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"select-statement",children:[(0,t.jsx)(n.code,{children:"SELECT"})," Statement"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GROUPING SETS"})," are not implemented. Queries using these features return a\n",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#error_QueryNotSupported",children:"QueryNotSupported"})," error."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"insert-and-replace-statements",children:[(0,t.jsx)(n.code,{children:"INSERT"})," and ",(0,t.jsx)(n.code,{children:"REPLACE"})," Statements"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"INSERT"})," and ",(0,t.jsx)(n.code,{children:"REPLACE"})," statements with column lists, like ",(0,t.jsx)(n.code,{children:"INSERT INTO tbl (a, b, c) SELECT ..."}),", is not implemented."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"INSERT ... SELECT"})," and ",(0,t.jsx)(n.code,{children:"REPLACE ... SELECT"})," insert columns from the ",(0,t.jsx)(n.code,{children:"SELECT"})," statement based on column name. This\ndiffers from SQL standard behavior, where columns are inserted based on position."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"INSERT"})," and ",(0,t.jsx)(n.code,{children:"REPLACE"})," do not support all options available in ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/ingestion-spec",children:"ingestion specs"}),",\nincluding the ",(0,t.jsx)(n.code,{children:"createBitmapIndex"})," and ",(0,t.jsx)(n.code,{children:"multiValueHandling"})," ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/ingestion-spec#dimension-objects",children:"dimension"}),"\nproperties, and the ",(0,t.jsx)(n.code,{children:"indexSpec"})," ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/ingestion-spec#tuningconfig",children:(0,t.jsx)(n.code,{children:"tuningConfig"})})," property."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"extern-function",children:[(0,t.jsx)(n.code,{children:"EXTERN"})," Function"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/ingestion/ingestion-spec#inclusions-and-exclusions",children:"schemaless dimensions"}),"\nfeature is not available. All columns and their types must be specified explicitly using the ",(0,t.jsx)(n.code,{children:"signature"})," parameter\nof the ",(0,t.jsxs)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#extern-function",children:[(0,t.jsx)(n.code,{children:"EXTERN"})," function"]}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"EXTERN"})," with input sources that match large numbers of files may exhaust available memory on the controller task."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"EXTERN"})," refers to external files. Use ",(0,t.jsx)(n.code,{children:"FROM"})," to access ",(0,t.jsx)(n.code,{children:"druid"})," input sources."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"window-function",children:[(0,t.jsx)(n.code,{children:"WINDOW"})," Function"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The maximum number of elements in a window cannot exceed a value of 100,000."}),"\n",(0,t.jsxs)(n.li,{children:["To avoid ",(0,t.jsx)(n.code,{children:"leafOperators"})," in MSQ engine, window functions have an extra scan stage after the window stage for cases\nwhere native engine has a non-empty ",(0,t.jsx)(n.code,{children:"leafOperator"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"automatic-compaction",children:"Automatic compaction"}),"\n",(0,t.jsx)(n.p,{children:"The following known issues and limitations affect automatic compaction with the MSQ task engine:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"metricSpec"})," field is only supported for certain aggregators. For more information, see ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/data-management/automatic-compaction#supported-aggregators",children:"Supported aggregators"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Only dynamic and range-based partitioning are supported."}),"\n",(0,t.jsxs)(n.li,{children:["Set ",(0,t.jsx)(n.code,{children:"rollup"}),"  to ",(0,t.jsx)(n.code,{children:"true"})," if and only if ",(0,t.jsx)(n.code,{children:"metricSpec"})," is not empty or null."]}),"\n",(0,t.jsx)(n.li,{children:"You can only partition on string dimensions. However, multi-valued string dimensions are not supported."}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"maxTotalRows"})," config is not supported in ",(0,t.jsx)(n.code,{children:"DynamicPartitionsSpec"}),". Use ",(0,t.jsx)(n.code,{children:"maxRowsPerSegment"})," instead."]}),"\n",(0,t.jsxs)(n.li,{children:["Segments can only be sorted on ",(0,t.jsx)(n.code,{children:"__time"})," as the first column."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(96540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);