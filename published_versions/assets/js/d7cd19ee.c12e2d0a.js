"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9485],{28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var i=n(96540);const s={},t=i.createContext(s);function a(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:r},e.children)}},28474:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"querying/sorting-orders","title":"String comparators","description":"\x3c!--","source":"@site/docs/33.0.0/querying/sorting-orders.md","sourceDirName":"querying","slug":"/querying/sorting-orders","permalink":"/docs/33.0.0/querying/sorting-orders","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"sorting-orders","title":"String comparators"},"sidebar":"docs","previous":{"title":"Sorting (topN)","permalink":"/docs/33.0.0/querying/topnmetricspec"},"next":{"title":"Virtual columns","permalink":"/docs/33.0.0/querying/virtual-columns"}}');var s=n(74848),t=n(28453);const a={id:"sorting-orders",title:"String comparators"},o=void 0,l={},c=[{value:"Lexicographic",id:"lexicographic",level:2},{value:"Alphanumeric",id:"alphanumeric",level:2},{value:"Numeric",id:"numeric",level:2},{value:"Strlen",id:"strlen",level:2},{value:"Version",id:"version",level:2}];function d(e){const r={a:"a",admonition:"admonition",h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsxs)(r.p,{children:["Apache Druid supports two query languages: ",(0,s.jsx)(r.a,{href:"/docs/33.0.0/querying/sql",children:"Druid SQL"})," and ",(0,s.jsx)(r.a,{href:"/docs/33.0.0/querying/",children:"native queries"}),".\nThis document describes the native\nlanguage. For information about functions available in SQL, refer to the\n",(0,s.jsx)(r.a,{href:"/docs/33.0.0/querying/sql-scalar",children:"SQL documentation"}),"."]})}),"\n",(0,s.jsxs)(r.p,{children:["These sorting orders are used by the ",(0,s.jsx)(r.a,{href:"/docs/33.0.0/querying/topnmetricspec",children:"TopNMetricSpec"}),", ",(0,s.jsx)(r.a,{href:"/docs/33.0.0/querying/searchquery",children:"SearchQuery"}),", GroupByQuery's ",(0,s.jsx)(r.a,{href:"/docs/33.0.0/querying/limitspec",children:"LimitSpec"}),", and ",(0,s.jsx)(r.a,{href:"/docs/33.0.0/querying/filters#bound-filter",children:"BoundFilter"}),"."]}),"\n",(0,s.jsx)(r.h2,{id:"lexicographic",children:"Lexicographic"}),"\n",(0,s.jsx)(r.p,{children:"Sorts values by converting Strings to their UTF-8 byte array representations and comparing lexicographically, byte-by-byte."}),"\n",(0,s.jsx)(r.h2,{id:"alphanumeric",children:"Alphanumeric"}),"\n",(0,s.jsx)(r.p,{children:'Suitable for strings with both numeric and non-numeric content, e.g.: "file12 sorts after file2"'}),"\n",(0,s.jsxs)(r.p,{children:["See ",(0,s.jsx)(r.a,{href:"https://github.com/amjjd/java-alphanum",children:"https://github.com/amjjd/java-alphanum"})," for more details on how this ordering sorts values."]}),"\n",(0,s.jsx)(r.p,{children:"This ordering is not suitable for numbers with decimal points or negative numbers."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:'For example, "1.3" precedes "1.15" in this ordering because "15" has more significant digits than "3".'}),"\n",(0,s.jsx)(r.li,{children:'Negative numbers are sorted after positive numbers (because numeric characters precede the "-" in the negative numbers).'}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"numeric",children:"Numeric"}),"\n",(0,s.jsx)(r.p,{children:"Sorts values as numbers, supports integers and floating point values. Negative values are supported."}),"\n",(0,s.jsx)(r.p,{children:"This sorting order will try to parse all string values as numbers. Unparseable values are treated as nulls, and nulls precede numbers."}),"\n",(0,s.jsx)(r.p,{children:'When comparing two unparseable values (e.g., "hello" and "world"), this ordering will sort by comparing the unparsed strings lexicographically.'}),"\n",(0,s.jsx)(r.h2,{id:"strlen",children:"Strlen"}),"\n",(0,s.jsx)(r.p,{children:"Sorts values by their string lengths. When there is a tie, this comparator falls back to using the String compareTo method."}),"\n",(0,s.jsx)(r.h2,{id:"version",children:"Version"}),"\n",(0,s.jsx)(r.p,{children:'Sorts values as versions, e.g.: "10.0 sorts after 9.0", "1.0.0-SNAPSHOT sorts after 1.0.0".'}),"\n",(0,s.jsxs)(r.p,{children:["See ",(0,s.jsx)(r.a,{href:"https://maven.apache.org/ref/3.6.0/maven-artifact/apidocs/org/apache/maven/artifact/versioning/ComparableVersion.html",children:"https://maven.apache.org/ref/3.6.0/maven-artifact/apidocs/org/apache/maven/artifact/versioning/ComparableVersion.html"})," for more details on how this ordering sorts values."]})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);