"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1653],{28453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>d});var n=t(96540);const i={},s=n.createContext(i);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:r},e.children)}},97385:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"development/extensions-core/druid-kerberos","title":"Kerberos","description":"\x3c!--","source":"@site/docs/33.0.0/development/extensions-core/druid-kerberos.md","sourceDirName":"development/extensions-core","slug":"/development/extensions-core/druid-kerberos","permalink":"/docs/33.0.0/development/extensions-core/druid-kerberos","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"druid-kerberos","title":"Kerberos"}}');var i=t(74848),s=t(28453);const o={id:"druid-kerberos",title:"Kerberos"},d=void 0,c={},a=[{value:"Configuration",id:"configuration",level:2},{value:"Creating an Authenticator",id:"creating-an-authenticator",level:3},{value:"Properties",id:"properties",level:3},{value:"<code>druid.auth.authenticator.kerberos.excludedPaths</code>",id:"druidauthauthenticatorkerberosexcludedpaths",level:3},{value:"Auth to Local Syntax",id:"auth-to-local-syntax",level:3},{value:"Increasing HTTP Header size for large SPNEGO negotiate header",id:"increasing-http-header-size-for-large-spnego-negotiate-header",level:3},{value:"Configuring Kerberos Escalated Client",id:"configuring-kerberos-escalated-client",level:2},{value:"Accessing Druid HTTP end points when kerberos security is enabled",id:"accessing-druid-http-end-points-when-kerberos-security-is-enabled",level:2},{value:"Accessing Coordinator or Overlord console from web browser",id:"accessing-coordinator-or-overlord-console-from-web-browser",level:2},{value:"Sending Queries programmatically",id:"sending-queries-programmatically",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:["Apache Druid Extension to enable Authentication for Druid Processes using Kerberos.\nThis extension adds an Authenticator which is used to protect HTTP Endpoints using the simple and protected GSSAPI negotiation mechanism ",(0,i.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/SPNEGO",children:"SPNEGO"}),".\nMake sure to ",(0,i.jsx)(r.a,{href:"/docs/33.0.0/configuration/extensions#loading-extensions",children:"include"})," ",(0,i.jsx)(r.code,{children:"druid-kerberos"})," in the extensions load list."]}),"\n",(0,i.jsx)(r.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(r.h3,{id:"creating-an-authenticator",children:"Creating an Authenticator"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:'druid.auth.authenticatorChain=["MyKerberosAuthenticator"]\n\ndruid.auth.authenticator.MyKerberosAuthenticator.type=kerberos\n'})}),"\n",(0,i.jsxs)(r.p,{children:["To use the Kerberos authenticator, add an authenticator with type ",(0,i.jsx)(r.code,{children:"kerberos"}),' to the authenticatorChain. The example above uses the name "MyKerberosAuthenticator" for the Authenticator.']}),"\n",(0,i.jsx)(r.p,{children:"Configuration of the named authenticator is assigned through properties with the form:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"druid.auth.authenticator.<authenticatorName>.<authenticatorProperty>\n"})}),"\n",(0,i.jsx)(r.p,{children:'The configuration examples in the rest of this document will use "kerberos" as the name of the authenticator being configured.'}),"\n",(0,i.jsx)(r.h3,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Property"}),(0,i.jsx)(r.th,{children:"Possible Values"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{children:"Default"}),(0,i.jsx)(r.th,{children:"required"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.auth.authenticator.kerberos.serverPrincipal"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"HTTP/_HOST@EXAMPLE.COM"})}),(0,i.jsx)(r.td,{children:"SPNEGO service principal used by druid processes"}),(0,i.jsx)(r.td,{children:"empty"}),(0,i.jsx)(r.td,{children:"Yes"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.auth.authenticator.kerberos.serverKeytab"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"/etc/security/keytabs/spnego.service.keytab"})}),(0,i.jsx)(r.td,{children:"SPNego service keytab used by druid processes"}),(0,i.jsx)(r.td,{children:"empty"}),(0,i.jsx)(r.td,{children:"Yes"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.auth.authenticator.kerberos.authToLocal"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"RULE:[1:$1@$0](druid@EXAMPLE.COM)s/.*/druid DEFAULT"})}),(0,i.jsx)(r.td,{children:"It allows you to set a general rule for mapping principal names to local user names. It will be used if there is not an explicit mapping for the principal name that is being translated."}),(0,i.jsx)(r.td,{children:"DEFAULT"}),(0,i.jsx)(r.td,{children:"No"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.auth.authenticator.kerberos.cookieSignatureSecret"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"secretString"})}),(0,i.jsx)(r.td,{children:"Secret used to sign authentication cookies. It is advisable to explicitly set it, if you have multiple druid nodes running on same machine with different ports as the Cookie Specification does not guarantee isolation by port."}),(0,i.jsx)(r.td,{children:"Random value"}),(0,i.jsx)(r.td,{children:"No"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.auth.authenticator.kerberos.authorizerName"})}),(0,i.jsx)(r.td,{children:"Depends on available authorizers"}),(0,i.jsx)(r.td,{children:"Authorizer that requests should be directed to"}),(0,i.jsx)(r.td,{children:"Empty"}),(0,i.jsx)(r.td,{children:"Yes"})]})]})]}),"\n",(0,i.jsxs)(r.p,{children:["As a note, it is required that the SPNego principal in use by the druid processes must start with HTTP (This specified by ",(0,i.jsx)(r.a,{href:"https://tools.ietf.org/html/rfc4559",children:"RFC-4559"}),') and must be of the form "HTTP/_HOST@REALM".\nThe special string _HOST will be replaced automatically with the value of config ',(0,i.jsx)(r.code,{children:"druid.host"})]}),"\n",(0,i.jsx)(r.h3,{id:"druidauthauthenticatorkerberosexcludedpaths",children:(0,i.jsx)(r.code,{children:"druid.auth.authenticator.kerberos.excludedPaths"})}),"\n",(0,i.jsxs)(r.p,{children:["In older releases, the Kerberos authenticator had an ",(0,i.jsx)(r.code,{children:"excludedPaths"})," property that allowed the user to specify a list of paths where authentication checks should be skipped. This property has been removed from the Kerberos authenticator because the path exclusion functionality is now handled across all authenticators/authorizers by setting ",(0,i.jsx)(r.code,{children:"druid.auth.unsecuredPaths"}),", as described in the ",(0,i.jsx)(r.a,{href:"/docs/33.0.0/operations/auth",children:"main auth documentation"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"auth-to-local-syntax",children:"Auth to Local Syntax"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"druid.auth.authenticator.kerberos.authToLocal"})," allows you to set a general rules for mapping principal names to local user names.\nThe syntax for mapping rules is ",(0,i.jsx)(r.code,{children:"RULE:\\[n:string](regexp)s/pattern/replacement/g"}),". The integer n indicates how many components the target principal should have. If this matches, then a string will be formed from string, substituting the realm of the principal for $0 and the nth component of the principal for $n. e.g. if the principal was druid/admin then ",(0,i.jsx)(r.code,{children:"\\[2:$2$1suffix]"})," would result in the string ",(0,i.jsx)(r.code,{children:"admindruidsuffix"}),".\nIf this string matches regexp, then the s//[g] substitution command will be run over the string. The optional g will cause the substitution to be global over the string, instead of replacing only the first match in the string.\nIf required, multiple rules can be joined by newline character and specified as a String."]}),"\n",(0,i.jsx)(r.h3,{id:"increasing-http-header-size-for-large-spnego-negotiate-header",children:"Increasing HTTP Header size for large SPNEGO negotiate header"}),"\n",(0,i.jsxs)(r.p,{children:["In Active Directory environment, SPNEGO token in the Authorization header includes PAC (Privilege Access Certificate) information,\nwhich includes all security groups for the user. In some cases when the user belongs to many security groups the header to grow beyond what druid can handle by default.\nIn such cases, max request header size that druid can handle can be increased by setting ",(0,i.jsx)(r.code,{children:"druid.server.http.maxRequestHeaderSize"})," (default 8KiB) and ",(0,i.jsx)(r.code,{children:"druid.router.http.maxRequestBufferSize"})," (default 8KiB)."]}),"\n",(0,i.jsx)(r.h2,{id:"configuring-kerberos-escalated-client",children:"Configuring Kerberos Escalated Client"}),"\n",(0,i.jsx)(r.p,{children:"Druid internal processes communicate with each other using an escalated http Client. A Kerberos enabled escalated HTTP Client can be configured by following properties -"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Property"}),(0,i.jsx)(r.th,{children:"Example Values"}),(0,i.jsx)(r.th,{children:"Description"}),(0,i.jsx)(r.th,{children:"Default"}),(0,i.jsx)(r.th,{children:"required"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.escalator.type"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"kerberos"})}),(0,i.jsx)(r.td,{children:"Type of Escalator client used for internal process communication."}),(0,i.jsx)(r.td,{children:"n/a"}),(0,i.jsx)(r.td,{children:"Yes"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.escalator.internalClientPrincipal"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid@EXAMPLE.COM"})}),(0,i.jsx)(r.td,{children:"Principal user name, used for internal process communication"}),(0,i.jsx)(r.td,{children:"n/a"}),(0,i.jsx)(r.td,{children:"Yes"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.escalator.internalClientKeytab"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"/etc/security/keytabs/druid.keytab"})}),(0,i.jsx)(r.td,{children:"Path to keytab file used for internal process communication"}),(0,i.jsx)(r.td,{children:"n/a"}),(0,i.jsx)(r.td,{children:"Yes"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"druid.escalator.authorizerName"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"MyBasicAuthorizer"})}),(0,i.jsx)(r.td,{children:"Authorizer that requests should be directed to."}),(0,i.jsx)(r.td,{children:"n/a"}),(0,i.jsx)(r.td,{children:"Yes"})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"accessing-druid-http-end-points-when-kerberos-security-is-enabled",children:"Accessing Druid HTTP end points when kerberos security is enabled"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["To access druid HTTP endpoints via curl user will need to first login using ",(0,i.jsx)(r.code,{children:"kinit"})," command as follows -"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"kinit -k -t <path_to_keytab_file> user@REALM.COM\n"})}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Once the login is successful verify that login is successful using ",(0,i.jsx)(r.code,{children:"klist"})," command"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:"Now you can access druid HTTP endpoints using curl command as follows -"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"curl --negotiate -u:anyUser -b ~/cookies.txt -c ~/cookies.txt -X POST -H'Content-Type: application/json' <HTTP_END_POINT>\n"})}),"\n",(0,i.jsxs)(r.p,{children:["e.g to send a query from file ",(0,i.jsx)(r.code,{children:"query.json"})," to the Druid Broker use this command -"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"curl --negotiate -u:anyUser -b ~/cookies.txt -c ~/cookies.txt -X POST -H'Content-Type: application/json'  http://broker-host:port/druid/v2/?pretty -d @query.json\n"})}),"\n",(0,i.jsx)(r.p,{children:"Note: Above command will authenticate the user first time using SPNego negotiate mechanism and store the authentication cookie in file. For subsequent requests the cookie will be used for authentication."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"accessing-coordinator-or-overlord-console-from-web-browser",children:"Accessing Coordinator or Overlord console from web browser"}),"\n",(0,i.jsx)(r.p,{children:"To access Coordinator/Overlord console from browser you will need to configure your browser for SPNego authentication as follows -"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Safari - No configurations required."}),"\n",(0,i.jsxs)(r.li,{children:["Firefox - Open firefox and follow these steps -","\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Go to ",(0,i.jsx)(r.code,{children:"about:config"})," and search for ",(0,i.jsx)(r.code,{children:"network.negotiate-auth.trusted-uris"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Double-click and add the following values: ",(0,i.jsx)(r.code,{children:'"http://druid-coordinator-hostname:ui-port"'})," and ",(0,i.jsx)(r.code,{children:'"http://druid-overlord-hostname:port"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["Google Chrome - From the command line run following commands -","\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:'google-chrome --auth-server-whitelist="druid-coordinator-hostname" --auth-negotiate-delegate-whitelist="druid-coordinator-hostname"'})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:'google-chrome --auth-server-whitelist="druid-overlord-hostname" --auth-negotiate-delegate-whitelist="druid-overlord-hostname"'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["Internet Explorer -","\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Configure trusted websites to include ",(0,i.jsx)(r.code,{children:'"druid-coordinator-hostname"'})," and ",(0,i.jsx)(r.code,{children:'"druid-overlord-hostname"'})]}),"\n",(0,i.jsx)(r.li,{children:"Allow negotiation for the UI website."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"sending-queries-programmatically",children:"Sending Queries programmatically"}),"\n",(0,i.jsxs)(r.p,{children:["Many HTTP client libraries, such as Apache Commons ",(0,i.jsx)(r.a,{href:"https://hc.apache.org/",children:"HttpComponents"}),", already have support for performing SPNEGO authentication. You can use any of the available HTTP client library to communicate with druid cluster."]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);