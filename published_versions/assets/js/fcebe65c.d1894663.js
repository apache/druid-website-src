"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9658],{1833:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"development/extensions-contrib/gce-extensions","title":"GCE Extensions","description":"\x3c!--","source":"@site/docs/33.0.0/development/extensions-contrib/gce-extensions.md","sourceDirName":"development/extensions-contrib","slug":"/development/extensions-contrib/gce-extensions","permalink":"/docs/33.0.0/development/extensions-contrib/gce-extensions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"gce-extensions","title":"GCE Extensions"}}');var i=t(74848),o=t(28453);const r={id:"gce-extensions",title:"GCE Extensions"},c=void 0,a={},d=[{value:"Overlord Dynamic Configuration",id:"overlord-dynamic-configuration",level:2},{value:"Known limitations",id:"known-limitations",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["To use this Apache Druid extension, ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/configuration/extensions#loading-extensions",children:"include"})," ",(0,i.jsx)(n.code,{children:"gce-extensions"})," in the extensions load list."]}),"\n",(0,i.jsx)(n.p,{children:"At the moment, this extension enables only Druid to autoscale instances in GCE."}),"\n",(0,i.jsxs)(n.p,{children:["The extension manages the instances to be scaled up and down through the use of the ",(0,i.jsx)(n.a,{href:"https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances#resize_managed_group",children:"Managed Instance Groups"}),"\nof GCE (MIG from now on). This choice has been made to ease the configuration of the machines and simplify their\nmanagement."]}),"\n",(0,i.jsx)(n.p,{children:"For this reason, in order to use this extension, the user must have created"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"An instance template with the right machine type and image to bu used to run the Middle Manager"}),"\n",(0,i.jsx)(n.li,{children:"A MIG that has been configured to use the instance template created in the point above"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Moreover, in order to be able to rescale the machines in the MIG, the Overlord must run with a service account\nguaranteeing the following two scopes from the ",(0,i.jsx)(n.a,{href:"https://developers.google.com/identity/protocols/googlescopes#computev1",children:"Compute Engine API"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"https://www.googleapis.com/auth/cloud-platform"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"https://www.googleapis.com/auth/compute"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overlord-dynamic-configuration",children:"Overlord Dynamic Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The Overlord can dynamically change worker behavior."}),"\n",(0,i.jsx)(n.p,{children:"The JSON object can be submitted to the Overlord via a POST request at:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://<OVERLORD_IP>:<port>/druid/indexer/v1/worker\n"})}),"\n",(0,i.jsx)(n.p,{children:"Optional Header Parameters for auditing the config change can also be specified."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Header Param Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Default"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"X-Druid-Author"})}),(0,i.jsx)(n.td,{children:"author making the config change"}),(0,i.jsx)(n.td,{children:'""'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"X-Druid-Comment"})}),(0,i.jsx)(n.td,{children:"comment describing the change being done"}),(0,i.jsx)(n.td,{children:'""'})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"A sample worker config spec is shown below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "autoScaler": {\n    "envConfig" : {\n      "numInstances" : 1,\n      "projectId" : "super-project",\n      "zoneName" : "us-central-1",\n      "managedInstanceGroupName" : "druid-middlemanagers"\n    },\n    "maxNumWorkers" : 4,\n    "minNumWorkers" : 2,\n    "type" : "gce"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The configuration of the autoscaler is quite simple and it is made of two levels only."}),"\n",(0,i.jsxs)(n.p,{children:["The external level specifies the ",(0,i.jsx)(n.code,{children:"type"}),"\u2014always ",(0,i.jsx)(n.code,{children:"gce"})," in this case\u2014 and two numeric values,\nthe ",(0,i.jsx)(n.code,{children:"maxNumWorkers"})," and ",(0,i.jsx)(n.code,{children:"minNumWorkers"})," used to define the boundaries in between which the\nnumber of instances must be at any time."]}),"\n",(0,i.jsxs)(n.p,{children:["The internal level is the ",(0,i.jsx)(n.code,{children:"envConfig"})," and it is used to specify"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"numInstances"})," used to specify how many workers will be spawned at each\nrequest to provision more workers.  This is safe to be left to ",(0,i.jsx)(n.code,{children:"1"})]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"projectId"})," used to specify the name of the project in which the MIG resides"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"zoneName"})," used to identify in which zone of the worlds the MIG is"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"managedInstanceGroupName"})," used to specify the MIG containing the instances created or\nremoved"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to the Overlord Dynamic Configuration section in the main ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/configuration/",children:"documentation"}),"\nfor parameters other than the ones specified here, such as ",(0,i.jsx)(n.code,{children:"selectStrategy"})," etc."]}),"\n",(0,i.jsx)(n.h2,{id:"known-limitations",children:"Known limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The module internally uses the ",(0,i.jsx)(n.a,{href:"https://cloud.google.com/compute/docs/reference/rest/v1/instanceGroupManagers/listManagedInstances",children:"ListManagedInstances"}),"\ncall from the API and, while the documentation of the API states that the call can be paged through using the\n",(0,i.jsx)(n.code,{children:"pageToken"})," argument, the responses to such call do not provide any ",(0,i.jsx)(n.code,{children:"nextPageToken"})," to set such parameter. This means\nthat the extension can operate safely with a maximum of 500 Middle Managers instances at any time (the maximum number\nof instances to be returned for each call)."]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(96540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);