"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[309],{22890:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"multi-stage-query/index","title":"SQL-based ingestion","description":"Introduces multi-stage query architecture and its task engine","source":"@site/docs/33.0.0/multi-stage-query/index.md","sourceDirName":"multi-stage-query","slug":"/multi-stage-query/","permalink":"/docs/33.0.0/multi-stage-query/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"index","title":"SQL-based ingestion","sidebar_label":"SQL-based ingestion","description":"Introduces multi-stage query architecture and its task engine"},"sidebar":"docs","previous":{"title":"Task reference","permalink":"/docs/33.0.0/ingestion/tasks"},"next":{"title":"Key concepts","permalink":"/docs/33.0.0/multi-stage-query/concepts"}}');var i=s(74848),r=s(28453);const o={id:"index",title:"SQL-based ingestion",sidebar_label:"SQL-based ingestion",description:"Introduces multi-stage query architecture and its task engine"},a=void 0,c={},l=[{value:"Vocabulary",id:"vocabulary",level:2},{value:"Load the extension",id:"load-the-extension",level:2},{value:"Next steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This page describes SQL-based batch ingestion using the ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/",children:(0,i.jsx)(n.code,{children:"druid-multi-stage-query"})}),"\nextension, new in Druid 24.0. Refer to the ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/ingestion/#batch",children:"ingestion methods"})," table to determine which\ningestion method is right for you."]})}),"\n",(0,i.jsxs)(n.p,{children:["Apache Druid supports SQL-based ingestion using the bundled ",(0,i.jsxs)(n.a,{href:"#load-the-extension",children:[(0,i.jsx)(n.code,{children:"druid-multi-stage-query"})," extension"]}),".\nThis extension adds a ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts#multi-stage-query-task-engine",children:"multi-stage query task engine for SQL"})," that allows running SQL\n",(0,i.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts#insert",children:"INSERT"})," and ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts#replace",children:"REPLACE"})," statements as batch tasks. As an experimental feature,\nthe task engine also supports running ",(0,i.jsx)(n.code,{children:"SELECT"})," queries as batch tasks."]}),"\n",(0,i.jsxs)(n.p,{children:["Nearly all ",(0,i.jsx)(n.code,{children:"SELECT"})," capabilities are available in the multi-stage query (MSQ) task engine, with certain exceptions listed on the ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/known-issues#select-statement",children:"Known\nissues"})," page. This allows great flexibility to apply transformations, filters, JOINs,\naggregations, and so on as part of ",(0,i.jsx)(n.code,{children:"INSERT ... SELECT"})," and ",(0,i.jsx)(n.code,{children:"REPLACE ... SELECT"})," statements. This also allows in-database\ntransformation: creating new tables based on queries of other tables."]}),"\n",(0,i.jsx)(n.h2,{id:"vocabulary",children:"Vocabulary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Controller"}),": An indexing service task of type ",(0,i.jsx)(n.code,{children:"query_controller"})," that manages\nthe execution of a query. There is one controller task per query."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Worker"}),": Indexing service tasks of type ",(0,i.jsx)(n.code,{children:"query_worker"})," that execute a\nquery. There can be multiple worker tasks per query. Internally,\nthe tasks process items in parallel using their processing pools (up to ",(0,i.jsx)(n.code,{children:"druid.processing.numThreads"})," of execution parallelism\nwithin a worker task)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Stage"}),": A stage of query execution that is parallelized across\nworker tasks. Workers exchange data with each other between stages."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Partition"}),": A slice of data output by worker tasks. In INSERT or REPLACE\nqueries, the partitions of the final stage become Druid segments."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Shuffle"}),": Workers exchange data between themselves on a per-partition basis in a process called\nshuffling. During a shuffle, each output partition is sorted by a clustering key."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"load-the-extension",children:"Load the extension"}),"\n",(0,i.jsxs)(n.p,{children:["To add the extension to an existing cluster, add ",(0,i.jsx)(n.code,{children:"druid-multi-stage-query"})," to ",(0,i.jsx)(n.code,{children:"druid.extensions.loadlist"})," in your\n",(0,i.jsx)(n.code,{children:"common.runtime.properties"})," file."]}),"\n",(0,i.jsxs)(n.p,{children:["For more information about how to load an extension, see ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/configuration/extensions#loading-extensions",children:"Loading extensions"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To use ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#extern-function",children:"EXTERN"}),', you need READ permission on the resource named "EXTERNAL" of the resource type\n"EXTERNAL". If you encounter a 403 error when trying to use ',(0,i.jsx)(n.code,{children:"EXTERN"}),", verify that you have the correct permissions.\nThe same is true of any of the input-source specific table function such as ",(0,i.jsx)(n.code,{children:"S3"})," or ",(0,i.jsx)(n.code,{children:"LOCALFILES"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts",children:"Read about key concepts"})," to learn more about how SQL-based ingestion and multi-stage queries work."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/examples",children:"Check out the examples"})," to see SQL-based ingestion in action."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/33.0.0/operations/web-console",children:"Explore the Query view"})," to get started\xa0in the web console."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);