"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8651],{3495:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>n,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"development/extensions-contrib/statsd","title":"StatsD Emitter","description":"\x3c!--","source":"@site/docs/33.0.0/development/extensions-contrib/statsd.md","sourceDirName":"development/extensions-contrib","slug":"/development/extensions-contrib/statsd","permalink":"/docs/33.0.0/development/extensions-contrib/statsd","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"statsd","title":"StatsD Emitter"}}');var r=s(74848),i=s(28453);const n={id:"statsd",title:"StatsD Emitter"},c=void 0,o={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Druid to StatsD Event Converter",id:"druid-to-statsd-event-converter",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["To use this Apache Druid extension, ",(0,r.jsx)(t.a,{href:"/docs/33.0.0/configuration/extensions#loading-extensions",children:"include"})," ",(0,r.jsx)(t.code,{children:"statsd-emitter"})," in the extensions load list."]}),"\n",(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(t.p,{children:["This extension emits druid metrics to a StatsD server.\n(",(0,r.jsx)(t.a,{href:"https://github.com/etsy/statsd",children:"https://github.com/etsy/statsd"}),")\n(",(0,r.jsx)(t.a,{href:"https://github.com/armon/statsite",children:"https://github.com/armon/statsite"}),")"]}),"\n",(0,r.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(t.p,{children:["All the configuration parameters for the StatsD emitter are under ",(0,r.jsx)(t.code,{children:"druid.emitter.statsd"}),"."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"property"}),(0,r.jsx)(t.th,{children:"description"}),(0,r.jsx)(t.th,{children:"required?"}),(0,r.jsx)(t.th,{children:"default"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.hostname"})}),(0,r.jsx)(t.td,{children:"The hostname of the StatsD server."}),(0,r.jsx)(t.td,{children:"yes"}),(0,r.jsx)(t.td,{children:"none"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.port"})}),(0,r.jsx)(t.td,{children:"The port of the StatsD server."}),(0,r.jsx)(t.td,{children:"yes"}),(0,r.jsx)(t.td,{children:"none"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.prefix"})}),(0,r.jsx)(t.td,{children:"Optional metric name prefix."}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:'""'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.separator"})}),(0,r.jsx)(t.td,{children:"Metric name separator"}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.includeHost"})}),(0,r.jsx)(t.td,{children:"Flag to include the hostname as part of the metric name."}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"false"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dimensionMapPath"})}),(0,r.jsx)(t.td,{children:"JSON file defining the StatsD type, and desired dimensions for every Druid metric"}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"Default mapping provided. See below."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.blankHolder"})}),(0,r.jsx)(t.td,{children:"The blank character replacement as StatsD does not support path with blank character"}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:'"-"'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.queueSize"})}),(0,r.jsx)(t.td,{children:"Maximum number of unprocessed messages in the message queue."}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"Default value of StatsD Client(4096)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.poolSize"})}),(0,r.jsx)(t.td,{children:"Network packet buffer pool size."}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"Default value of StatsD Client(512)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.processorWorkers"})}),(0,r.jsx)(t.td,{children:"The number of processor worker threads assembling buffers for submission."}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"Default value of StatsD Client(1)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.senderWorkers"})}),(0,r.jsx)(t.td,{children:"The number of sender worker threads submitting buffers to the socket."}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"Default value of StatsD Client(1)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsd"})}),(0,r.jsxs)(t.td,{children:["Flag to enable ",(0,r.jsx)(t.a,{href:"https://docs.datadoghq.com/developers/dogstatsd/",children:"DogStatsD"})," support. Causes dimensions to be included as tags, not as a part of the metric name. ",(0,r.jsx)(t.code,{children:"convertRange"})," fields will be ignored."]}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"false"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsdConstantTags"})}),(0,r.jsxs)(t.td,{children:["If ",(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsd"})," is true, the tags in the JSON list of strings will be sent with every event."]}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"[]"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsdServiceAsTag"})}),(0,r.jsxs)(t.td,{children:["If ",(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsd"})," and ",(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsdServiceAsTag"})," are true, druid service (e.g. ",(0,r.jsx)(t.code,{children:"druid/broker"}),", ",(0,r.jsx)(t.code,{children:"druid/coordinator"}),", etc) is reported as a tag (e.g. ",(0,r.jsx)(t.code,{children:"druid_service:druid/broker"}),") instead of being included in metric name (e.g. ",(0,r.jsx)(t.code,{children:"druid.broker.query.time"}),") and ",(0,r.jsx)(t.code,{children:"druid"})," is used as metric prefix (e.g. ",(0,r.jsx)(t.code,{children:"druid.query.time"}),")."]}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"false"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsdEvents"})}),(0,r.jsxs)(t.td,{children:["If ",(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsd"})," and ",(0,r.jsx)(t.code,{children:"druid.emitter.statsd.dogstatsdEvents"})," are true, ",(0,r.jsx)(t.a,{href:"/docs/33.0.0/operations/alerts",children:"Alert events"})," are reported to DogStatsD."]}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"false"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"druid-to-statsd-event-converter",children:"Druid to StatsD Event Converter"}),"\n",(0,r.jsxs)(t.p,{children:["Each metric sent to StatsD must specify a type, one of ",(0,r.jsx)(t.code,{children:"[timer, counter, guage]"}),'. StatsD Emitter expects this mapping to\nbe provided as a JSON file.  Additionally, this mapping specifies which dimensions should be included for each metric.\nStatsD expects that metric values be integers.  Druid emits some metrics with values between the range 0 and 1. To accommodate these metrics they are converted\ninto the range 0 to 100.  This conversion can be enabled by setting the optional "convertRange" field true in the JSON mapping file.\nIf the user does not specify their own JSON file, a default mapping is used.  All\nmetrics are expected to be mapped. Metrics which are not mapped will log an error.\nStatsD metric path is organized using the following schema:\n',(0,r.jsx)(t.code,{children:'<druid metric name> : { "dimensions" : <dimension list>, "type" : <StatsD type>, "convertRange" : true/false}'}),"\ne.g.\n",(0,r.jsx)(t.code,{children:'query/time" : { "dimensions" : ["dataSource", "type"], "type" : "timer"}'})]}),"\n",(0,r.jsxs)(t.p,{children:["For metrics which are emitted from multiple services with different dimensions, the metric name is prefixed with\nthe service name.\ne.g.\n",(0,r.jsx)(t.code,{children:'"druid/coordinator-segment/count" : { "dimensions" : ["dataSource"], "type" : "gauge" },  "druid/historical-segment/count" : { "dimensions" : ["dataSource", "tier", "priority"], "type" : "gauge" }'})]}),"\n",(0,r.jsx)(t.p,{children:"For most use-cases, the default mapping is sufficient."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>n,x:()=>c});var d=s(96540);const r={},i=d.createContext(r);function n(e){const t=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),d.createElement(i.Provider,{value:t},e.children)}}}]);