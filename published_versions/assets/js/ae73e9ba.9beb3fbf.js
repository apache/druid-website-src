"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6410],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var s=r(96540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},93994:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>o,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"querying/searchquery","title":"Search queries","description":"\x3c!--","source":"@site/docs/33.0.0/querying/searchquery.md","sourceDirName":"querying","slug":"/querying/searchquery","permalink":"/docs/33.0.0/querying/searchquery","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"searchquery","title":"Search queries","sidebar_label":"Search"},"sidebar":"docs","previous":{"title":"Scan","permalink":"/docs/33.0.0/querying/scan-query"},"next":{"title":"TimeBoundary","permalink":"/docs/33.0.0/querying/timeboundaryquery"}}');var i=r(74848),t=r(28453);const a={id:"searchquery",title:"Search queries",sidebar_label:"Search"},c=void 0,d={},l=[{value:"Implementation details",id:"implementation-details",level:3},{value:"Strategies",id:"strategies",level:4},{value:"Server configuration",id:"server-configuration",level:2},{value:"Query context",id:"query-context",level:2},{value:"SearchQuerySpec",id:"searchqueryspec",level:2},{value:"<code>insensitive_contains</code>",id:"insensitive_contains",level:3},{value:"<code>fragment</code>",id:"fragment",level:3},{value:"<code>contains</code>",id:"contains",level:3},{value:"<code>regex</code>",id:"regex",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Apache Druid supports two query languages: ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/sql",children:"Druid SQL"})," and ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/",children:"native queries"}),".\nThis document describes a query\ntype that is only available in the native language."]})}),"\n",(0,i.jsx)(n.p,{children:"A search query returns dimension values that match the search specification."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "queryType": "search",\n  "dataSource": "sample_datasource",\n  "granularity": "day",\n  "searchDimensions": [\n    "dim1",\n    "dim2"\n  ],\n  "query": {\n    "type": "insensitive_contains",\n    "value": "Ke"\n  },\n  "sort" : {\n    "type": "lexicographic"\n  },\n  "intervals": [\n    "2013-01-01T00:00:00.000/2013-01-03T00:00:00.000"\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"There are several main parts to a search query:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"property"}),(0,i.jsx)(n.th,{children:"description"}),(0,i.jsx)(n.th,{children:"required?"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"queryType"}),(0,i.jsx)(n.td,{children:'This String should always be "search"; this is the first thing Apache Druid looks at to figure out how to interpret the query.'}),(0,i.jsx)(n.td,{children:"yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"dataSource"}),(0,i.jsxs)(n.td,{children:["A String or Object defining the data source to query, very similar to a table in a relational database. See ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource",children:"DataSource"})," for more information."]}),(0,i.jsx)(n.td,{children:"yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"granularity"}),(0,i.jsxs)(n.td,{children:["Defines the granularity of the query. See ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/granularities",children:"Granularities"}),"."]}),(0,i.jsxs)(n.td,{children:["no (default to ",(0,i.jsx)(n.code,{children:"all"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"filter"}),(0,i.jsxs)(n.td,{children:["See ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/filters",children:"Filters"}),"."]}),(0,i.jsx)(n.td,{children:"no"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"limit"}),(0,i.jsx)(n.td,{children:"Defines the maximum number per Historical process (parsed as int) of search results to return."}),(0,i.jsx)(n.td,{children:"no (default to 1000)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"intervals"}),(0,i.jsx)(n.td,{children:"A JSON Object representing ISO-8601 Intervals. This defines the time ranges to run the query over."}),(0,i.jsx)(n.td,{children:"yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"searchDimensions"}),(0,i.jsx)(n.td,{children:"The dimensions to run the search over. Excluding this means the search is run over all dimensions."}),(0,i.jsx)(n.td,{children:"no"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"virtualColumns"}),(0,i.jsxs)(n.td,{children:["A JSON list of ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/virtual-columns",children:"virtual columns"})," available to use in ",(0,i.jsx)(n.code,{children:"searchDimensions"}),"."]}),(0,i.jsx)(n.td,{children:"no (default none)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"query"}),(0,i.jsxs)(n.td,{children:["See ",(0,i.jsx)(n.a,{href:"#searchqueryspec",children:"SearchQuerySpec"}),"."]}),(0,i.jsx)(n.td,{children:"yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"sort"}),(0,i.jsxs)(n.td,{children:["An object specifying how the results of the search should be sorted.",(0,i.jsx)("br",{}),'Possible types are "lexicographic" (the default sort), "alphanumeric", "strlen", and "numeric".',(0,i.jsx)("br",{}),"See ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/sorting-orders",children:"Sorting Orders"})," for more details."]}),(0,i.jsx)(n.td,{children:"no"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"context"}),(0,i.jsxs)(n.td,{children:["See ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/query-context",children:"Context"})]}),(0,i.jsx)(n.td,{children:"no"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"The format of the result is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "timestamp": "2013-01-01T00:00:00.000Z",\n    "result": [\n      {\n        "dimension": "dim1",\n        "value": "Ke$ha",\n        "count": 3\n      },\n      {\n        "dimension": "dim2",\n        "value": "Ke$haForPresident",\n        "count": 1\n      }\n    ]\n  },\n  {\n    "timestamp": "2013-01-02T00:00:00.000Z",\n    "result": [\n      {\n        "dimension": "dim1",\n        "value": "SomethingThatContainsKe",\n        "count": 1\n      },\n      {\n        "dimension": "dim2",\n        "value": "SomethingElseThatContainsKe",\n        "count": 2\n      }\n    ]\n  }\n]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-details",children:"Implementation details"}),"\n",(0,i.jsx)(n.h4,{id:"strategies",children:"Strategies"}),"\n",(0,i.jsx)(n.p,{children:'Search queries can be executed using two different strategies. The default strategy is determined by the\n"druid.query.search.searchStrategy" runtime property on the Broker. This can be overridden using "searchStrategy" in the\nquery context. If neither the context field nor the property is set, the "useIndexes" strategy will be used.'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'"useIndexes" strategy, the default, first categorizes search dimensions into two groups according to their support for\nbitmap indexes. And then, it applies index-only and cursor-based execution plans to the group of dimensions supporting\nbitmaps and others, respectively. The index-only plan uses only indexes for search query processing. For each dimension,\nit reads the bitmap index for each dimension value, evaluates the search predicate, and finally checks the time interval\nand filter predicates. For the cursor-based execution plan, please refer to the "cursorOnly" strategy. The index-only\nplan shows low performance for the search dimensions of large cardinality which means most values of search dimensions\nare unique.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'"cursorOnly" strategy generates a cursor-based execution plan. This plan creates a cursor which reads a row from a\nqueryableIndexSegment, and then evaluates search predicates. If some filters support bitmap indexes, the cursor can read\nonly the rows which satisfy those filters, thereby saving I/O cost. However, it might be slow with filters of low selectivity.'}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"server-configuration",children:"Server configuration"}),"\n",(0,i.jsx)(n.p,{children:"The following runtime properties apply:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Default"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"druid.query.search.searchStrategy"})}),(0,i.jsx)(n.td,{children:"Default search query strategy."}),(0,i.jsx)(n.td,{children:"useIndexes"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"query-context",children:"Query context"}),"\n",(0,i.jsx)(n.p,{children:"The following query context parameters apply:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"searchStrategy"})}),(0,i.jsxs)(n.td,{children:["Overrides the value of ",(0,i.jsx)(n.code,{children:"druid.query.search.searchStrategy"})," for this query."]})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"searchqueryspec",children:"SearchQuerySpec"}),"\n",(0,i.jsx)(n.h3,{id:"insensitive_contains",children:(0,i.jsx)(n.code,{children:"insensitive_contains"})}),"\n",(0,i.jsx)(n.p,{children:'If any part of a dimension value contains the value specified in this search query spec, regardless of case, a "match" occurs. The grammar is:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "type"  : "insensitive_contains",\n  "value" : "some_value"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"fragment",children:(0,i.jsx)(n.code,{children:"fragment"})}),"\n",(0,i.jsx)(n.p,{children:'If any part of a dimension value contains all the values specified in this search query spec, regardless of case by default, a "match" occurs. The grammar is:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "type" : "fragment",\n  "case_sensitive" : false,\n  "values" : ["fragment1", "fragment2"]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"contains",children:(0,i.jsx)(n.code,{children:"contains"})}),"\n",(0,i.jsx)(n.p,{children:'If any part of a dimension value contains the value specified in this search query spec, a "match" occurs. The grammar is:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "type"  : "contains",\n  "case_sensitive" : true,\n  "value" : "some_value"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"regex",children:(0,i.jsx)(n.code,{children:"regex"})}),"\n",(0,i.jsx)(n.p,{children:'If any part of a dimension value contains the pattern specified in this search query spec, a "match" occurs. The grammar is:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "type"  : "regex",\n  "pattern" : "some_pattern"\n}\n'})})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);