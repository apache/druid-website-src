"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5382],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>i});var t=n(96540);const r={},d=t.createContext(r);function o(e){const s=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(d.Provider,{value:s},e.children)}},58568:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"development/extensions-core/postgresql","title":"PostgreSQL metadata store","description":"\x3c!--","source":"@site/docs/33.0.0/development/extensions-core/postgresql.md","sourceDirName":"development/extensions-core","slug":"/development/extensions-core/postgresql","permalink":"/docs/33.0.0/development/extensions-core/postgresql","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"postgresql","title":"PostgreSQL metadata store"}}');var r=n(74848),d=n(28453);const o={id:"postgresql",title:"PostgreSQL metadata store"},i=void 0,a={},l=[{value:"Set up PostgreSQL",id:"set-up-postgresql",level:2},{value:"Configuration properties",id:"configuration-properties",level:2},{value:"PostgreSQL input source",id:"postgresql-input-source",level:2}];function c(e){const s={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["To use this Apache Druid extension, ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/configuration/extensions#loading-extensions",children:"include"})," ",(0,r.jsx)(s.code,{children:"postgresql-metadata-storage"})," in the extensions load list."]}),"\n",(0,r.jsx)(s.p,{children:"With the  PostgreSQL extension, you can use PostgreSQL as a metadata store or ingest from a PostgreSQL database."}),"\n",(0,r.jsx)(s.h2,{id:"set-up-postgresql",children:"Set up PostgreSQL"}),"\n",(0,r.jsx)(s.p,{children:"To avoid issues with upgrades that require schema changes to a large metadata table, consider a PostgreSQL version that supports instant ADD COLUMN semantics."}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Install PostgreSQL"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Use your favorite package manager to install PostgreSQL, e.g.:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["on Ubuntu/Debian using apt ",(0,r.jsx)(s.code,{children:"apt-get install postgresql"})]}),"\n",(0,r.jsxs)(s.li,{children:["on OS X, using ",(0,r.jsx)(s.a,{href:"http://brew.sh/",children:"Homebrew"})," ",(0,r.jsx)(s.code,{children:"brew install postgresql"})]}),"\n"]}),"\n",(0,r.jsxs)(s.ol,{start:"2",children:["\n",(0,r.jsx)(s.li,{children:"Create a druid database and user"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"On the machine where PostgreSQL is installed, using an account with proper\npostgresql permissions:"}),"\n",(0,r.jsxs)(s.p,{children:["Create a druid user, enter ",(0,r.jsx)(s.code,{children:"diurd"})," when prompted for the password."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"createuser druid -P\n"})}),"\n",(0,r.jsx)(s.p,{children:"Create a druid database owned by the user we just created"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"createdb druid -O druid\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"Note:"})," On Ubuntu / Debian you may have to prefix the ",(0,r.jsx)(s.code,{children:"createuser"})," and\n",(0,r.jsx)(s.code,{children:"createdb"})," commands with ",(0,r.jsx)(s.code,{children:"sudo -u postgres"})," in order to gain proper\npermissions."]}),"\n",(0,r.jsxs)(s.ol,{start:"3",children:["\n",(0,r.jsx)(s.li,{children:"Configure your Druid metadata storage extension:"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Add the following parameters to your Druid configuration, replacing ",(0,r.jsx)(s.code,{children:"<host>"}),"\nwith the location (host name and port) of the database."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-properties",children:'druid.extensions.loadList=["postgresql-metadata-storage"]\ndruid.metadata.storage.type=postgresql\ndruid.metadata.storage.connector.connectURI=jdbc:postgresql://<host>/druid\ndruid.metadata.storage.connector.user=druid\ndruid.metadata.storage.connector.password=diurd\n'})}),"\n",(0,r.jsx)(s.h2,{id:"configuration-properties",children:"Configuration properties"}),"\n",(0,r.jsxs)(s.p,{children:["In most cases, the configuration options map directly to the ",(0,r.jsx)(s.a,{href:"https://jdbc.postgresql.org/documentation/use/#connecting-to-the-database",children:"postgres JDBC connection options"}),"."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Property"}),(0,r.jsx)(s.th,{children:"Description"}),(0,r.jsx)(s.th,{children:"Default"}),(0,r.jsx)(s.th,{children:"Required"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.useSSL"})}),(0,r.jsx)(s.td,{children:"Enables SSL"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"false"})}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslPassword"})}),(0,r.jsxs)(s.td,{children:["The ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/operations/password-provider",children:"Password Provider"})," or String password for the client's key."]}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslFactory"})}),(0,r.jsxs)(s.td,{children:["The class name to use as the ",(0,r.jsx)(s.code,{children:"SSLSocketFactory"})]}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslFactoryArg"})}),(0,r.jsx)(s.td,{children:"An optional argument passed to the sslFactory's constructor"}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslMode"})}),(0,r.jsx)(s.td,{children:'The sslMode. Possible values are "disable", "require", "verify-ca", "verify-full", "allow" and "prefer"'}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslCert"})}),(0,r.jsx)(s.td,{children:"The full path to the certificate file."}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslKey"})}),(0,r.jsx)(s.td,{children:"The full path to the key file."}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslRootCert"})}),(0,r.jsx)(s.td,{children:"The full path to the root certificate."}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslHostNameVerifier"})}),(0,r.jsx)(s.td,{children:"The classname of the hostname verifier."}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.ssl.sslPasswordCallback"})}),(0,r.jsx)(s.td,{children:"The classname of the SSL password provider."}),(0,r.jsx)(s.td,{children:"none"}),(0,r.jsx)(s.td,{children:"no"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"druid.metadata.postgres.dbTableSchema"})}),(0,r.jsx)(s.td,{children:"druid meta table schema"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"public"})}),(0,r.jsx)(s.td,{children:"no"})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"postgresql-input-source",children:"PostgreSQL input source"}),"\n",(0,r.jsxs)(s.p,{children:["The PostgreSQL extension provides an implementation of an SQL input source to ingest data into Druid from a PostgreSQL database.\nFor more information on the input source parameters, see ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/ingestion/input-sources#sql-input-source",children:"SQL input source"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "type": "index_parallel",\n  "spec": {\n    "dataSchema": {\n      "dataSource": "some_datasource",\n      "dimensionsSpec": {\n        "dimensionExclusions": [],\n        "dimensions": [\n          "dim1",\n          "dim2",\n          "dim3"\n        ]\n      },\n      "timestampSpec": {\n        "format": "auto",\n        "column": "ts"\n      },\n      "metricsSpec": [],\n      "granularitySpec": {\n        "type": "uniform",\n        "segmentGranularity": "DAY",\n        "queryGranularity": {\n          "type": "none"\n        },\n        "rollup": false,\n        "intervals": null\n      },\n      "transformSpec": {\n        "filter": null,\n        "transforms": []\n      }\n    },\n    "ioConfig": {\n      "type": "index_parallel",\n      "inputSource": {\n        "type": "sql",\n        "database": {\n          "type": "postgresql",\n          "connectorConfig": {\n            "connectURI": "jdbc:postgresql://some-rds-host.us-west-1.rds.amazonaws.com:5432/druid",\n            "user": "admin",\n            "password": "secret"\n          }\n        },\n        "sqls": [\n          "SELECT * FROM some_table"\n        ]\n      },\n      "inputFormat": {\n        "type": "json"\n      }\n    },\n    "tuningConfig": {\n      "type": "index_parallel"\n    }\n  }\n}\n'})})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);