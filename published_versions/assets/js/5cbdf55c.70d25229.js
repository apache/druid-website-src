"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7934],{9842:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"design/extensions-contrib/dropwizard","title":"Dropwizard metrics emitter","description":"\x3c!--","source":"@site/docs/latest/design/extensions-contrib/dropwizard.md","sourceDirName":"design/extensions-contrib","slug":"/design/extensions-contrib/dropwizard","permalink":"/docs/latest/design/extensions-contrib/dropwizard","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"layout":"doc_page","title":"Dropwizard metrics emitter"}}');var s=t(74848),r=t(28453);const o={layout:"doc_page",title:"Dropwizard metrics emitter"},d="Dropwizard Emitter",a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Druid to Dropwizard Event Conversion",id:"druid-to-dropwizard-event-conversion",level:3},{value:"Supported Dropwizard reporters",id:"supported-dropwizard-reporters",level:3},{value:"JMX Reporter",id:"jmx-reporter",level:4},{value:"Console Reporter",id:"console-reporter",level:4},{value:"Default Metrics Mapping",id:"default-metrics-mapping",level:3}];function m(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"dropwizard-emitter",children:"Dropwizard Emitter"})}),"\n",(0,s.jsxs)(e.p,{children:["To use this extension, make sure to ",(0,s.jsx)(e.a,{href:"/docs/latest/configuration/extensions#loading-extensions",children:"include"})," ",(0,s.jsx)(e.code,{children:"dropwizard-emitter"})," in the extensions load list."]}),"\n",(0,s.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(e.p,{children:["This extension integrates ",(0,s.jsx)(e.a,{href:"http://metrics.dropwizard.io/3.1.0/getting-started/#",children:"Dropwizard"})," metrics library with druid so that dropwizard users can easily absorb druid into their monitoring ecosystem.\nIt accumulates druid metrics as dropwizard metrics, and emits them to various sinks via dropwizard supported reporters.\nCurrently supported dropwizard metrics types counter, gauge, meter, timer and histogram.\nThese metrics can be emitted using either Console or JMX reporter."]}),"\n",(0,s.jsx)(e.p,{children:"To use this emitter, set"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"druid.emitter=dropwizard\n"})}),"\n",(0,s.jsx)(e.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(e.p,{children:["All the configuration parameters for Dropwizard emitter are under ",(0,s.jsx)(e.code,{children:"druid.emitter.dropwizard"}),"."]}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"property"}),(0,s.jsx)(e.th,{children:"description"}),(0,s.jsx)(e.th,{children:"required?"}),(0,s.jsx)(e.th,{children:"default"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"druid.emitter.dropwizard.reporters"})}),(0,s.jsxs)(e.td,{children:["List of dropwizard reporters to be used. Here is a list of ",(0,s.jsx)(e.a,{href:"#supported-dropwizard-reporters",children:"Supported Reporters"})]}),(0,s.jsx)(e.td,{children:"yes"}),(0,s.jsx)(e.td,{children:"none"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"druid.emitter.dropwizard.prefix"})}),(0,s.jsx)(e.td,{children:"Optional prefix to be used for metrics name"}),(0,s.jsx)(e.td,{children:"no"}),(0,s.jsx)(e.td,{children:"none"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"druid.emitter.dropwizard.includeHost"})}),(0,s.jsx)(e.td,{children:"Flag to include the host and port as part of the metric name."}),(0,s.jsx)(e.td,{children:"no"}),(0,s.jsx)(e.td,{children:"yes"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"druid.emitter.dropwizard.dimensionMapPath"})}),(0,s.jsx)(e.td,{children:"Path to JSON file defining the dropwizard metric type, and desired dimensions for every Druid metric"}),(0,s.jsx)(e.td,{children:"no"}),(0,s.jsx)(e.td,{children:"Default mapping provided. See below."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"druid.emitter.dropwizard.alertEmitters"})}),(0,s.jsx)(e.td,{children:"List of emitters where alerts will be forwarded to."}),(0,s.jsx)(e.td,{children:"no"}),(0,s.jsx)(e.td,{children:"empty list (no forwarding)"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"druid.emitter.dropwizard.maxMetricsRegistrySize"})}),(0,s.jsx)(e.td,{children:"Maximum size of metrics registry to be cached at any time."}),(0,s.jsx)(e.td,{children:"no"}),(0,s.jsx)(e.td,{children:"100 Mb"})]})]})]}),"\n",(0,s.jsx)(e.h3,{id:"druid-to-dropwizard-event-conversion",children:"Druid to Dropwizard Event Conversion"}),"\n",(0,s.jsxs)(e.p,{children:["Each metric emitted using Dropwizard must specify a type, one of ",(0,s.jsx)(e.code,{children:"[timer, counter, guage, meter, histogram]"}),". Dropwizard Emitter expects this mapping to\nbe provided as a JSON file.  Additionally, this mapping specifies which dimensions should be included for each metric.\nIf the user does not specify their own JSON file, a ",(0,s.jsx)(e.a,{href:"#default-metrics-mapping",children:"default mapping"})," is used.\nAll metrics are expected to be mapped. Metrics which are not mapped will be ignored.\nDropwizard metric path is organized using the following schema:"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.code,{children:'<druid metric name> : { "dimensions" : <dimension list>, "type" : <Dropwizard metric type>, "timeUnit" : <For timers, timeunit in which metric is emitted>}'})}),"\n",(0,s.jsx)(e.p,{children:"e.g."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'"query/time" : { "dimensions" : ["dataSource", "type"], "type" : "timer", "timeUnit": "MILLISECONDS"},\n"segment/scan/pending" : { "dimensions" : [], "type" : "gauge"}\n'})}),"\n",(0,s.jsx)(e.p,{children:"For most use-cases, the default mapping is sufficient."}),"\n",(0,s.jsx)(e.h3,{id:"supported-dropwizard-reporters",children:"Supported Dropwizard reporters"}),"\n",(0,s.jsx)(e.h4,{id:"jmx-reporter",children:"JMX Reporter"}),"\n",(0,s.jsx)(e.p,{children:"Used to report druid metrics via JMX."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'\ndruid.emitter.dropwizard.reporters=[{"type":"jmx"}]\n\n'})}),"\n",(0,s.jsx)(e.h4,{id:"console-reporter",children:"Console Reporter"}),"\n",(0,s.jsx)(e.p,{children:"Used to print Druid Metrics to console logs."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'\ndruid.emitter.dropwizard.reporters=[{"type":"console","emitIntervalInSecs":30}"}]\n\n'})}),"\n",(0,s.jsx)(e.h3,{id:"default-metrics-mapping",children:"Default Metrics Mapping"}),"\n",(0,s.jsxs)(e.p,{children:["Latest default metrics mapping can be found [here] (",(0,s.jsx)(e.a,{href:"https://github.com/apache/druid/blob/master/extensions-contrib/dropwizard-emitter/src/main/resources/defaultMetricDimensions.json",children:"https://github.com/apache/druid/blob/master/extensions-contrib/dropwizard-emitter/src/main/resources/defaultMetricDimensions.json"}),")"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "query/time": {\n    "dimensions": [\n      "dataSource",\n      "type"\n    ],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "query/node/time": {\n    "dimensions": [\n      "server"\n    ],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "query/node/ttfb": {\n    "dimensions": [\n      "server"\n    ],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "query/segment/time": {\n    "dimensions": [],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "query/wait/time": {\n    "dimensions": [],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "segment/scan/pending": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "segment/scan/active": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/segmentAndCache/time": {\n    "dimensions": [],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "query/cpu/time": {\n    "dimensions": [\n      "dataSource",\n      "type"\n    ],\n    "type": "timer",\n    "timeUnit": "NANOSECONDS"\n  },\n  "query/cache/delta/numEntries": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/delta/sizeBytes": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/delta/hits": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/delta/misses": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/delta/evictions": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/delta/hitRate": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/delta/averageBytes": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/delta/timeouts": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/delta/errors": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "query/cache/total/numEntries": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/cache/total/sizeBytes": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/cache/total/hits": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/cache/total/misses": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/cache/total/evictions": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/cache/total/hitRate": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/cache/total/averageBytes": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/cache/total/timeouts": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "query/cache/total/errors": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "ingest/events/thrownAway": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "counter"\n  },\n  "ingest/events/unparseable": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "counter"\n  },\n  "ingest/events/duplicate": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "counter"\n  },\n  "ingest/events/processed": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "counter"\n  },\n  "ingest/rows/output": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "counter"\n  },\n  "ingest/persist/counter": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "counter"\n  },\n  "ingest/persist/time": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "ingest/persist/cpu": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "timer",\n    "timeUnit": "NANOSECONDS"\n  },\n  "ingest/persist/backPressure": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "gauge"\n  },\n  "ingest/persist/failed": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "counter"\n  },\n  "ingest/handoff/failed": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "counter"\n  },\n  "ingest/merge/time": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "ingest/merge/cpu": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "timer",\n    "timeUnit": "NANOSECONDS"\n  },\n  "task/run/time": {\n    "dimensions": [\n      "dataSource",\n      "taskType"\n    ],\n    "type": "timer",\n    "timeUnit": "MILLISECONDS"\n  },\n  "segment/added/bytes": {\n    "dimensions": [\n      "dataSource",\n      "taskType"\n    ],\n    "type": "counter"\n  },\n  "segment/moved/bytes": {\n    "dimensions": [\n      "dataSource",\n      "taskType"\n    ],\n    "type": "counter"\n  },\n  "segment/nuked/bytes": {\n    "dimensions": [\n      "dataSource",\n      "taskType"\n    ],\n    "type": "counter"\n  },\n  "segment/assigned/counter": {\n    "dimensions": [\n      "tier"\n    ],\n    "type": "counter"\n  },\n  "segment/moved/counter": {\n    "dimensions": [\n      "tier"\n    ],\n    "type": "counter"\n  },\n  "segment/dropped/counter": {\n    "dimensions": [\n      "tier"\n    ],\n    "type": "counter"\n  },\n  "segment/deleted/counter": {\n    "dimensions": [\n      "tier"\n    ],\n    "type": "counter"\n  },\n  "segment/unneeded/counter": {\n    "dimensions": [\n      "tier"\n    ],\n    "type": "counter"\n  },\n  "segment/cost/raw": {\n    "dimensions": [\n      "tier"\n    ],\n    "type": "counter"\n  },\n  "segment/cost/normalization": {\n    "dimensions": [\n      "tier"\n    ],\n    "type": "counter"\n  },\n  "segment/cost/normalized": {\n    "dimensions": [\n      "tier"\n    ],\n    "type": "counter"\n  },\n  "segment/loadQueue/size": {\n    "dimensions": [\n      "server"\n    ],\n    "type": "gauge"\n  },\n  "segment/loadQueue/failed": {\n    "dimensions": [\n      "server"\n    ],\n    "type": "gauge"\n  },\n  "segment/loadQueue/counter": {\n    "dimensions": [\n      "server"\n    ],\n    "type": "gauge"\n  },\n  "segment/dropQueue/counter": {\n    "dimensions": [\n      "server"\n    ],\n    "type": "gauge"\n  },\n  "segment/size": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "gauge"\n  },\n  "segment/overShadowed/counter": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "segment/max": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "segment/used": {\n    "dimensions": [\n      "dataSource",\n      "tier",\n      "priority"\n    ],\n    "type": "gauge"\n  },\n  "segment/usedPercent": {\n    "dimensions": [\n      "dataSource",\n      "tier",\n      "priority"\n    ],\n    "type": "gauge"\n  },\n  "jvm/pool/committed": {\n    "dimensions": [\n      "poolKind",\n      "poolName"\n    ],\n    "type": "gauge"\n  },\n  "jvm/pool/init": {\n    "dimensions": [\n      "poolKind",\n      "poolName"\n    ],\n    "type": "gauge"\n  },\n  "jvm/pool/max": {\n    "dimensions": [\n      "poolKind",\n      "poolName"\n    ],\n    "type": "gauge"\n  },\n  "jvm/pool/used": {\n    "dimensions": [\n      "poolKind",\n      "poolName"\n    ],\n    "type": "gauge"\n  },\n  "jvm/bufferpool/counter": {\n    "dimensions": [\n      "bufferpoolName"\n    ],\n    "type": "gauge"\n  },\n  "jvm/bufferpool/used": {\n    "dimensions": [\n      "bufferpoolName"\n    ],\n    "type": "gauge"\n  },\n  "jvm/bufferpool/capacity": {\n    "dimensions": [\n      "bufferpoolName"\n    ],\n    "type": "gauge"\n  },\n  "jvm/mem/init": {\n    "dimensions": [\n      "memKind"\n    ],\n    "type": "gauge"\n  },\n  "jvm/mem/max": {\n    "dimensions": [\n      "memKind"\n    ],\n    "type": "gauge"\n  },\n  "jvm/mem/used": {\n    "dimensions": [\n      "memKind"\n    ],\n    "type": "gauge"\n  },\n  "jvm/mem/committed": {\n    "dimensions": [\n      "memKind"\n    ],\n    "type": "gauge"\n  },\n  "jvm/gc/counter": {\n    "dimensions": [\n      "gcName",\n      "gcGen"\n    ],\n    "type": "counter"\n  },\n  "jvm/gc/cpu": {\n    "dimensions": [\n      "gcName",\n      "gcGen"\n    ],\n    "type": "timer",\n    "timeUnit": "NANOSECONDS"\n  },\n  "ingest/events/buffered": {\n    "dimensions": [\n      "serviceName",\n      "bufferCapacity"\n    ],\n    "type": "gauge"\n  },\n  "sys/swap/free": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "sys/swap/max": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "sys/swap/pageIn": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "sys/swap/pageOut": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "sys/disk/write/counter": {\n    "dimensions": [\n      "fsDevName"\n    ],\n    "type": "counter"\n  },\n  "sys/disk/read/counter": {\n    "dimensions": [\n      "fsDevName"\n    ],\n    "type": "counter"\n  },\n  "sys/disk/write/size": {\n    "dimensions": [\n      "fsDevName"\n    ],\n    "type": "counter"\n  },\n  "sys/disk/read/size": {\n    "dimensions": [\n      "fsDevName"\n    ],\n    "type": "counter"\n  },\n  "sys/net/write/size": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "sys/net/read/size": {\n    "dimensions": [],\n    "type": "counter"\n  },\n  "sys/fs/used": {\n    "dimensions": [\n      "fsDevName",\n      "fsDirName",\n      "fsTypeName",\n      "fsSysTypeName",\n      "fsOptions"\n    ],\n    "type": "gauge"\n  },\n  "sys/fs/max": {\n    "dimensions": [\n      "fsDevName",\n      "fsDirName",\n      "fsTypeName",\n      "fsSysTypeName",\n      "fsOptions"\n    ],\n    "type": "gauge"\n  },\n  "sys/mem/used": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "sys/mem/max": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "sys/storage/used": {\n    "dimensions": [\n      "fsDirName"\n    ],\n    "type": "gauge"\n  },\n  "sys/cpu": {\n    "dimensions": [\n      "cpuName",\n      "cpuTime"\n    ],\n    "type": "gauge"\n  },\n  "coordinator-segment/counter": {\n    "dimensions": [\n      "dataSource"\n    ],\n    "type": "gauge"\n  },\n  "historical-segment/counter": {\n    "dimensions": [\n      "dataSource",\n      "tier",\n      "priority"\n    ],\n    "type": "gauge"\n  },\n  "jetty/numOpenConnections": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "jetty/threadPool/total": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "jetty/threadPool/idle": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "jetty/threadPool/busy": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "jetty/threadPool/isLowOnThreads": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "jetty/threadPool/min": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "jetty/threadPool/max": {\n    "dimensions": [],\n    "type": "gauge"\n  },\n  "jetty/threadPool/queueSize": {\n    "dimensions": [],\n    "type": "gauge"\n  }\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(m,{...n})}):m(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>d});var i=t(96540);const s={},r=i.createContext(s);function o(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);