"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[77],{28453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>c});var n=a(96540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}},31648:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"data-management/schema-changes","title":"Schema changes","description":"\x3c!--","source":"@site/docs/33.0.0/data-management/schema-changes.md","sourceDirName":"data-management","slug":"/data-management/schema-changes","permalink":"/docs/33.0.0/data-management/schema-changes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"schema-changes","title":"Schema changes"},"sidebar":"docs","previous":{"title":"Data deletion","permalink":"/docs/33.0.0/data-management/delete"},"next":{"title":"Compaction","permalink":"/docs/33.0.0/data-management/compaction"}}');var s=a(74848),i=a(28453);const o={id:"schema-changes",title:"Schema changes"},c=void 0,r={},d=[{value:"For new data",id:"for-new-data",level:2},{value:"For existing data",id:"for-existing-data",level:2}];function m(e){const t={a:"a",h2:"h2",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"for-new-data",children:"For new data"}),"\n",(0,s.jsxs)(t.p,{children:["Apache Druid allows you to provide a new schema for new data without the need to update the schema of any existing data.\nIt is sufficient to update your supervisor spec, if using ",(0,s.jsx)(t.a,{href:"/docs/33.0.0/ingestion/#streaming",children:"streaming ingestion"}),", or to\nprovide the new schema the next time you do a ",(0,s.jsx)(t.a,{href:"/docs/33.0.0/ingestion/#batch",children:"batch ingestion"}),". This is made possible by\nthe fact that each ",(0,s.jsx)(t.a,{href:"/docs/33.0.0/design/segments",children:"segment"}),", at the time it is created, stores a\ncopy of its own schema. Druid reconciles all of these individual segment schemas automatically at query time."]}),"\n",(0,s.jsx)(t.h2,{id:"for-existing-data",children:"For existing data"}),"\n",(0,s.jsxs)(t.p,{children:["Schema changes are sometimes necessary for existing data. For example, you may want to change the type of a column in\npreviously-ingested data, or drop a column entirely. Druid handles this using ",(0,s.jsx)(t.a,{href:"/docs/33.0.0/data-management/update",children:"reindexing"}),", the same method\nit uses to handle updates of existing data. Reindexing involves rewriting all affected segments and can be a\ntime-consuming operation."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);