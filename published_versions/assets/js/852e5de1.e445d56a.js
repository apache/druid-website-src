"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9788],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var i=r(96540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},90043:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"querying/sql","title":"Druid SQL overview","description":"\x3c!--","source":"@site/docs/33.0.0/querying/sql.md","sourceDirName":"querying","slug":"/querying/sql","permalink":"/docs/33.0.0/querying/sql","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"sql","title":"Druid SQL overview","sidebar_label":"Overview and syntax"},"sidebar":"docs","previous":{"title":"Manual compaction","permalink":"/docs/33.0.0/data-management/manual-compaction"},"next":{"title":"All functions","permalink":"/docs/33.0.0/querying/sql-functions"}}');var s=r(74848),t=r(28453);const l={id:"sql",title:"Druid SQL overview",sidebar_label:"Overview and syntax"},d=void 0,a={},o=[{value:"Syntax",id:"syntax",level:2},{value:"FROM",id:"from",level:2},{value:"PIVOT",id:"pivot",level:2},{value:"UNPIVOT",id:"unpivot",level:2},{value:"UNNEST",id:"unnest",level:2},{value:"WHERE",id:"where",level:2},{value:"GROUP BY",id:"group-by",level:2},{value:"HAVING",id:"having",level:2},{value:"ORDER BY",id:"order-by",level:2},{value:"LIMIT",id:"limit",level:2},{value:"OFFSET",id:"offset",level:2},{value:"UNION ALL",id:"union-all",level:2},{value:"Top-level",id:"top-level",level:3},{value:"Table-level",id:"table-level",level:3},{value:"EXPLAIN PLAN",id:"explain-plan",level:2},{value:"Identifiers and literals",id:"identifiers-and-literals",level:2},{value:"Dynamic parameters",id:"dynamic-parameters",level:2},{value:"Reserved keywords",id:"reserved-keywords",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Apache Druid supports two query languages: Druid SQL and ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/",children:"native queries"}),".\nThis document describes the SQL language."]})}),"\n",(0,s.jsxs)(n.p,{children:["You can query data in Druid datasources using Druid SQL. Druid translates SQL queries into its ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/",children:"native query language"}),". To learn about translation and how to get the best performance from Druid SQL, see ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-translation",children:"SQL query translation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Druid SQL planning occurs on the Broker.\nSet ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/configuration/#sql",children:"Broker runtime properties"})," to configure the query plan and JDBC querying."]}),"\n",(0,s.jsxs)(n.p,{children:["For information on permissions needed to make SQL queries, see ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/operations/security-user-auth#sql-permissions",children:"Defining SQL permissions"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This topic introduces Druid SQL syntax.\nFor more information and SQL querying options see:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-data-types",children:"Data types"})," for a list of supported data types for Druid columns."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-aggregations",children:"Aggregation functions"})," for a list of aggregation functions available for Druid SQL SELECT statements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-scalar",children:"Scalar functions"})," for Druid SQL scalar functions including numeric and string functions, IP address functions, Sketch functions, and more."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-multivalue-string-functions",children:"SQL multi-value string functions"})," for operations you can perform on string dimensions containing multiple values."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-translation",children:"Query translation"})," for information about how Druid translates SQL queries to native queries before running them."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For information about APIs, see:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/api-reference/sql-api",children:"Druid SQL API"})," for information on the HTTP API."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/api-reference/sql-jdbc",children:"SQL JDBC driver API"})," for information about the JDBC driver API."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-query-context",children:"SQL query context"})," for information about the query context parameters that affect SQL planning."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.p,{children:"Druid SQL supports SELECT queries with the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[ EXPLAIN PLAN FOR ]\n[ WITH tableName [ ( column1, column2, ... ) ] AS ( query ) ]\nSELECT [ ALL | DISTINCT ] { * | exprs }\nFROM { <table> | (<subquery>) | <o1> [ INNER | LEFT ] JOIN <o2> ON condition }\n[PIVOT (aggregation_function(column_to_aggregate) FOR column_with_values_to_pivot IN (pivoted_column1 [, pivoted_column2 ...]))]\n[UNPIVOT (values_column FOR names_column IN (unpivoted_column1 [, unpivoted_column2 ... ]))]\n[ CROSS JOIN UNNEST(source_expression) as table_alias_name(column_alias_name) ]\n[ WHERE expr ]\n[ GROUP BY [ exprs | GROUPING SETS ( (exprs), ... ) | ROLLUP (exprs) | CUBE (exprs) ] ]\n[ HAVING expr ]\n[ ORDER BY expr [ ASC | DESC ], expr [ ASC | DESC ], ... ]\n[ LIMIT limit ]\n[ OFFSET offset ]\n[ UNION ALL <another query> ]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"from",children:"FROM"}),"\n",(0,s.jsx)(n.p,{children:"The FROM clause can refer to any of the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource#table",children:"Table datasources"})," from the ",(0,s.jsx)(n.code,{children:"druid"})," schema. This is the default schema, so Druid table\ndatasources can be referenced as either ",(0,s.jsx)(n.code,{children:"druid.dataSourceName"})," or simply ",(0,s.jsx)(n.code,{children:"dataSourceName"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource#lookup",children:"Lookups"})," from the ",(0,s.jsx)(n.code,{children:"lookup"})," schema, for example ",(0,s.jsx)(n.code,{children:"lookup.countries"}),". Note that lookups can\nalso be queried using the ",(0,s.jsxs)(n.a,{href:"/docs/33.0.0/querying/sql-scalar#string-functions",children:[(0,s.jsx)(n.code,{children:"LOOKUP"})," function"]}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource#query",children:"Subqueries"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource#join",children:"Joins"})," between anything in this list, except between native datasources (table, lookup,\nquery) and system tables. The join condition must be an equality between expressions from the left- and right-hand side\nof the join."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-metadata-tables",children:"Metadata tables"})," from the ",(0,s.jsx)(n.code,{children:"INFORMATION_SCHEMA"})," or ",(0,s.jsx)(n.code,{children:"sys"})," schemas. Unlike the other options for the\nFROM clause, metadata tables are not considered datasources. They exist only in the SQL layer."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For more information about table, lookup, query, and join datasources, refer to the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource",children:"Datasources"}),"\ndocumentation."]}),"\n",(0,s.jsx)(n.h2,{id:"pivot",children:"PIVOT"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The PIVOT operator is an ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/development/experimental",children:"experimental feature"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"The PIVOT operator carries out an aggregation and transforms rows into columns in the output."}),"\n",(0,s.jsx)(n.p,{children:"The following is the general syntax for the PIVOT operator. Note that the PIVOT operator is enclosed in parentheses and forms part of the FROM clause of the query."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"PIVOT (aggregation_function(column_to_aggregate)\n  FOR column_with_values_to_pivot\n  IN (pivoted_column1 [, pivoted_column2 ...])\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"PIVOT syntax parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aggregation_function"}),": An aggregation function, such as SUM, COUNT, MIN, MAX, or AVG."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"column_to_aggregate"}),": The source column to be aggregated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"column_with_values_to_pivot"}),": The column that contains values for the pivoted column names."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pivoted_columnN"}),": The list of values to pivot into headers in the output."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The following example demonstrates how to transform ",(0,s.jsx)(n.code,{children:"cityName"})," values into column headers ",(0,s.jsx)(n.code,{children:"ba_sum_deleted"})," and ",(0,s.jsx)(n.code,{children:"ny_sum_deleted"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'SELECT user, channel, ba_sum_deleted, ny_sum_deleted\nFROM "wikipedia"\nPIVOT (SUM(deleted) AS "sum_deleted" FOR "cityName" IN ( \'Buenos Aires\' AS ba, \'New York\' AS ny))\nWHERE ba_sum_deleted IS NOT NULL OR ny_sum_deleted IS NOT NULL\nLIMIT 15\n'})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:" View results "}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"user"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"channel"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"ba_sum_deleted"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"ny_sum_deleted"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"69.86.6.150"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"null"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"190.123.145.147"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#es.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"16"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"190.192.179.192"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"181.230.118.178"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#en.wikipedia"})}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"null"})]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"unpivot",children:"UNPIVOT"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The UNPIVOT operator is an ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/development/experimental",children:"experimental feature"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"The UNPIVOT operator transforms existing column values into rows.\nNote that UNPIVOT isn't the exact reverse operation of PIVOT. The PIVOT operator carries out an aggregation and merges rows as needed. UNPIVOT doesn't reproduce the original rows that have been merged."}),"\n",(0,s.jsx)(n.p,{children:"The following is the general syntax for the UNPIVOT operator. Note that the UNPIVOT operator is enclosed in parentheses and forms part of the FROM clause of the query."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"UNPIVOT (values_column \n  FOR names_column\n  IN (unpivoted_column1 [, unpivoted_column2 ... ])\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"UNPIVOT syntax parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"values_column"}),": The column that contains the values of the unpivoted columns."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"names_column"}),": The column that contains the names of the unpivoted columns."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unpivoted_columnN"}),": The list of columns to transform into rows in the output."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The following example demonstrates how to transform the columns ",(0,s.jsx)(n.code,{children:"added"})," and ",(0,s.jsx)(n.code,{children:"deleted"})," into row values that correspond to a particular ",(0,s.jsx)(n.code,{children:"channel"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'SELECT channel, user, action, SUM(changes) AS total_changes\nFROM "wikipedia" \nUNPIVOT ( changes FOR action IN ("added", "deleted") )\nWHERE channel LIKE \'#ar%\'\nGROUP BY channel, user, action\nLIMIT 15\n'})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:" View results "}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"channel"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"user"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"action"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"total_changes"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"156.202.189.223"}),(0,s.jsx)(n.td,{children:"added"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"156.202.189.223"}),(0,s.jsx)(n.td,{children:"deleted"}),(0,s.jsx)(n.td,{children:"30"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"156.202.76.160"}),(0,s.jsx)(n.td,{children:"added"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"156.202.76.160"}),(0,s.jsx)(n.td,{children:"deleted"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"156.212.124.165"}),(0,s.jsx)(n.td,{children:"added"}),(0,s.jsx)(n.td,{children:"451"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"156.212.124.165"}),(0,s.jsx)(n.td,{children:"deleted"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"160.166.147.167"}),(0,s.jsx)(n.td,{children:"added"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"160.166.147.167"}),(0,s.jsx)(n.td,{children:"deleted"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"185.99.32.50"}),(0,s.jsx)(n.td,{children:"added"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"185.99.32.50"}),(0,s.jsx)(n.td,{children:"deleted"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"197.18.109.148"}),(0,s.jsx)(n.td,{children:"added"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"197.18.109.148"}),(0,s.jsx)(n.td,{children:"deleted"}),(0,s.jsx)(n.td,{children:"24"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"2001:16A2:3C7:6C00:917E:AD28:FAD3:FD5C"})}),(0,s.jsx)(n.td,{children:"added"}),(0,s.jsx)(n.td,{children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"2001:16A2:3C7:6C00:917E:AD28:FAD3:FD5C"})}),(0,s.jsx)(n.td,{children:"deleted"}),(0,s.jsx)(n.td,{children:"0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"#ar.wikipedia"})}),(0,s.jsx)(n.td,{children:"41.108.33.83"}),(0,s.jsx)(n.td,{children:"added"}),(0,s.jsx)(n.td,{children:"0"})]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"unnest",children:"UNNEST"}),"\n",(0,s.jsxs)(n.p,{children:["The UNNEST clause unnests ARRAY typed values. The source for UNNEST can be an array type column, or an input that's been transformed into an array, such as with helper functions like ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-multivalue-string-functions",children:(0,s.jsx)(n.code,{children:"MV_TO_ARRAY"})})," or ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-array-functions",children:(0,s.jsx)(n.code,{children:"ARRAY"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The following is the general syntax for UNNEST, specifically a query that returns the column that gets unnested:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT column_alias_name\nFROM datasource\nCROSS JOIN UNNEST(source_expression1) AS table_alias_name1(column_alias_name1)\nCROSS JOIN UNNEST(source_expression2) AS table_alias_name2(column_alias_name2) ...\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"datasource"})," for UNNEST can be any Druid datasource, such as the following:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A table, such as  ",(0,s.jsx)(n.code,{children:"FROM a_table"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["A subset of a table based on a query, a filter, or a JOIN. For example, ",(0,s.jsx)(n.code,{children:"FROM (SELECT columnA,columnB,columnC from a_table)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"source_expression"})," for the UNNEST function must be an array and can come from any expression. UNNEST works directly on Druid ARRAY typed columns. If the column you are unnesting is a multi-value VARCHAR, you must specify ",(0,s.jsx)(n.code,{children:"MV_TO_ARRAY(dimension)"})," to convert it to an ARRAY type. You can also specify any expression that has an SQL array datatype. For example, you can call UNNEST on the following:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ARRAY[dim1,dim2]"})," if you want to make an array out of two dimensions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ARRAY_CONCAT(dim1,dim2)"})," if you want to concatenate two multi-value dimensions."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"AS table_alias_name(column_alias_name)"})," clause  is not required but is highly recommended. Use it to specify the output, which can be an existing column or a new one. Replace ",(0,s.jsx)(n.code,{children:"table_alias_name"})," and ",(0,s.jsx)(n.code,{children:"column_alias_name"})," with a table and column name you want to alias the unnested results to. If you don't provide this, Druid uses a nondescriptive name, such as ",(0,s.jsx)(n.code,{children:"EXPR$0"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Keep the following things in mind when writing your query:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can unnest multiple source expressions in a single query."}),"\n",(0,s.jsx)(n.li,{children:"Notice the CROSS JOIN between the datasource and the UNNEST function. This is needed in most cases of the UNNEST function. Specifically, it is not needed when you're unnesting an inline array since the array itself is the datasource."}),"\n",(0,s.jsxs)(n.li,{children:["If you view the native explanation of a SQL UNNEST, you'll notice that Druid uses ",(0,s.jsx)(n.code,{children:"j0.unnest"})," as a virtual column to perform the unnest. An underscore is added for each unnest, so you may notice virtual columns named ",(0,s.jsx)(n.code,{children:"_j0.unnest"})," or ",(0,s.jsx)(n.code,{children:"__j0.unnest"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"UNNEST preserves the ordering of the source array that is being unnested."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For examples, see the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/tutorials/tutorial-unnest-arrays",children:"Unnest arrays tutorial"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The UNNEST function has the following limitations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The function does not remove any duplicates or nulls in an array. Nulls will be treated as any other value in an array. If there are multiple nulls within the array, a record corresponding to each of the nulls gets created."}),"\n",(0,s.jsx)(n.li,{children:"Arrays of complex objects inside complex JSON types are not supported."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["UNNEST is the SQL equivalent of the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource#unnest",children:"unnest datasource"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"where",children:"WHERE"}),"\n",(0,s.jsxs)(n.p,{children:["The WHERE clause refers to columns in the FROM table, and will be translated to ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/filters",children:"native filters"}),". The\nWHERE clause can also reference a subquery, like ",(0,s.jsx)(n.code,{children:"WHERE col1 IN (SELECT foo FROM ...)"}),". Queries like this are executed\nas a join on the subquery, described in the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-translation#subqueries",children:"Query translation"})," section."]}),"\n",(0,s.jsxs)(n.p,{children:["Strings and numbers can be compared in the WHERE clause of a SQL query through implicit type conversion.\nFor example, you can evaluate ",(0,s.jsx)(n.code,{children:"WHERE stringDim = 1"})," for a string-typed dimension named ",(0,s.jsx)(n.code,{children:"stringDim"}),".\nHowever, for optimal performance, you should explicitly cast the reference number as a string when comparing against a string dimension:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"WHERE stringDim = '1'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Similarly, if you compare a string-typed dimension with reference to an array of numbers, cast the numbers to strings:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"WHERE stringDim IN ('1', '2', '3')\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note that explicit type casting does not lead to significant performance improvement when comparing strings and numbers involving numeric dimensions since numeric dimensions are not indexed."}),"\n",(0,s.jsx)(n.h2,{id:"group-by",children:"GROUP BY"}),"\n",(0,s.jsxs)(n.p,{children:["The GROUP BY clause refers to columns in the FROM table. Using GROUP BY, DISTINCT, or any aggregation functions will\ntrigger an aggregation query using one of Druid's ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-translation#query-types",children:"three native aggregation query types"}),". GROUP BY\ncan refer to an expression or a select clause ordinal position (like ",(0,s.jsx)(n.code,{children:"GROUP BY 2"})," to group by the second selected\ncolumn)."]}),"\n",(0,s.jsxs)(n.p,{children:["The GROUP BY clause can also refer to multiple grouping sets in three ways. The most flexible is GROUP BY GROUPING SETS,\nfor example ",(0,s.jsx)(n.code,{children:"GROUP BY GROUPING SETS ( (country, city), () )"}),". This example is equivalent to a ",(0,s.jsx)(n.code,{children:"GROUP BY country, city"}),"\nfollowed by ",(0,s.jsx)(n.code,{children:"GROUP BY ()"})," (a grand total). With GROUPING SETS, the underlying data is only scanned one time, leading to\nbetter efficiency. Second, GROUP BY ROLLUP computes a grouping set for each level of the grouping expressions. For\nexample ",(0,s.jsx)(n.code,{children:"GROUP BY ROLLUP (country, city)"})," is equivalent to ",(0,s.jsx)(n.code,{children:"GROUP BY GROUPING SETS ( (country, city), (country), () )"}),"\nand will produce grouped rows for each country / city pair, along with subtotals for each country, along with a grand\ntotal. Finally, GROUP BY CUBE computes a grouping set for each combination of grouping expressions. For example,\n",(0,s.jsx)(n.code,{children:"GROUP BY CUBE (country, city)"})," is equivalent to ",(0,s.jsx)(n.code,{children:"GROUP BY GROUPING SETS ( (country, city), (country), (city), () )"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Grouping columns that do not apply to a particular row will contain ",(0,s.jsx)(n.code,{children:"NULL"}),". For example, when computing\n",(0,s.jsx)(n.code,{children:"GROUP BY GROUPING SETS ( (country, city), () )"}),", the grand total row corresponding to ",(0,s.jsx)(n.code,{children:"()"})," will have ",(0,s.jsx)(n.code,{children:"NULL"}),' for the\n"country" and "city" columns. Column may also be ',(0,s.jsx)(n.code,{children:"NULL"})," if it was ",(0,s.jsx)(n.code,{children:"NULL"})," in the data itself. To differentiate such rows,\nyou can use ",(0,s.jsx)(n.code,{children:"GROUPING"})," aggregation."]}),"\n",(0,s.jsx)(n.p,{children:"When using GROUP BY GROUPING SETS, GROUP BY ROLLUP, or GROUP BY CUBE, be aware that results may not be generated in the\norder that you specify your grouping sets in the query. If you need results to be generated in a particular order, use\nthe ORDER BY clause."}),"\n",(0,s.jsx)(n.h2,{id:"having",children:"HAVING"}),"\n",(0,s.jsx)(n.p,{children:"The HAVING clause refers to columns that are present after execution of GROUP BY. It can be used to filter on either\ngrouping expressions or aggregated values. It can only be used together with GROUP BY."}),"\n",(0,s.jsx)(n.h2,{id:"order-by",children:"ORDER BY"}),"\n",(0,s.jsxs)(n.p,{children:["The ORDER BY clause refers to columns that are present after execution of GROUP BY. It can be used to order the results\nbased on either grouping expressions or aggregated values. ORDER BY can refer to an expression or a select clause\nordinal position (like ",(0,s.jsx)(n.code,{children:"ORDER BY 2"})," to order by the second selected column). For non-aggregation queries, ORDER BY\ncan only order by the ",(0,s.jsx)(n.code,{children:"__time"})," column. For aggregation queries, ORDER BY can order by any column."]}),"\n",(0,s.jsx)(n.h2,{id:"limit",children:"LIMIT"}),"\n",(0,s.jsx)(n.p,{children:"The LIMIT clause limits the number of rows returned. In some situations Druid will push down this limit to data servers,\nwhich boosts performance. Limits are always pushed down for queries that run with the native Scan or TopN query types.\nWith the native GroupBy query type, it is pushed down when ordering on a column that you are grouping by. If you notice\nthat adding a limit doesn't change performance very much, then it's possible that Druid wasn't able to push down the\nlimit for your query."}),"\n",(0,s.jsx)(n.h2,{id:"offset",children:"OFFSET"}),"\n",(0,s.jsx)(n.p,{children:"The OFFSET clause skips a certain number of rows when returning results."}),"\n",(0,s.jsx)(n.p,{children:"If both LIMIT and OFFSET are provided, then OFFSET will be applied first, followed by LIMIT. For example, using\nLIMIT 100 OFFSET 10 will return 100 rows, starting from row number 10."}),"\n",(0,s.jsx)(n.p,{children:"Together, LIMIT and OFFSET can be used to implement pagination. However, note that if the underlying datasource is\nmodified between page fetches, then the different pages will not necessarily align with each other."}),"\n",(0,s.jsx)(n.p,{children:"There are two important factors that can affect the performance of queries that use OFFSET:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Skipped rows still need to be generated internally and then discarded, meaning that raising offsets to high values\ncan cause queries to use additional resources."}),"\n",(0,s.jsxs)(n.li,{children:["OFFSET is only supported by the Scan and GroupBy ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-translation#query-types",children:"native query types"}),". Therefore, a query with OFFSET\nwill use one of those two types, even if it might otherwise have run as a Timeseries or TopN. Switching query engines\nin this way can affect performance."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"union-all",children:"UNION ALL"}),"\n",(0,s.jsx)(n.p,{children:"The UNION ALL operator fuses multiple queries together. Druid SQL supports the UNION ALL operator in two situations: top-level and table-level, as described below. Queries that use UNION ALL in any other way will fail."}),"\n",(0,s.jsx)(n.h3,{id:"top-level",children:"Top-level"}),"\n",(0,s.jsx)(n.p,{children:"In top-level queries, you can use UNION ALL at the very top outer layer of the query - not in a subquery, and not in the FROM clause. The underlying queries run sequentially. Druid concatenates their results so that they appear one after the other."}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"SELECT COUNT(*) FROM tbl WHERE my_column = 'value1'\nUNION ALL\nSELECT COUNT(*) FROM tbl WHERE my_column = 'value2'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Certain limitations apply when you use a top-level UNION ALL. For all top-level UNION ALL queries, you can't apply a GROUP BY, ORDER BY, or any other operator to the results of the query. For any top-level UNION ALL that uses the MSQ task engine, the SQL planner attempts to plan the top-level UNION ALL as a table-level UNION ALL. Because of this, UNION ALL queries that use the MSQ task engine always behave the same as table-level UNION ALL queries. They have the same characteristics and limitations. If the planner can't plan the query as a table-level UNION ALL, the query fails."}),"\n",(0,s.jsx)(n.h3,{id:"table-level",children:"Table-level"}),"\n",(0,s.jsx)(n.p,{children:"In table-level queries, you must use UNION ALL in a subquery in the FROM clause, and create the lower-level subqueries that are inputs to the UNION ALL operator as simple table SELECTs. You can't use features like expressions, column aliasing, JOIN, GROUP BY, or ORDER BY in table-level queries."}),"\n",(0,s.jsxs)(n.p,{children:["The query runs natively using a ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource#union",children:"union datasource"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["At table-level queries, you must select the same columns from each table in the same order, and those columns must either have the same types, or types that can be implicitly cast to each other (such as different numeric types). For this reason, it is generally more robust to write your queries to select specific columns. If you use ",(0,s.jsx)(n.code,{children:"SELECT *"}),", you must modify your queries if a new column is added to one table but not to the others."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"SELECT col1, COUNT(*)\nFROM (\n  SELECT col1, col2, col3 FROM tbl1\n  UNION ALL\n  SELECT col1, col2, col3 FROM tbl2\n)\nGROUP BY col1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["With table-level UNION ALL, the rows from the unioned tables are not guaranteed to process in any particular order. They may process in an interleaved fashion. If you need a particular result ordering, use ",(0,s.jsx)(n.a,{href:"#order-by",children:"ORDER BY"})," on the outer query."]}),"\n",(0,s.jsxs)(n.p,{children:["To reference such unions a ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/datasource#dynamic-table-append",children:"TABLE(APPEND())"})," datasource could also be used:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT col1, COUNT(*) from TABLE(APPEND('tbl1', 'tbl2'))\n"})}),"\n",(0,s.jsx)(n.h2,{id:"explain-plan",children:"EXPLAIN PLAN"}),"\n",(0,s.jsxs)(n.p,{children:['Add "EXPLAIN PLAN FOR" to the beginning of any query to get information about how it will be translated. In this case,\nthe query will not actually be executed. Refer to the ',(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-translation#interpreting-explain-plan-output",children:"Query translation"}),"\ndocumentation for more information on the output of EXPLAIN PLAN."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["For the legacy plan, be careful when interpreting EXPLAIN PLAN output, and use ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/configuration/#request-logging",children:"request logging"})," if in doubt.\nRequest logs show the exact native query that will be run. Alternatively, to see the native query plan, set ",(0,s.jsx)(n.code,{children:"useNativeQueryExplain"})," to true in the query context."]})}),"\n",(0,s.jsx)(n.h2,{id:"identifiers-and-literals",children:"Identifiers and literals"}),"\n",(0,s.jsxs)(n.p,{children:["Identifiers like datasource and column names can optionally be quoted using double quotes. To escape a double quote\ninside an identifier, use another double quote, like ",(0,s.jsx)(n.code,{children:'"My ""very own"" identifier"'}),". All identifiers are case-sensitive\nand no implicit case conversions are performed."]}),"\n",(0,s.jsxs)(n.p,{children:["Literal strings should be quoted with single quotes, like ",(0,s.jsx)(n.code,{children:"'foo'"}),". Literal strings with Unicode escapes can be written\nlike ",(0,s.jsx)(n.code,{children:"U&'fo\\00F6'"}),", where character codes in hex are prefixed by a backslash. Literal numbers can be written in forms\nlike ",(0,s.jsx)(n.code,{children:"100"})," (denoting an integer), ",(0,s.jsx)(n.code,{children:"100.0"})," (denoting a floating point value), or ",(0,s.jsx)(n.code,{children:"1.0e5"})," (scientific notation). Literal\ntimestamps can be written like ",(0,s.jsx)(n.code,{children:"TIMESTAMP '2000-01-01 00:00:00'"}),". Literal intervals, used for time arithmetic, can be\nwritten like ",(0,s.jsx)(n.code,{children:"INTERVAL '1' HOUR"}),", ",(0,s.jsx)(n.code,{children:"INTERVAL '1 02:03' DAY TO MINUTE"}),", ",(0,s.jsx)(n.code,{children:"INTERVAL '1-2' YEAR TO MONTH"}),", and so on."]}),"\n",(0,s.jsx)(n.h2,{id:"dynamic-parameters",children:"Dynamic parameters"}),"\n",(0,s.jsxs)(n.p,{children:["Druid SQL supports dynamic parameters using question mark (",(0,s.jsx)(n.code,{children:"?"}),") syntax, where parameters are bound to ",(0,s.jsx)(n.code,{children:"?"})," placeholders\nat execution time. To use dynamic parameters, replace any literal in the query with a ",(0,s.jsx)(n.code,{children:"?"})," character and provide a\ncorresponding parameter value when you execute the query. Parameters are bound to the placeholders in the order in\nwhich they are passed. Parameters are supported in both the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/api-reference/sql-api",children:"HTTP POST"})," and ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/api-reference/sql-jdbc",children:"JDBC"})," APIs."]}),"\n",(0,s.jsxs)(n.p,{children:["Druid supports double and null values in arrays for dynamic queries.\nThe following example query uses the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-functions#array_contains",children:"ARRAY_CONTAINS"})," function to return ",(0,s.jsx)(n.code,{children:"doubleArrayColumn"})," when the reference array ",(0,s.jsx)(n.code,{children:"[-25.7, null, 36.85]"})," contains all elements of the value of ",(0,s.jsx)(n.code,{children:"doubleArrayColumn"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'{\n   "query": "SELECT doubleArrayColumn from druid.table where ARRAY_CONTAINS(doubleArrayColumn, ?)",\n   "parameters": [\n      {\n        "type": "ARRAY",\n        "value": [-25.7, null, 36.85]\n      }\n   ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In certain cases, using dynamic parameters in expressions can cause type inference issues which cause your query to fail, for example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM druid.foo WHERE dim1 like CONCAT('%', ?, '%')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To solve this issue, explicitly provide the type of the dynamic parameter using the ",(0,s.jsx)(n.code,{children:"CAST"})," keyword. Consider the fix for the preceding example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM druid.foo WHERE dim1 like CONCAT('%', CAST (? AS VARCHAR), '%')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dynamic parameters can even replace arrays, reducing the parsing time. Refer to the parameters in the ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/api-reference/sql-api#request-body",children:"API request body"})," for usage."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT arrayColumn from druid.table where ARRAY_CONTAINS(arrayColumn, ?)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can replace an IN filter with many values by dynamically passing a parameter into ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-functions#scalar_in_array",children:"SCALAR_IN_ARRAY"}),".\nFor example Java queries, see ",(0,s.jsx)(n.a,{href:"/docs/33.0.0/api-reference/sql-jdbc#dynamic-parameters",children:"Dynamic parameters"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT count(city) from druid.table where SCALAR_IN_ARRAY(city, ?)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"reserved-keywords",children:"Reserved keywords"}),"\n",(0,s.jsxs)(n.p,{children:["Druid SQL reserves certain keywords which are used in its query language. Apache Druid inherits all of the reserved keywords from ",(0,s.jsx)(n.a,{href:"https://calcite.apache.org/docs/reference.html#keywords",children:"Apache Calcite"}),". In addition to these, the following reserved keywords are unique to Apache Druid:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"CLUSTERED"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"PARTITIONED"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To use the reserved keywords in queries, enclose them in double quotation marks. For example, the reserved keyword ",(0,s.jsx)(n.strong,{children:"PARTITIONED"})," can be used in a query if and only if it is correctly quoted:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'SELECT "PARTITIONED" from druid.table\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);