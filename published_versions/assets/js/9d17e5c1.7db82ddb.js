"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5658],{17199:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"development/extensions-core/catalog","title":"Catalog","description":"\x3c!--","source":"@site/docs/33.0.0/development/extensions-core/catalog.md","sourceDirName":"development/extensions-core","slug":"/development/extensions-core/catalog","permalink":"/docs/33.0.0/development/extensions-core/catalog","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"catalog","title":"Catalog"}}');var t=r(74848),l=r(28453),a=r(65537),i=r(79329);const d={id:"catalog",title:"Catalog"},o=void 0,c={},h=[{value:"Configuration",id:"configuration",level:2},{value:"Tables",id:"tables",level:2},{value:"API Objects",id:"api-objects",level:3},{value:"TableSpec",id:"tablespec",level:4},{value:"Table Properties",id:"table-properties",level:4},{value:"ColumnSpec",id:"columnspec",level:4},{value:"APIs",id:"apis",level:3},{value:"Create or update a table",id:"create-or-update-a-table",level:4},{value:"URL",id:"url",level:5},{value:"Request body",id:"request-body",level:5},{value:"Query parameters",id:"query-parameters",level:5},{value:"Responses",id:"responses",level:5},{value:"Sample request",id:"sample-request",level:5},{value:"Sample response",id:"sample-response",level:5},{value:"Retrieve a table",id:"retrieve-a-table",level:4},{value:"URL",id:"url-1",level:5},{value:"Responses",id:"responses-1",level:5},{value:"Sample request",id:"sample-request-1",level:5},{value:"Sample response",id:"sample-response-1",level:5},{value:"Delete a table",id:"delete-a-table",level:4},{value:"URL",id:"url-2",level:5},{value:"Responses",id:"responses-2",level:5},{value:"Sample request",id:"sample-request-2",level:5},{value:"Sample response",id:"sample-response-2",level:5},{value:"Retrieve list of schema names",id:"retrieve-list-of-schema-names",level:4},{value:"URL",id:"url-3",level:5},{value:"Responses",id:"responses-3",level:5},{value:"Sample request",id:"sample-request-3",level:5},{value:"Sample response",id:"sample-response-3",level:5},{value:"Retrieve list of table names in schema",id:"retrieve-list-of-table-names-in-schema",level:4},{value:"URL",id:"url-4",level:5},{value:"Responses",id:"responses-4",level:5},{value:"Sample request",id:"sample-request-4",level:5},{value:"Sample response",id:"sample-response-4",level:5}];function u(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Consider this an ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/development/experimental",children:"EXPERIMENTAL"})," feature mostly because it has not been tested yet on a wide variety of long running Druid clusters."]}),"\n",(0,t.jsx)(n.p,{children:"This extension allows users to configure, update, retrieve, and manage metadata stored in Druid's catalog. At present, only metadata about tables is stored in the catalog. This extension only supports MSQ based ingestion."}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["To use this extension please make sure to  ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/configuration/extensions#loading-extensions",children:"include"})," ",(0,t.jsx)(n.code,{children:"druid-catalog"})," in the extensions load list."]}),"\n",(0,t.jsx)(n.h1,{id:"catalog-metadata",children:"Catalog Metadata"}),"\n",(0,t.jsx)(n.h2,{id:"tables",children:"Tables"}),"\n",(0,t.jsx)(n.p,{children:"A user may define a table with a defined set of column names, and respective data types, along with other properties. When\ningesting data into a table defined in the catalog, the DML query is validated against the definition of the table\nas defined in the catalog. This allows the user to omit the table's properties that are found in its definition,\nallowing queries to be more concise, and simpler to write. This also allows the user to ensure that the type of data being\nwritten into a defined column of the table is consistent with that columns definition, minimizing errors where unexpected\ndata is written into a particular column of the table."}),"\n",(0,t.jsx)(n.h3,{id:"api-objects",children:"API Objects"}),"\n",(0,t.jsx)(n.h4,{id:"tablespec",children:"TableSpec"}),"\n",(0,t.jsx)(n.p,{children:"A tableSpec defines a table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"type"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsxs)(n.td,{children:["the type of table. The only value supported at this time is ",(0,t.jsx)(n.code,{children:"datasource"})]}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"null"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"properties"})}),(0,t.jsx)(n.td,{children:"Map<String, Object>"}),(0,t.jsxs)(n.td,{children:["the table's defined properties. see ",(0,t.jsx)(n.a,{href:"#table-properties",children:"table properties"})]}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"null"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"columns"})}),(0,t.jsxs)(n.td,{children:["List<",(0,t.jsx)(n.a,{href:"#columnspec",children:"ColumnSpec"}),">"]}),(0,t.jsx)(n.td,{children:"the table's defined columns"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"null"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"table-properties",children:"Table Properties"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"PropertyKeyName"}),(0,t.jsx)(n.th,{children:"PropertyValueType"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"segmentGranularity"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsxs)(n.td,{children:["determines how time-based partitioning is done. See ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/concepts#partitioning-by-time",children:"Partitioning by time"}),". Can specify any of the values as permitted for ",(0,t.jsx)(n.a,{href:"/docs/33.0.0/multi-stage-query/reference#partitioned-by",children:"PARTITIONED BY"}),". This property value may be overridden at query time, by specifying the PARTITIONED BY clause."]}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"null"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"sealed"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"require all columns in the table schema to be fully declared before data is ingested. Setting this to true will cause failure when DML queries attempt to add undefined columns to the table."}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"false"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"columnspec",children:"ColumnSpec"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"The name of the column"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"null"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dataType"})}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"The type of the column. Can be any column data type that is available to Druid. Depends on what extensions are loaded."}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"null"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"properties"})}),(0,t.jsx)(n.td,{children:"Map<String, Object>"}),(0,t.jsx)(n.td,{children:"the column's defined properties. Non properties defined at this time."}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"null"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"apis",children:"APIs"}),"\n",(0,t.jsx)(n.h4,{id:"create-or-update-a-table",children:"Create or update a table"}),"\n",(0,t.jsx)(n.p,{children:"Update or create a new table containing the given table specification."}),"\n",(0,t.jsx)(n.h5,{id:"url",children:"URL"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"POST"})," ",(0,t.jsx)(n.code,{children:"/druid/coordinator/v1/catalog/schemas/{schema}/tables/{name}"})]}),"\n",(0,t.jsx)(n.h5,{id:"request-body",children:"Request body"}),"\n",(0,t.jsxs)(n.p,{children:["The request object for this request is a ",(0,t.jsx)(n.a,{href:"#tablespec",children:"TableSpec"})]}),"\n",(0,t.jsx)(n.h5,{id:"query-parameters",children:"Query parameters"}),"\n",(0,t.jsx)(n.p,{children:"The endpoint supports a set of optional query parameters to enforce optimistic locking, and to specify that a request\nis meant to update a table rather than create a new one. In the default case, with no query parameters set, this request\nwill return an error if a table of the same name already exists in the schema specified."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"version"})}),(0,t.jsx)(n.td,{children:"Long"}),(0,t.jsx)(n.td,{children:"the expected version of an existing table. The version must match. If not (or if the table does not exist), returns an error."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"overwrite"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"if true, then overwrites any existing table. Otherwise, the operation fails if the table already exists."})]})]})]}),"\n",(0,t.jsx)(n.h5,{id:"responses",children:"Responses"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsxs)(i.A,{value:"1",label:"200 SUCCESS",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Successfully submitted table spec. Returns an object that includes the version of the table created or updated:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "version": 12345687\n}\n'})})]}),(0,t.jsxs)(i.A,{value:"2",label:"400 BAD REQUEST",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to bad request. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]}),(0,t.jsxs)(i.A,{value:"3",label:"500 INTERNAL SERVER ERROR",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to unexpected conditions. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h5,{id:"sample-request",children:"Sample request"}),"\n",(0,t.jsxs)(n.p,{children:["The following example shows how to create a sealed table with several defined columns, and a defined segment granularity of ",(0,t.jsx)(n.code,{children:'"P1D"'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'curl "http://ROUTER_IP:ROUTER_PORT/druid/coordinator/v1/catalog/schemas/druid/tables/test_table" \\\n-X \'POST\' \\\n--header \'Content-Type: application/json\' \\\n--data \'{\n  "type": "datasource",\n  "columns": [\n    {\n      "name": "__time",\n      "dataType": "long"\n    },\n    {\n      "name": "double_col",\n      "dataType": "double"\n    },\n    {\n      "name": "float_col",\n      "dataType": "float"\n    },\n    {\n      "name": "long_col",\n      "dataType": "long"\n    },\n    {\n      "name": "string_col",\n      "dataType": "string"\n    }\n  ],\n  "properties": {\n    "segmentGranularity": "P1D",\n    "sealed": true\n  }\n}\'\n'})}),"\n",(0,t.jsx)(n.h5,{id:"sample-response",children:"Sample response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "version": 1730965026295\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"retrieve-a-table",children:"Retrieve a table"}),"\n",(0,t.jsx)(n.p,{children:"Retrieve a table"}),"\n",(0,t.jsx)(n.h5,{id:"url-1",children:"URL"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"GET"})," ",(0,t.jsx)(n.code,{children:"/druid/coordinator/v1/catalog/schemas/{schema}/tables/{name}"})]}),"\n",(0,t.jsx)(n.h5,{id:"responses-1",children:"Responses"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(i.A,{value:"1",label:"200 SUCCESS",children:(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Successfully retrieved corresponding table's ",(0,t.jsx)(n.a,{href:"#tablespec",children:"TableSpec"})]})})}),(0,t.jsxs)(i.A,{value:"2",label:"400 BAD REQUEST",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to bad request. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]}),(0,t.jsxs)(i.A,{value:"3",label:"500 INTERNAL SERVER ERROR",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to unexpected conditions. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h5,{id:"sample-request-1",children:"Sample request"}),"\n",(0,t.jsxs)(n.p,{children:["The following example shows how to retrieve a table named ",(0,t.jsx)(n.code,{children:"test_table"})," in schema ",(0,t.jsx)(n.code,{children:"druid"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'curl "http://ROUTER_IP:ROUTER_PORT/druid/coordinator/v1/catalog/schemas/druid/tables/test_table"\n'})}),"\n",(0,t.jsx)(n.h5,{id:"sample-response-1",children:"Sample response"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"View the response"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "id": {\n    "schema": "druid",\n    "name": "test_table"\n  },\n  "creationTime": 1730965026295,\n  "updateTime": 1730965026295,\n  "state": "ACTIVE",\n  "spec": {\n    "type": "datasource",\n    "properties": {\n      "segmentGranularity": "P1D",\n      "sealed": true\n    },\n    "columns": [\n      {\n        "name": "__time",\n        "dataType": "long"\n      },\n      {\n        "name": "double_col",\n        "dataType": "double"\n      },\n      {\n        "name": "float_col",\n        "dataType": "float"\n      },\n      {\n        "name": "long_col",\n        "dataType": "long"\n      },\n      {\n        "name": "string_col",\n        "dataType": "string"\n      }\n    ]\n  }\n}\n'})})]}),"\n",(0,t.jsx)(n.h4,{id:"delete-a-table",children:"Delete a table"}),"\n",(0,t.jsx)(n.p,{children:"Delete a table"}),"\n",(0,t.jsx)(n.h5,{id:"url-2",children:"URL"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DELETE"})," ",(0,t.jsx)(n.code,{children:"/druid/coordinator/v1/catalog/schemas/{schema}/tables/{name}"})]}),"\n",(0,t.jsx)(n.h5,{id:"responses-2",children:"Responses"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(i.A,{value:"1",label:"200 SUCCESS",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"No response body"})})}),(0,t.jsxs)(i.A,{value:"2",label:"400 BAD REQUEST",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to bad request. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]}),(0,t.jsxs)(i.A,{value:"3",label:"500 INTERNAL SERVER ERROR",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to unexpected conditions. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h5,{id:"sample-request-2",children:"Sample request"}),"\n",(0,t.jsxs)(n.p,{children:["The following example shows how to delete the a table named ",(0,t.jsx)(n.code,{children:"test_table"})," in schema ",(0,t.jsx)(n.code,{children:"druid"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"curl -X 'DELETE' \"http://ROUTER_IP:ROUTER_PORT/druid/coordinator/v1/catalog/schemas/druid/tables/test_table\"\n"})}),"\n",(0,t.jsx)(n.h5,{id:"sample-response-2",children:"Sample response"}),"\n",(0,t.jsx)(n.p,{children:"No response body"}),"\n",(0,t.jsx)(n.h4,{id:"retrieve-list-of-schema-names",children:"Retrieve list of schema names"}),"\n",(0,t.jsx)(n.p,{children:"retrieve list of schema names"}),"\n",(0,t.jsx)(n.h5,{id:"url-3",children:"URL"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"GET"})," ",(0,t.jsx)(n.code,{children:"/druid/coordinator/v1/catalog/schemas"})]}),"\n",(0,t.jsx)(n.h5,{id:"responses-3",children:"Responses"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(i.A,{value:"1",label:"200 SUCCESS",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Successfully retrieved list of schema names"})})}),(0,t.jsxs)(i.A,{value:"2",label:"400 BAD REQUEST",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to bad request. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]}),(0,t.jsxs)(i.A,{value:"3",label:"500 INTERNAL SERVER ERROR",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to unexpected conditions. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h5,{id:"sample-request-3",children:"Sample request"}),"\n",(0,t.jsx)(n.p,{children:"The following example shows how to retrieve the list of schema names."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'curl "http://ROUTER_IP:ROUTER_PORT/druid/coordinator/v1/catalog/schemas"\n'})}),"\n",(0,t.jsx)(n.h5,{id:"sample-response-3",children:"Sample response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\n  "INFORMATION_SCHEMA",\n  "druid",\n  "ext",\n  "lookups",\n  "sys",\n  "view"\n]\n'})}),"\n",(0,t.jsx)(n.h4,{id:"retrieve-list-of-table-names-in-schema",children:"Retrieve list of table names in schema"}),"\n",(0,t.jsx)(n.p,{children:"Retrieve a list of table names in the schema."}),"\n",(0,t.jsx)(n.h5,{id:"url-4",children:"URL"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"GET"})," ",(0,t.jsx)(n.code,{children:"/druid/coordinator/v1/catalog/schemas/{schema}/table"})]}),"\n",(0,t.jsx)(n.h5,{id:"responses-4",children:"Responses"}),"\n",(0,t.jsxs)(a.A,{children:[(0,t.jsx)(i.A,{value:"1",label:"200 SUCCESS",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Successfully retrieved list of table names belonging to schema"})})}),(0,t.jsxs)(i.A,{value:"2",label:"400 BAD REQUEST",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to bad request. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]}),(0,t.jsxs)(i.A,{value:"3",label:"500 INTERNAL SERVER ERROR",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Error thrown due to unexpected conditions. Returns a JSON object detailing the error with the following format:"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": "A well-defined error code.",\n    "errorMessage": "A message with additional details about the error."\n}\n'})})]})]}),"\n",(0,t.jsx)(n.h5,{id:"sample-request-4",children:"Sample request"}),"\n",(0,t.jsxs)(n.p,{children:["The following example shows how to retrieve all of the table names of tables belonging to the ",(0,t.jsx)(n.code,{children:"druid"})," schema."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'curl "http://ROUTER_IP:ROUTER_PORT/druid/coordinator/v1/catalog/schemas/druid/tables"\n'})}),"\n",(0,t.jsx)(n.h5,{id:"sample-response-4",children:"Sample response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\n  "test_table"\n]\n'})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var s=r(96540);const t={},l=s.createContext(t);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(l.Provider,{value:n},e.children)}},65537:(e,n,r)=>{r.d(n,{A:()=>R});var s=r(96540),t=r(18215),l=r(65627),a=r(56347),i=r(50372),d=r(30604),o=r(11861),c=r(78749);function h(e){var n,r;return null!=(n=null==(r=s.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,s.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:r.filter(Boolean))?n:[]}function u(e){var n=e.values,r=e.children;return(0,s.useMemo)((function(){var e=null!=n?n:function(e){return h(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(r);return function(e){var n=(0,o.XI)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,r])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function x(e){var n=e.queryString,r=void 0!==n&&n,t=e.groupId,l=(0,a.W6)(),i=function(e){var n=e.queryString,r=void 0!==n&&n,s=e.groupId;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=s?s:null}({queryString:r,groupId:t});return[(0,d.aZ)(i),(0,s.useCallback)((function(e){if(i){var n=new URLSearchParams(l.location.search);n.set(i,e),l.replace(Object.assign({},l.location,{search:n.toString()}))}}),[i,l])]}function j(e){var n,r,t,l,a=e.defaultValue,d=e.queryString,o=void 0!==d&&d,h=e.groupId,j=u(e),m=(0,s.useState)((function(){return function(e){var n,r=e.defaultValue,s=e.tabValues;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!p({value:r,tabValues:s}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+r+'" but none of its children has the corresponding value. Available values are: '+s.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return r}var t=null!=(n=s.find((function(e){return e.default})))?n:s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:j})})),b=m[0],f=m[1],v=x({queryString:o,groupId:h}),g=v[0],w=v[1],R=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:h}.groupId),r=(0,c.Dv)(n),t=r[0],l=r[1],[t,(0,s.useCallback)((function(e){n&&l.set(e)}),[n,l])]),y=R[0],T=R[1],S=function(){var e=null!=g?g:y;return p({value:e,tabValues:j})?e:null}();return(0,i.A)((function(){S&&f(S)}),[S]),{selectedValue:b,selectValue:(0,s.useCallback)((function(e){if(!p({value:e,tabValues:j}))throw new Error("Can't select invalid tab value="+e);f(e),w(e),T(e)}),[w,T,j]),tabValues:j}}var m=r(9136);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(74848);function v(e){var n=e.className,r=e.block,s=e.selectedValue,a=e.selectValue,i=e.tabValues,d=[],o=(0,l.a_)().blockElementScrollPositionUntilNextRender,c=function(e){var n=e.currentTarget,r=d.indexOf(n),t=i[r].value;t!==s&&(o(n),a(t))},h=function(e){var n,r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":var s,t=d.indexOf(e.currentTarget)+1;r=null!=(s=d[t])?s:d[0];break;case"ArrowLeft":var l,a=d.indexOf(e.currentTarget)-1;r=null!=(l=d[a])?l:d[d.length-1]}null==(n=r)||n.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":r},n),children:i.map((function(e){var n=e.value,r=e.label,l=e.attributes;return(0,f.jsx)("li",Object.assign({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:function(e){d.push(e)},onKeyDown:h,onClick:c},l,{className:(0,t.A)("tabs__item",b.tabItem,null==l?void 0:l.className,{"tabs__item--active":s===n}),children:null!=r?r:n}),n)}))})}function g(e){var n=e.lazy,r=e.children,l=e.selectedValue,a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){var i=a.find((function(e){return e.props.value===l}));return i?(0,s.cloneElement)(i,{className:(0,t.A)("margin-top--md",i.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==l})}))})}function w(e){var n=j(e);return(0,f.jsxs)("div",{className:(0,t.A)("tabs-container",b.tabList),children:[(0,f.jsx)(v,Object.assign({},n,e)),(0,f.jsx)(g,Object.assign({},n,e))]})}function R(e){var n=(0,m.A)();return(0,f.jsx)(w,Object.assign({},e,{children:h(e.children)}),String(n))}},79329:(e,n,r)=>{r.d(n,{A:()=>a});r(96540);var s=r(18215);const t={tabItem:"tabItem_Ymn6"};var l=r(74848);function a(e){var n=e.children,r=e.hidden,a=e.className;return(0,l.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,a),hidden:r,children:n})}}}]);