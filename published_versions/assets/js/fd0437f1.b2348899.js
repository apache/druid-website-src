"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1600],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),m=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),g=a,d=c["".concat(i,".").concat(g)]||c[g]||u[g]||o;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=g;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var m=2;m<o;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},96389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>m,toc:()=>c});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],s={id:"momentsketch-quantiles",title:"Moment Sketches for Approximate Quantiles module"},i=void 0,m={unversionedId:"development/extensions-contrib/momentsketch-quantiles",id:"development/extensions-contrib/momentsketch-quantiles",title:"Moment Sketches for Approximate Quantiles module",description:"\x3c!--",source:"@site/docs/29.0.1/development/extensions-contrib/momentsketch-quantiles.md",sourceDirName:"development/extensions-contrib",slug:"/development/extensions-contrib/momentsketch-quantiles",permalink:"/docs/29.0.1/development/extensions-contrib/momentsketch-quantiles",draft:!1,tags:[],version:"current",frontMatter:{id:"momentsketch-quantiles",title:"Moment Sketches for Approximate Quantiles module"}},p={},c=[{value:"Aggregator",id:"aggregator",level:3},{value:"Post Aggregators",id:"post-aggregators",level:3},{value:"Example",id:"example",level:3}],u={toc:c},g="wrapper";function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)(g,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This module provides aggregators for approximate quantile queries using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/stanford-futuredata/momentsketch"},"momentsketch")," library.\nThe momentsketch provides coarse quantile estimates with less space and aggregation time overheads than traditional sketches, approaching the performance of counts and sums by reconstructing distributions from computed statistics."),(0,o.kt)("p",null,"To use this Apache Druid extension, ",(0,o.kt)("a",{parentName:"p",href:"/docs/29.0.1/configuration/extensions#loading-extensions"},"include")," in the extensions load list."),(0,o.kt)("h3",{id:"aggregator"},"Aggregator"),(0,o.kt)("p",null,"The result of the aggregation is a momentsketch that is the union of all sketches either built from raw data or read from the segments."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"momentSketch")," aggregator operates over raw data while the ",(0,o.kt)("inlineCode",{parentName:"p"},"momentSketchMerge")," aggregator should be used when aggregating precomputed sketches."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type" : <aggregator_type>,\n  "name" : <output_name>,\n  "fieldName" : <input_name>,\n  "k" : <int>,\n  "compress" : <boolean>\n }\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"property"),(0,o.kt)("th",{parentName:"tr",align:null},"description"),(0,o.kt)("th",{parentName:"tr",align:null},"required?"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"type"),(0,o.kt)("td",{parentName:"tr",align:null},'Type of aggregator desired. Either "momentSketch" or "momentSketchMerge"'),(0,o.kt)("td",{parentName:"tr",align:null},"yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"name"),(0,o.kt)("td",{parentName:"tr",align:null},"A String for the output (result) name of the calculation."),(0,o.kt)("td",{parentName:"tr",align:null},"yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"fieldName"),(0,o.kt)("td",{parentName:"tr",align:null},"A String for the name of the input field (can contain sketches or raw numeric values)."),(0,o.kt)("td",{parentName:"tr",align:null},"yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"k"),(0,o.kt)("td",{parentName:"tr",align:null},"Parameter that determines the accuracy and size of the sketch. Higher k means higher accuracy but more space to store sketches. Usable range is generally ","[3,15]"),(0,o.kt)("td",{parentName:"tr",align:null},"no, defaults to 13.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"compress"),(0,o.kt)("td",{parentName:"tr",align:null},"Flag for whether the aggregator compresses numeric values using arcsinh. Can improve robustness to skewed and long-tailed distributions, but reduces accuracy slightly on more uniform distributions."),(0,o.kt)("td",{parentName:"tr",align:null},"no, defaults to true")))),(0,o.kt)("h3",{id:"post-aggregators"},"Post Aggregators"),(0,o.kt)("p",null,"Users can query for a set of quantiles using the ",(0,o.kt)("inlineCode",{parentName:"p"},"momentSketchSolveQuantiles")," post-aggregator on the sketches created by the ",(0,o.kt)("inlineCode",{parentName:"p"},"momentSketch")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"momentSketchMerge")," aggregators."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type"  : "momentSketchSolveQuantiles",\n  "name" : <output_name>,\n  "field" : <reference to moment sketch>,\n  "fractions" : <array of doubles in [0,1]>\n}\n')),(0,o.kt)("p",null,"Users can also query for the min/max of a distribution:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type" : "momentSketchMin" | "momentSketchMax",\n  "name" : <output_name>,\n  "field" : <reference to moment sketch>,\n}\n')),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"As an example of a query with sketches pre-aggregated at ingestion time, one could set up the following aggregator at ingest:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "momentSketch",\n  "name": "sketch",\n  "fieldName": "value",\n  "k": 10,\n  "compress": true,\n}\n')),(0,o.kt)("p",null,"and make queries using the following aggregator + post-aggregator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "aggregations": [{\n    "type": "momentSketchMerge",\n    "name": "sketch",\n    "fieldName": "sketch",\n    "k": 10,\n    "compress": true\n  }],\n  "postAggregations": [\n  {\n    "type": "momentSketchSolveQuantiles",\n    "name": "quantiles",\n    "fractions": [0.1, 0.5, 0.9],\n    "field": {\n      "type": "fieldAccess",\n      "fieldName": "sketch"\n    }\n  },\n  {\n    "type": "momentSketchMin",\n    "name": "min",\n    "field": {\n      "type": "fieldAccess",\n      "fieldName": "sketch"\n    }\n  }]\n}\n')))}d.isMDXComponent=!0}}]);