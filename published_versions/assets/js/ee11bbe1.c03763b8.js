"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9173],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(96540);const o={},s=i.createContext(o);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(s.Provider,{value:n},e.children)}},43808:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"design/overlord","title":"Overlord service","description":"\x3c!--","source":"@site/docs/33.0.0/design/overlord.md","sourceDirName":"design","slug":"/design/overlord","permalink":"/docs/33.0.0/design/overlord","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"overlord","title":"Overlord service","sidebar_label":"Overlord"},"sidebar":"docs","previous":{"title":"Coordinator","permalink":"/docs/33.0.0/design/coordinator"},"next":{"title":"Broker","permalink":"/docs/33.0.0/design/broker"}}');var o=r(74848),s=r(28453);const t={id:"overlord",title:"Overlord service",sidebar_label:"Overlord"},a=void 0,d={},l=[{value:"Configuration",id:"configuration",level:2},{value:"HTTP endpoints",id:"http-endpoints",level:2},{value:"Blacklisted workers",id:"blacklisted-workers",level:2},{value:"Autoscaling",id:"autoscaling",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"The Overlord service is responsible for accepting tasks, coordinating task distribution, creating locks around tasks, and returning statuses to callers. The Overlord can be configured to run in one of two modes - local or remote (local being default).\nIn local mode, the Overlord is also responsible for creating Peons for executing tasks. When running the Overlord in local mode, all Middle Manager and Peon configurations must be provided as well.\nLocal mode is typically used for simple workflows. In remote mode, the Overlord and Middle Manager are run in separate services and you can run each on a different server.\nThis mode is recommended if you intend to use the indexing service as the single endpoint for all Druid indexing."}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["For Apache Druid Overlord service configuration, see ",(0,o.jsx)(n.a,{href:"/docs/33.0.0/configuration/#overlord",children:"Overlord Configuration"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For basic tuning guidance for the Overlord service, see ",(0,o.jsx)(n.a,{href:"/docs/33.0.0/operations/basic-cluster-tuning#overlord",children:"Basic cluster tuning"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"http-endpoints",children:"HTTP endpoints"}),"\n",(0,o.jsxs)(n.p,{children:["For a list of API endpoints supported by the Overlord, please see the ",(0,o.jsx)(n.a,{href:"/docs/33.0.0/api-reference/service-status-api#overlord",children:"Service status API reference"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"blacklisted-workers",children:"Blacklisted workers"}),"\n",(0,o.jsx)(n.p,{children:"If a Middle Manager has task failures above a threshold, the Overlord will blacklist these Middle Managers. No more than 20% of the Middle Managers can be blacklisted. Blacklisted Middle Managers will be periodically whitelisted."}),"\n",(0,o.jsx)(n.p,{children:"The following variables can be used to set the threshold and blacklist timeouts."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"druid.indexer.runner.maxRetriesBeforeBlacklist\ndruid.indexer.runner.workerBlackListBackoffTime\ndruid.indexer.runner.workerBlackListCleanupPeriod\ndruid.indexer.runner.maxPercentageBlacklistWorkers\n"})}),"\n",(0,o.jsx)(n.h2,{id:"autoscaling",children:"Autoscaling"}),"\n",(0,o.jsxs)(n.p,{children:["The autoscaling mechanisms currently in place are tightly coupled with our deployment infrastructure but the framework should be in place for other implementations. We are highly open to new implementations or extensions of the existing mechanisms. In our own deployments, Middle Manager services are Amazon AWS EC2 nodes and they are provisioned to register themselves in a ",(0,o.jsx)(n.a,{href:"https://github.com/ning/galaxy",children:"galaxy"})," environment."]}),"\n",(0,o.jsx)(n.p,{children:"If autoscaling is enabled, new Middle Managers may be added when a task has been in pending state for too long. Middle Managers may be terminated if they have not run any tasks for a period of time."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);