"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6776],{28453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>o});var t=n(96540);const r={},i=t.createContext(r);function d(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:s},e.children)}},58682:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"querying/sql-aggregations","title":"SQL aggregation functions","description":"\x3c!--","source":"@site/docs/33.0.0/querying/sql-aggregations.md","sourceDirName":"querying","slug":"/querying/sql-aggregations","permalink":"/docs/33.0.0/querying/sql-aggregations","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"sql-aggregations","title":"SQL aggregation functions","sidebar_label":"Aggregation functions"},"sidebar":"docs","previous":{"title":"Scalar functions","permalink":"/docs/33.0.0/querying/sql-scalar"},"next":{"title":"Window functions","permalink":"/docs/33.0.0/querying/sql-window-functions"}}');var r=n(74848),i=n(28453);const d={id:"sql-aggregations",title:"SQL aggregation functions",sidebar_label:"Aggregation functions"},o=void 0,c={},l=[{value:"Filter aggregations",id:"filter-aggregations",level:2},{value:"General aggregation functions",id:"general-aggregation-functions",level:2},{value:"Sketch functions",id:"sketch-functions",level:2},{value:"HLL sketch functions",id:"hll-sketch-functions",level:3},{value:"Theta sketch functions",id:"theta-sketch-functions",level:3},{value:"Quantiles sketch functions",id:"quantiles-sketch-functions",level:3},{value:"Tuple sketch functions",id:"tuple-sketch-functions",level:3},{value:"T-Digest sketch functions",id:"t-digest-sketch-functions",level:3}];function a(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.p,{children:["Apache Druid supports two query languages: Druid SQL and ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/",children:"native queries"}),".\nThis document describes the SQL language."]})}),"\n",(0,r.jsxs)(s.p,{children:["You can use aggregation functions in the SELECT clause of any ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/sql",children:"Druid SQL"})," query."]}),"\n",(0,r.jsxs)(s.p,{children:["In the aggregation functions supported by Druid, only ",(0,r.jsx)(s.code,{children:"COUNT"}),", ",(0,r.jsx)(s.code,{children:"ARRAY_AGG"}),", and ",(0,r.jsx)(s.code,{children:"STRING_AGG"})," accept the DISTINCT keyword."]}),"\n",(0,r.jsxs)(s.admonition,{type:"info",children:[(0,r.jsx)(s.p,{children:"The order of aggregation operations across segments is not deterministic. This means that non-commutative aggregation\nfunctions can produce inconsistent results across the same query."}),(0,r.jsxs)(s.p,{children:['Functions that operate on an input type of "float" or "double" may also see these differences in aggregation\nresults across multiple query runs because of this. If precisely the same value is desired across multiple query runs,\nconsider using the ',(0,r.jsx)(s.code,{children:"ROUND"})," function to smooth out the inconsistencies between queries."]})]}),"\n",(0,r.jsx)(s.h2,{id:"filter-aggregations",children:"Filter aggregations"}),"\n",(0,r.jsx)(s.p,{children:"Filter any aggregator using the FILTER clause, for example:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"SELECT \n  SUM(added) FILTER(WHERE channel = '#en.wikipedia')\nFROM wikipedia\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The FILTER clause limits an aggregation query to only the rows that match the filter.\nDruid translates the FILTER clause to a native ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/aggregations#filtered-aggregator",children:"filtered aggregator"}),".\nTwo aggregators in the same SQL query may have different filters."]}),"\n",(0,r.jsx)(s.p,{children:"When no rows are selected, aggregation functions return their initial value. This can occur from the following:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"When no rows match the filter while aggregating values across an entire table without a grouping, or"}),"\n",(0,r.jsx)(s.li,{children:"When using filtered aggregations within a grouping."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["The initial value varies by aggregator. ",(0,r.jsx)(s.code,{children:"COUNT"})," and the approximate count distinct sketch functions\nalways return 0 as the initial value."]}),"\n",(0,r.jsx)(s.h2,{id:"general-aggregation-functions",children:"General aggregation functions"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Function"}),(0,r.jsx)(s.th,{children:"Notes"}),(0,r.jsx)(s.th,{children:"Default"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"COUNT(*)"})}),(0,r.jsx)(s.td,{children:"Counts the number of rows."}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"0"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"COUNT([DISTINCT] expr)"})}),(0,r.jsxs)(s.td,{children:["Counts the values of ",(0,r.jsx)(s.code,{children:"expr"}),".",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"By default, using DISTINCT serves as an alias for ",(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT"})," (",(0,r.jsx)(s.code,{children:"useApproximateCountDistinct=true"}),"). The specific algorithm depends on the value of ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/configuration/#sql",children:(0,r.jsx)(s.code,{children:"druid.sql.approxCountDistinct.function"})}),". In this mode, you can use strings, numbers, or prebuilt sketches. If counting prebuilt sketches, the prebuilt sketch type must match the selected algorithm.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"When ",(0,r.jsx)(s.code,{children:"useApproximateCountDistinct=false"}),", returns the exact computation. In this case, ",(0,r.jsx)(s.code,{children:"expr"})," must be string or numeric, since exact counts are not possible using prebuilt sketches. In exact mode, only one distinct count per query is permitted unless ",(0,r.jsx)(s.code,{children:"useGroupingSetForExactDistinct"})," is enabled.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Counts each distinct value in a ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/multi-value-dimensions",children:(0,r.jsx)(s.code,{children:"multi-value"})}),"-row separately."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"0"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"SUM(expr)"})}),(0,r.jsx)(s.td,{children:"Sums numbers."}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"MIN(expr)"})}),(0,r.jsx)(s.td,{children:"Takes the minimum of numbers."}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"MAX(expr)"})}),(0,r.jsx)(s.td,{children:"Takes the maximum of numbers."}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"AVG(expr)"})}),(0,r.jsx)(s.td,{children:"Averages numbers."}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT(expr)"})}),(0,r.jsxs)(s.td,{children:["Counts distinct values of ",(0,r.jsx)(s.code,{children:"expr"})," using an approximate algorithm. The ",(0,r.jsx)(s.code,{children:"expr"})," can be a regular column or a prebuilt sketch column.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"The specific algorithm depends on the value of ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/configuration/#sql",children:(0,r.jsx)(s.code,{children:"druid.sql.approxCountDistinct.function"})}),". By default, this is ",(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT_BUILTIN"}),". If the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-extension",children:"DataSketches extension"})," is loaded, you can set it to ",(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT_DS_HLL"})," or ",(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT_DS_THETA"}),".",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"When run on prebuilt sketch columns, the sketch column type must match the implementation of this function. For example: when ",(0,r.jsx)(s.code,{children:"druid.sql.approxCountDistinct.function"})," is set to ",(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT_BUILTIN"}),", this function runs on prebuilt hyperUnique columns, but not on prebuilt HLLSketchBuild columns."]}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT_BUILTIN(expr)"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"Usage note:"})," consider using ",(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT_DS_HLL"})," instead, which offers better accuracy in many cases.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Counts distinct values of ",(0,r.jsx)(s.code,{children:"expr"}),' using Druid\'s built-in "cardinality" or "hyperUnique" aggregators, which implement a variant of ',(0,r.jsx)(s.a,{href:"http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf",children:"HyperLogLog"}),". The ",(0,r.jsx)(s.code,{children:"expr"})," can be a string, a number, or a prebuilt hyperUnique column. Results are always approximate, regardless of the value of ",(0,r.jsx)(s.code,{children:"useApproximateCountDistinct"}),"."]}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"APPROX_QUANTILE(expr, probability, [resolution])"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"Deprecated."})," Use ",(0,r.jsx)(s.code,{children:"APPROX_QUANTILE_DS"})," instead, which provides a superior distribution-independent algorithm with formal error guarantees.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Computes approximate quantiles on numeric or ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/approximate-histograms#approximate-histogram-aggregator",children:"approxHistogram"})," expressions. ",(0,r.jsx)(s.code,{children:"probability"})," should be between 0 and 1, exclusive. ",(0,r.jsx)(s.code,{children:"resolution"})," is the number of centroids to use for the computation. Higher resolutions will give more precise results but also have higher overhead. If not provided, the default resolution is 50. Load the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/approximate-histograms",children:"approximate histogram extension"})," to use this function."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"NaN"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"APPROX_QUANTILE_FIXED_BUCKETS(expr, probability, numBuckets, lowerLimit, upperLimit, [outlierHandlingMode])"})}),(0,r.jsxs)(s.td,{children:["Computes approximate quantiles on numeric or ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/approximate-histograms#fixed-buckets-histogram",children:"fixed buckets histogram"})," expressions. ",(0,r.jsx)(s.code,{children:"probability"})," should be between 0 and 1, exclusive. The ",(0,r.jsx)(s.code,{children:"numBuckets"}),", ",(0,r.jsx)(s.code,{children:"lowerLimit"}),", ",(0,r.jsx)(s.code,{children:"upperLimit"}),", and ",(0,r.jsx)(s.code,{children:"outlierHandlingMode"})," parameters are described in the fixed buckets histogram documentation. Load the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/approximate-histograms",children:"approximate histogram extension"})," to use this function."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"0.0"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"BLOOM_FILTER(expr, numEntries)"})}),(0,r.jsxs)(s.td,{children:["Computes a bloom filter from values produced by ",(0,r.jsx)(s.code,{children:"expr"}),", with ",(0,r.jsx)(s.code,{children:"numEntries"})," maximum number of distinct values before false positive rate increases. See ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/bloom-filter",children:"bloom filter extension"})," documentation for additional details."]}),(0,r.jsx)(s.td,{children:"Empty base64 encoded bloom filter STRING"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"VAR_POP(expr)"})}),(0,r.jsxs)(s.td,{children:["Computes variance population of ",(0,r.jsx)(s.code,{children:"expr"}),". See ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/stats",children:"stats extension"})," documentation for additional details."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"VAR_SAMP(expr)"})}),(0,r.jsxs)(s.td,{children:["Computes variance sample of ",(0,r.jsx)(s.code,{children:"expr"}),". See ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/stats",children:"stats extension"})," documentation for additional details."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"VARIANCE(expr)"})}),(0,r.jsxs)(s.td,{children:["Computes variance sample of ",(0,r.jsx)(s.code,{children:"expr"}),". See ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/stats",children:"stats extension"})," documentation for additional details."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"STDDEV_POP(expr)"})}),(0,r.jsxs)(s.td,{children:["Computes standard deviation population of ",(0,r.jsx)(s.code,{children:"expr"}),". See ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/stats",children:"stats extension"})," documentation for additional details."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"STDDEV_SAMP(expr)"})}),(0,r.jsxs)(s.td,{children:["Computes standard deviation sample of ",(0,r.jsx)(s.code,{children:"expr"}),". See ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/stats",children:"stats extension"})," documentation for additional details."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"STDDEV(expr)"})}),(0,r.jsxs)(s.td,{children:["Computes standard deviation sample of ",(0,r.jsx)(s.code,{children:"expr"}),". See ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/stats",children:"stats extension"})," documentation for additional details."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"EARLIEST(expr, [maxBytesPerValue])"})}),(0,r.jsxs)(s.td,{children:["Returns the earliest value of ",(0,r.jsx)(s.code,{children:"expr"}),".",(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"expr"})," comes from a relation with a timestamp column (like ",(0,r.jsx)(s.code,{children:"__time"}),' in a Druid datasource), the "earliest" is taken from the row with the overall earliest non-null value of the timestamp column.',(0,r.jsx)("br",{}),"If the earliest non-null value of the timestamp column appears in multiple rows, the ",(0,r.jsx)(s.code,{children:"expr"})," may be taken from any of those rows. If ",(0,r.jsx)(s.code,{children:"expr"})," does not come from a relation with a timestamp, then it is simply the first value encountered.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"expr"})," is a string or complex type ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," amount of space is allocated for the aggregation. Strings longer than this limit are truncated. The  ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," parameter should be set as low as possible, since high values will lead to wasted memory.",(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"}),"is omitted; it defaults to ",(0,r.jsx)(s.code,{children:"1024"}),"."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"EARLIEST_BY(expr, timestampExpr, [maxBytesPerValue])"})}),(0,r.jsxs)(s.td,{children:["Returns the earliest value of ",(0,r.jsx)(s.code,{children:"expr"}),".",(0,r.jsx)("br",{}),"The earliest value of ",(0,r.jsx)(s.code,{children:"expr"})," is taken from the row with the overall earliest non-null value of ",(0,r.jsx)(s.code,{children:"timestampExpr"}),". ",(0,r.jsx)("br",{}),"If the earliest non-null value of ",(0,r.jsx)(s.code,{children:"timestampExpr"})," appears in multiple rows, the ",(0,r.jsx)(s.code,{children:"expr"})," may be taken from any of those rows.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"expr"})," is a string or complex type ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," amount of space is allocated for the aggregation. Strings longer than this limit are truncated. The  ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," parameter should be set as low as possible, since high values will lead to wasted memory.",(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"}),"is omitted; it defaults to ",(0,r.jsx)(s.code,{children:"1024"}),".",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Use ",(0,r.jsx)(s.code,{children:"EARLIEST"})," instead of ",(0,r.jsx)(s.code,{children:"EARLIEST_BY"})," on a table that has rollup enabled and was created with any variant of ",(0,r.jsx)(s.code,{children:"EARLIEST"}),", ",(0,r.jsx)(s.code,{children:"LATEST"}),", ",(0,r.jsx)(s.code,{children:"EARLIEST_BY"}),", or ",(0,r.jsx)(s.code,{children:"LATEST_BY"}),". In these cases, the intermediate type already stores the timestamp, and Druid ignores the value passed in ",(0,r.jsx)(s.code,{children:"timestampExpr"}),"."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"LATEST(expr, [maxBytesPerValue])"})}),(0,r.jsxs)(s.td,{children:["Returns the latest value of ",(0,r.jsx)(s.code,{children:"expr"}),(0,r.jsx)("br",{}),"The ",(0,r.jsx)(s.code,{children:"expr"})," must come from a relation with a timestamp column (like ",(0,r.jsx)(s.code,{children:"__time"}),' in a Druid datasource) and the "latest" is taken from the row with the overall latest non-null value of the timestamp column.',(0,r.jsx)("br",{}),"If the latest non-null value of the timestamp column appears in multiple rows, the ",(0,r.jsx)(s.code,{children:"expr"})," may be taken from any of those rows.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"expr"})," is a string or complex type ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," amount of space is allocated for the aggregation. Strings longer than this limit are truncated. The  ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," parameter should be set as low as possible, since high values will lead to wasted memory.",(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"}),"is omitted; it defaults to ",(0,r.jsx)(s.code,{children:"1024"}),"."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"LATEST_BY(expr, timestampExpr, [maxBytesPerValue])"})}),(0,r.jsxs)(s.td,{children:["Returns the latest value of ",(0,r.jsx)(s.code,{children:"expr"}),".",(0,r.jsx)("br",{}),"The latest value of ",(0,r.jsx)(s.code,{children:"expr"})," is taken from the row with the overall latest non-null value of ",(0,r.jsx)(s.code,{children:"timestampExpr"}),".",(0,r.jsx)("br",{}),"If the overall latest non-null value of ",(0,r.jsx)(s.code,{children:"timestampExpr"})," appears in multiple rows, the ",(0,r.jsx)(s.code,{children:"expr"})," may be taken from any of those rows.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"expr"})," is a string or complex type ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," amount of space is allocated for the aggregation. Strings longer than this limit are truncated. The ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," parameter should be set as low as possible, since high values will lead to wasted memory.",(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"}),"is omitted; it defaults to ",(0,r.jsx)(s.code,{children:"1024"}),".",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Use ",(0,r.jsx)(s.code,{children:"LATEST"})," instead of ",(0,r.jsx)(s.code,{children:"LATEST_BY"})," on a table that has rollup enabled and was created with any variant of ",(0,r.jsx)(s.code,{children:"EARLIEST"}),", ",(0,r.jsx)(s.code,{children:"LATEST"}),", ",(0,r.jsx)(s.code,{children:"EARLIEST_BY"}),", or ",(0,r.jsx)(s.code,{children:"LATEST_BY"}),". In these cases, the intermediate type already stores the timestamp, and Druid ignores the value passed in ",(0,r.jsx)(s.code,{children:"timestampExpr"}),"."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"ANY_VALUE(expr, [maxBytesPerValue, [aggregateMultipleValues]])"})}),(0,r.jsxs)(s.td,{children:["Returns any value of ",(0,r.jsx)(s.code,{children:"expr"})," including null. This aggregator can simplify and optimize the performance by returning the first encountered value (including ",(0,r.jsx)(s.code,{children:"null"}),").",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"expr"})," is a string or complex type ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," amount of space is allocated for the aggregation. Strings longer than this limit are truncated. The ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," parameter should be set as low as possible, since high values will lead to wasted memory.",(0,r.jsx)("br",{}),"If ",(0,r.jsx)(s.code,{children:"maxBytesPerValue"})," is omitted; it defaults to ",(0,r.jsx)(s.code,{children:"1024"}),". ",(0,r.jsx)(s.code,{children:"aggregateMultipleValues"})," is an optional boolean flag controls the behavior of aggregating a ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/multi-value-dimensions",children:"multi-value dimension"}),". ",(0,r.jsx)(s.code,{children:"aggregateMultipleValues"})," is set as true by default and returns the stringified array in case of a multi-value dimension. By setting it to false, function will return first value instead."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"GROUPING(expr, expr...)"})}),(0,r.jsxs)(s.td,{children:["Returns a number to indicate which groupBy dimension is included in a row, when using ",(0,r.jsx)(s.code,{children:"GROUPING SETS"}),". Refer to ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/aggregations#grouping-aggregator",children:"additional documentation"})," on how to infer this number."]}),(0,r.jsx)(s.td,{children:"N/A"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"ARRAY_AGG([DISTINCT] expr, [size])"})}),(0,r.jsxs)(s.td,{children:["Collects all values of the specified expression into an array. To include only unique values, specify ",(0,r.jsx)(s.code,{children:"DISTINCT"}),". ",(0,r.jsx)(s.code,{children:"size"})," determines the maximum aggregation size in bytes and defaults to 1024 bytes. If the resulting array exceeds the size limit, the query fails. ",(0,r.jsx)(s.code,{children:"ORDER BY"})," is not supported. The order of elements in the output array may vary depending on the processing order."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"ARRAY_CONCAT_AGG([DISTINCT] expr, [size])"})}),(0,r.jsxs)(s.td,{children:["Concatenates array inputs into a single array. To include only unique values, specify ",(0,r.jsx)(s.code,{children:"DISTINCT"}),". ",(0,r.jsx)(s.code,{children:"expr"})," must be an array. ",(0,r.jsx)(s.code,{children:"size"})," determines the maximum aggregation size in bytes and defaults to 1024 bytes. If the resulting array exceeds the size limit, the query fails. Druid ignores null array expressions, but null values within arrays are included in the output. ",(0,r.jsx)(s.code,{children:"ORDER BY"})," is not supported. The order of elements in the output array may vary depending on the processing order."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"STRING_AGG([DISTINCT] expr, [separator, [size]])"})}),(0,r.jsxs)(s.td,{children:["Collects all values (or all distinct values) of ",(0,r.jsx)(s.code,{children:"expr"})," into a single STRING, ignoring null values. Each value is joined by an optional ",(0,r.jsx)(s.code,{children:"separator"}),", which must be a literal STRING. If the ",(0,r.jsx)(s.code,{children:"separator"})," is not provided, strings are concatenated without a separator.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"An optional ",(0,r.jsx)(s.code,{children:"size"})," in bytes can be supplied to limit aggregation size (default of 1024 bytes). If the aggregated string grows larger than the maximum size in bytes, the query will fail. Use of ",(0,r.jsx)(s.code,{children:"ORDER BY"})," within the ",(0,r.jsx)(s.code,{children:"STRING_AGG"})," expression is not currently supported, and the ordering of results within the output string may vary depending on processing order."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"LISTAGG([DISTINCT] expr, [separator, [size]])"})}),(0,r.jsxs)(s.td,{children:["Synonym for ",(0,r.jsx)(s.code,{children:"STRING_AGG"}),"."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"BIT_AND(expr)"})}),(0,r.jsx)(s.td,{children:"Performs a bitwise AND operation on all input values."}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"BIT_OR(expr)"})}),(0,r.jsx)(s.td,{children:"Performs a bitwise OR operation on all input values."}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"BIT_XOR(expr)"})}),(0,r.jsx)(s.td,{children:"Performs a bitwise XOR operation on all input values."}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"null"})})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"sketch-functions",children:"Sketch functions"}),"\n",(0,r.jsxs)(s.p,{children:["These functions create sketch objects that you can use to perform fast, approximate analyses.\nFor advice on choosing approximate aggregation functions, check out our ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/aggregations#approx",children:"approximate aggregations documentation"}),".\nTo operate on sketch objects, see the scalar ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/sql-scalar#sketch-functions",children:"DataSketches post aggregator functions"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"hll-sketch-functions",children:"HLL sketch functions"}),"\n",(0,r.jsxs)(s.p,{children:["Load the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-extension",children:"DataSketches extension"})," to use the following functions."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Function"}),(0,r.jsx)(s.th,{children:"Notes"}),(0,r.jsx)(s.th,{children:"Default"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT_DS_HLL(expr, [lgK, tgtHllType])"})}),(0,r.jsxs)(s.td,{children:["Counts distinct values of ",(0,r.jsx)(s.code,{children:"expr"}),", which can be a regular column or an ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-hll",children:"HLL sketch"})," column. Results are always approximate, regardless of the value of ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/sql-query-context",children:(0,r.jsx)(s.code,{children:"useApproximateCountDistinct"})}),". The ",(0,r.jsx)(s.code,{children:"lgK"})," and ",(0,r.jsx)(s.code,{children:"tgtHllType"})," parameters here are, like the equivalents in the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-hll#aggregators",children:"aggregator"}),", described in the HLL sketch documentation. See also ",(0,r.jsx)(s.code,{children:"COUNT(DISTINCT expr)"}),"."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"0"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"DS_HLL(expr, [lgK, tgtHllType])"})}),(0,r.jsxs)(s.td,{children:["Creates an ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-hll",children:"HLL sketch"})," on the values of ",(0,r.jsx)(s.code,{children:"expr"}),", which can be a regular column or a column containing HLL sketches. The ",(0,r.jsx)(s.code,{children:"lgK"})," and ",(0,r.jsx)(s.code,{children:"tgtHllType"})," parameters are described in the HLL sketch documentation."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"'0'"})," (STRING)"]})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"theta-sketch-functions",children:"Theta sketch functions"}),"\n",(0,r.jsxs)(s.p,{children:["Load the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-extension",children:"DataSketches extension"})," to use the following functions."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Function"}),(0,r.jsx)(s.th,{children:"Notes"}),(0,r.jsx)(s.th,{children:"Default"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"APPROX_COUNT_DISTINCT_DS_THETA(expr, [size])"})}),(0,r.jsxs)(s.td,{children:["Counts distinct values of ",(0,r.jsx)(s.code,{children:"expr"}),", which can be a regular column or a ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-theta",children:"Theta sketch"})," column. Results are always approximate, regardless of the value of ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/sql-query-context",children:(0,r.jsx)(s.code,{children:"useApproximateCountDistinct"})}),". The ",(0,r.jsx)(s.code,{children:"size"})," parameter is described in the Theta sketch documentation. See also ",(0,r.jsx)(s.code,{children:"COUNT(DISTINCT expr)"}),"."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"0"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"DS_THETA(expr, [size])"})}),(0,r.jsxs)(s.td,{children:["Creates a ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-theta",children:"Theta sketch"})," on the values of ",(0,r.jsx)(s.code,{children:"expr"}),", which can be a regular column or a column containing Theta sketches. The ",(0,r.jsx)(s.code,{children:"size"})," parameter is described in the Theta sketch documentation."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"'0.0'"})," (STRING)"]})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"quantiles-sketch-functions",children:"Quantiles sketch functions"}),"\n",(0,r.jsxs)(s.p,{children:["Load the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-extension",children:"DataSketches extension"})," to use the following functions."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Function"}),(0,r.jsx)(s.th,{children:"Notes"}),(0,r.jsx)(s.th,{children:"Default"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"APPROX_QUANTILE_DS(expr, probability, [k])"})}),(0,r.jsxs)(s.td,{children:["Computes approximate quantiles on numeric or ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-quantiles",children:"Quantiles sketch"})," expressions. The ",(0,r.jsx)(s.code,{children:"probability"})," value should be between 0 and 1, exclusive. The ",(0,r.jsx)(s.code,{children:"k"})," parameter is described in the Quantiles sketch documentation.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"See the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/sql-translation#approximations",children:"known issue"})," with this function."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"NaN"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"DS_QUANTILES_SKETCH(expr, [k])"})}),(0,r.jsxs)(s.td,{children:["Creates a ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-quantiles",children:"Quantiles sketch"})," on the values of ",(0,r.jsx)(s.code,{children:"expr"}),", which can be a regular column or a column containing quantiles sketches. The ",(0,r.jsx)(s.code,{children:"k"})," parameter is described in the Quantiles sketch documentation.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"See the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/querying/sql-translation#approximations",children:"known issue"})," with this function."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"'0'"})," (STRING)"]})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"tuple-sketch-functions",children:"Tuple sketch functions"}),"\n",(0,r.jsxs)(s.p,{children:["Load the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-extension",children:"DataSketches extension"})," to use the following functions."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Function"}),(0,r.jsx)(s.th,{children:"Notes"}),(0,r.jsx)(s.th,{children:"Default"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"DS_TUPLE_DOUBLES(expr[, nominalEntries])"})}),(0,r.jsxs)(s.td,{children:["Creates a ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-tuple",children:"Tuple sketch"})," on a precomputed sketch column ",(0,r.jsx)(s.code,{children:"expr"}),", where the precomputed Tuple sketch contains an array of double values as its Summary Object. The ",(0,r.jsx)(s.code,{children:"nominalEntries"})," override parameter is optional and described in the Tuple sketch documentation."]}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"DS_TUPLE_DOUBLES(dimensionColumnExpr, metricColumnExpr1[, metricColumnExpr2, ...], [nominalEntries])"})}),(0,r.jsxs)(s.td,{children:["Creates a ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-tuple",children:"Tuple sketch"})," on raw data. The Tuples sketch will contain an array of double values as its Summary Object based on the dimension value of ",(0,r.jsx)(s.code,{children:"dimensionColumnExpr"})," and the numeric metric values contained in one or more ",(0,r.jsx)(s.code,{children:"metricColumnExpr"})," columns. If the last value of the array is a numeric literal, Druid assumes that the value is an override parameter for ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-core/datasketches-tuple",children:"nominal entries"}),"."]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"t-digest-sketch-functions",children:"T-Digest sketch functions"}),"\n",(0,r.jsxs)(s.p,{children:["Load the T-Digest extension to use the following functions. See the ",(0,r.jsx)(s.a,{href:"/docs/33.0.0/development/extensions-contrib/tdigestsketch-quantiles",children:"T-Digest extension"})," for additional details and for more information on these functions."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Function"}),(0,r.jsx)(s.th,{children:"Notes"}),(0,r.jsx)(s.th,{children:"Default"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"TDIGEST_QUANTILE(expr, quantileFraction, [compression])"})}),(0,r.jsxs)(s.td,{children:["Builds a T-Digest sketch on values produced by ",(0,r.jsx)(s.code,{children:"expr"})," and returns the value for the quantile. Compression parameter (default value 100) determines the accuracy and size of the sketch. Higher compression means higher accuracy but more space to store sketches."]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Double.NaN"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"TDIGEST_GENERATE_SKETCH(expr, [compression])"})}),(0,r.jsxs)(s.td,{children:["Builds a T-Digest sketch on values produced by ",(0,r.jsx)(s.code,{children:"expr"}),". Compression parameter (default value 100) determines the accuracy and size of the sketch Higher compression means higher accuracy but more space to store sketches."]}),(0,r.jsx)(s.td,{children:"Empty base64 encoded T-Digest sketch STRING"})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);