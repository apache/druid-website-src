"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8793],{28453:(o,a,e)=>{e.d(a,{R:()=>c,x:()=>l});var n=e(96540);const s={},t=n.createContext(s);function c(o){const a=n.useContext(t);return n.useMemo((function(){return"function"==typeof o?o(a):{...a,...o}}),[a,o])}function l(o){let a;return a=o.disableParentContext?"function"==typeof o.components?o.components(s):o.components||s:c(o.components),n.createElement(t.Provider,{value:a},o.children)}},60900:(o,a,e)=>{e.r(a),e.d(a,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"operations/use_sbt_to_build_fat_jar","title":"Content for build.sbt","description":"\x3c!--","source":"@site/docs/33.0.0/operations/use_sbt_to_build_fat_jar.md","sourceDirName":"operations","slug":"/operations/use_sbt_to_build_fat_jar","permalink":"/docs/33.0.0/operations/use_sbt_to_build_fat_jar","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"use_sbt_to_build_fat_jar","title":"Content for build.sbt"},"sidebar":"docs","previous":{"title":"Metadata Migration","permalink":"/docs/33.0.0/operations/metadata-migration"},"next":{"title":"Developing on Druid","permalink":"/docs/33.0.0/development/overview"}}');var s=e(74848),t=e(28453);const c={id:"use_sbt_to_build_fat_jar",title:"Content for build.sbt"},l=void 0,r={},i=[];function m(o){const a={code:"code",pre:"pre",...(0,t.R)(),...o.components};return(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-scala",children:'libraryDependencies ++= Seq(\n  "com.amazonaws" % "aws-java-sdk" % "1.9.23" exclude("common-logging", "common-logging"),\n  "org.joda" % "joda-convert" % "1.7",\n  "joda-time" % "joda-time" % "2.7",\n  "org.apache.druid" % "druid" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid" % "druid-services" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid" % "druid-indexing-service" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid" % "druid-indexing-hadoop" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid.extensions" % "mysql-metadata-storage" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid.extensions" % "druid-s3-extensions" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid.extensions" % "druid-histogram" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid.extensions" % "druid-hdfs-storage" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "com.fasterxml.jackson.core" % "jackson-annotations" % "2.3.0",\n  "com.fasterxml.jackson.core" % "jackson-core" % "2.3.0",\n  "com.fasterxml.jackson.core" % "jackson-databind" % "2.3.0",\n  "com.fasterxml.jackson.datatype" % "jackson-datatype-guava" % "2.3.0",\n  "com.fasterxml.jackson.datatype" % "jackson-datatype-joda" % "2.3.0",\n  "com.fasterxml.jackson.jaxrs" % "jackson-jaxrs-base" % "2.3.0",\n  "com.fasterxml.jackson.jaxrs" % "jackson-jaxrs-json-provider" % "2.3.0",\n  "com.fasterxml.jackson.jaxrs" % "jackson-jaxrs-smile-provider" % "2.3.0",\n  "com.fasterxml.jackson.module" % "jackson-module-jaxb-annotations" % "2.3.0",\n  "com.sun.jersey" % "jersey-servlet" % "1.17.1",\n  "mysql" % "mysql-connector-java" % "8.2.0",\n  "org.scalatest" %% "scalatest" % "2.2.3" % "test",\n  "org.mockito" % "mockito-core" % "1.10.19" % "test"\n)\n\nassemblyMergeStrategy in assembly := {\n  case path if path contains "pom." => MergeStrategy.first\n  case path if path contains "javax.inject.Named" => MergeStrategy.first\n  case path if path contains "mime.types" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/impl/SimpleLog.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/impl/SimpleLog$1.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/impl/NoOpLog.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/LogFactory.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/LogConfigurationException.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/Log.class" => MergeStrategy.first\n  case path if path contains "META-INF/jersey-module-version" => MergeStrategy.first\n  case path if path contains ".properties" => MergeStrategy.first\n  case path if path contains ".class" => MergeStrategy.first\n  case x =>\n    val oldStrategy = (assemblyMergeStrategy in assembly).value\n    oldStrategy(x)\n}\n'})})}function u(o={}){const{wrapper:a}={...(0,t.R)(),...o.components};return a?(0,s.jsx)(a,{...o,children:(0,s.jsx)(m,{...o})}):m(o)}}}]);