"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3950],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),k=r,c=u["".concat(d,".").concat(k)]||u[k]||m[k]||i;return n?a.createElement(c,o(o({ref:t},s),{},{components:n})):a.createElement(c,o({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},88422:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>N,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={id:"k8s-jobs",title:"MM-less Druid in K8s"},d=void 0,p={unversionedId:"development/extensions-contrib/k8s-jobs",id:"development/extensions-contrib/k8s-jobs",title:"MM-less Druid in K8s",description:"\x3c!--",source:"@site/docs/latest/development/extensions-contrib/k8s-jobs.md",sourceDirName:"development/extensions-contrib",slug:"/development/extensions-contrib/k8s-jobs",permalink:"/docs/latest/development/extensions-contrib/k8s-jobs",draft:!1,tags:[],version:"current",frontMatter:{id:"k8s-jobs",title:"MM-less Druid in K8s"}},s={},u=[{value:"How it works",id:"how-it-works",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Dynamic config",id:"dynamic-config",level:3},{value:"Get dynamic configuration",id:"get-dynamic-configuration",level:4},{value:"URL",id:"url",level:5},{value:"Responses",id:"responses",level:5},{value:"Sample request",id:"sample-request",level:5},{value:"Sample response",id:"sample-response",level:5},{value:"Update dynamic configuration",id:"update-dynamic-configuration",level:4},{value:"URL",id:"url-1",level:5},{value:"Header parameters",id:"header-parameters",level:5},{value:"Responses",id:"responses-1",level:5},{value:"Sample request",id:"sample-request-1",level:5},{value:"Sample response",id:"sample-response-1",level:5},{value:"Get dynamic configuration history",id:"get-dynamic-configuration-history",level:4},{value:"URL",id:"url-2",level:5},{value:"Query parameters",id:"query-parameters",level:5},{value:"Responses",id:"responses-2",level:5},{value:"Sample request",id:"sample-request-2",level:5},{value:"Sample response",id:"sample-response-2",level:5},{value:"Pod adapters",id:"pod-adapters",level:2},{value:"Overlord Single Container Pod Adapter/Overlord Multi Container Pod Adapter",id:"overlord-single-container-pod-adapteroverlord-multi-container-pod-adapter",level:3},{value:"Custom Template Pod Adapter",id:"custom-template-pod-adapter",level:3},{value:"Pod template selection",id:"pod-template-selection",level:4},{value:"Select based on task type",id:"select-based-on-task-type",level:5},{value:"Select based on one or more conditions",id:"select-based-on-one-or-more-conditions",level:5},{value:"Example",id:"example",level:5},{value:"Properties",id:"properties",level:3},{value:"Metrics added",id:"metrics-added",level:3},{value:"Gotchas",id:"gotchas",level:3},{value:"Migration/Kubernetes and Worker Task Runner",id:"migrationkubernetes-and-worker-task-runner",level:2},{value:"Additional Configurations",id:"additional-configurations",level:3}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},k=m("Tabs"),c=m("TabItem"),g={toc:u},h="wrapper";function N(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(h,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Apache Druid Extension to enable using Kubernetes for launching and managing tasks instead of the Middle Managers.  This extension allows you to launch tasks as kubernetes jobs removing the need for your middle manager.  "),(0,i.kt)("p",null,"Consider this an ",(0,i.kt)("a",{parentName:"p",href:"/docs/latest/development/experimental"},"EXPERIMENTAL")," feature mostly because it has not been tested yet on a wide variety of long-running Druid clusters."),(0,i.kt)("h2",{id:"how-it-works"},"How it works"),(0,i.kt)("p",null,"The K8s extension builds a pod spec for each task using the specified pod adapter. All jobs are natively restorable, they are decoupled from the Druid deployment, thus restarting pods or doing upgrades has no affect on tasks in flight.  They will continue to run and when the overlord comes back up it will start tracking them again.  "),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"To use this extension please make sure to  ",(0,i.kt)("a",{parentName:"p",href:"/docs/latest/configuration/extensions#loading-extensions"},"include"),(0,i.kt)("inlineCode",{parentName:"p"},"druid-kubernetes-overlord-extensions")," in the extensions load list for your overlord process."),(0,i.kt)("p",null,"The extension uses ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.capacity")," to limit the number of k8s jobs in flight. A good initial value for this would be the sum of the total task slots of all the middle managers you were running before switching to K8s based ingestion. The K8s task runner uses one thread per Job that is created, so setting this number too large can cause memory issues on the overlord. Additionally set the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.namespace")," to the namespace in which you are running druid."),(0,i.kt)("p",null,"Other configurations required are:\n",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.type: k8s")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.task.encapsulatedTask: true")),(0,i.kt)("h3",{id:"dynamic-config"},"Dynamic config"),(0,i.kt)("p",null,"Druid operators can dynamically tune certain features within this extension. You don't need to restart the Overlord\nservice for these changes to take effect."),(0,i.kt)("p",null,"Druid can dynamically tune ",(0,i.kt)("a",{parentName:"p",href:"#pod-template-selection"},"pod template selection"),", which allows you to configure the pod\ntemplate based on the task to be run. To enable dynamic pod template selection, first configure the\n",(0,i.kt)("a",{parentName:"p",href:"#custom-template-pod-adapter"},"custom template pod adapter"),"."),(0,i.kt)("p",null,"Use the following APIs to view and update the dynamic configuration for the Kubernetes task runner."),(0,i.kt)("p",null,'To use these APIs, ensure you have read and write permissions for the CONFIG resource type with the resource name\n"CONFIG". For more information on permissions, see\n',(0,i.kt)("a",{parentName:"p",href:"/docs/latest/operations/security-user-auth#config"},"User authentication and authorization"),"."),(0,i.kt)("h4",{id:"get-dynamic-configuration"},"Get dynamic configuration"),(0,i.kt)("p",null,"Retrieves the current dynamic execution config for the Kubernetes task runner.\nReturns a JSON object with the dynamic configuration properties."),(0,i.kt)("h5",{id:"url"},"URL"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GET")," ",(0,i.kt)("inlineCode",{parentName:"p"},"/druid/indexer/v1/k8s/taskrunner/executionconfig")),(0,i.kt)("h5",{id:"responses"},"Responses"),(0,i.kt)(k,{mdxType:"Tabs"},(0,i.kt)(c,{value:"1",label:"200 SUCCESS",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Successfully retrieved dynamic configuration")))),(0,i.kt)("hr",null),(0,i.kt)("h5",{id:"sample-request"},"Sample request"),(0,i.kt)(k,{mdxType:"Tabs"},(0,i.kt)(c,{value:"2",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/k8s/taskrunner/executionconfig"\n'))),(0,i.kt)(c,{value:"3",label:"HTTP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-HTTP"},"GET /druid/indexer/v1/k8s/taskrunner/executionconfig HTTP/1.1\nHost: http://ROUTER_IP:ROUTER_PORT\n")))),(0,i.kt)("h5",{id:"sample-response"},"Sample response"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"View the response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "default",\n  "podTemplateSelectStrategy":\n  {\n    "type": "selectorBased",\n    "selectors": [\n      {\n        "selectionKey": "podSpec1",\n        "context.tags": {\n          "userProvidedTag": ["tag1", "tag2"]\n        },\n        "dataSource": ["wikipedia"]\n      },\n      {\n        "selectionKey": "podSpec2",\n        "type": ["index_kafka"]\n      }\n    ]\n  }\n}\n'))),(0,i.kt)("h4",{id:"update-dynamic-configuration"},"Update dynamic configuration"),(0,i.kt)("p",null,"Updates the dynamic configuration for the Kubernetes Task Runner"),(0,i.kt)("h5",{id:"url-1"},"URL"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"POST")," ",(0,i.kt)("inlineCode",{parentName:"p"},"/druid/indexer/v1/k8s/taskrunner/executionconfig")),(0,i.kt)("h5",{id:"header-parameters"},"Header parameters"),(0,i.kt)("p",null,"The endpoint supports the following optional header parameters to populate the ",(0,i.kt)("inlineCode",{parentName:"p"},"author")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"comment")," fields in the configuration history."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X-Druid-Author"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type: String"),(0,i.kt)("li",{parentName:"ul"},"Author of the configuration change."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X-Druid-Comment"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type: String"),(0,i.kt)("li",{parentName:"ul"},"Description for the update.")))),(0,i.kt)("h5",{id:"responses-1"},"Responses"),(0,i.kt)(k,{mdxType:"Tabs"},(0,i.kt)(c,{value:"4",label:"200 SUCCESS",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Successfully updated dynamic configuration")))),(0,i.kt)("hr",null),(0,i.kt)("h5",{id:"sample-request-1"},"Sample request"),(0,i.kt)(k,{mdxType:"Tabs"},(0,i.kt)(c,{value:"5",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/k8s/taskrunner/executionconfig" \\\n--header \'Content-Type: application/json\' \\\n--data \'{\n  "type": "default",\n  "podTemplateSelectStrategy":\n  {\n    "type": "selectorBased",\n    "selectors": [\n      {\n        "selectionKey": "podSpec1",\n        "context.tags":\n        {\n          "userProvidedTag": ["tag1", "tag2"]\n        },\n        "dataSource": ["wikipedia"]\n      },\n      {\n        "selectionKey": "podSpec2",\n        "type": ["index_kafka"]\n      }\n    ]\n  }\n}\'\n'))),(0,i.kt)(c,{value:"6",label:"HTTP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-HTTP"},'POST /druid/indexer/v1/k8s/taskrunner/executionconfig HTTP/1.1\nHost: http://ROUTER_IP:ROUTER_PORT\nContent-Type: application/json\n\n{\n  "type": "default",\n  "podTemplateSelectStrategy":\n  {\n    "type": "selectorBased",\n    "selectors": [\n      {\n        "selectionKey": "podSpec1",\n        "context.tags":\n        {\n          "userProvidedTag": ["tag1", "tag2"]\n        },\n        "dataSource": ["wikipedia"]\n      },\n      {\n        "selectionKey": "podSpec2",\n        "type": ["index_kafka"]\n      }\n    ]\n  }\n}\n')))),(0,i.kt)("h5",{id:"sample-response-1"},"Sample response"),(0,i.kt)("p",null,"A successful request returns an HTTP ",(0,i.kt)("inlineCode",{parentName:"p"},"200 OK")," message code and an empty response body."),(0,i.kt)("h4",{id:"get-dynamic-configuration-history"},"Get dynamic configuration history"),(0,i.kt)("p",null,"Retrieves the history of changes to Kubernetes task runner's dynamic execution config over an interval of time. Returns\nan empty array if there are no history records available."),(0,i.kt)("h5",{id:"url-2"},"URL"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GET")," ",(0,i.kt)("inlineCode",{parentName:"p"},"/druid/indexer/v1/k8s/taskrunner/executionconfig/history")),(0,i.kt)("h5",{id:"query-parameters"},"Query parameters"),(0,i.kt)("p",null,"The endpoint supports the following optional query parameters to filter results."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"interval")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type: String"),(0,i.kt)("li",{parentName:"ul"},"Limit the results to the specified time interval in ISO 8601 format delimited with ",(0,i.kt)("inlineCode",{parentName:"li"},"/"),". For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"2023-07-13/2023-07-19"),". The default interval is one week. You can change this period by setting ",(0,i.kt)("inlineCode",{parentName:"li"},"druid.audit.manager.auditHistoryMillis")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"runtime.properties")," file for the Coordinator."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"count")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Type: Integer"),(0,i.kt)("li",{parentName:"ul"},"Limit the number of results to the last ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," entries.")))),(0,i.kt)("h5",{id:"responses-2"},"Responses"),(0,i.kt)(k,{mdxType:"Tabs"},(0,i.kt)(c,{value:"1",label:"200 SUCCESS",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Successfully retrieved dynamic configuration")))),(0,i.kt)("hr",null),(0,i.kt)("h5",{id:"sample-request-2"},"Sample request"),(0,i.kt)(k,{mdxType:"Tabs"},(0,i.kt)(c,{value:"2",label:"cURL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://ROUTER_IP:ROUTER_PORT/druid/indexer/v1/k8s/taskrunner/executionconfig/history"\n'))),(0,i.kt)(c,{value:"3",label:"HTTP",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-HTTP"},"GET /druid/indexer/v1/k8s/taskrunner/executionconfig/history HTTP/1.1\nHost: http://ROUTER_IP:ROUTER_PORT\n")))),(0,i.kt)("h5",{id:"sample-response-2"},"Sample response"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"View the response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "key": "k8s.taskrunner.config",\n    "type": "k8s.taskrunner.config",\n    "auditInfo": {\n      "author": "",\n      "comment": "",\n      "ip": "127.0.0.1"\n    },\n    "payload": "{\\"type\\": \\"default\\",\\"podTemplateSelectStrategy\\":{\\"type\\": \\"taskType\\"}",\n    "auditTime": "2024-06-13T20:59:51.622Z"\n  }\n]\n'))),(0,i.kt)("h2",{id:"pod-adapters"},"Pod adapters"),(0,i.kt)("p",null,"The logic defining how the pod template is built for your Kubernetes Job depends on which pod adapter you have specified."),(0,i.kt)("h3",{id:"overlord-single-container-pod-adapteroverlord-multi-container-pod-adapter"},"Overlord Single Container Pod Adapter/Overlord Multi Container Pod Adapter"),(0,i.kt)("p",null,"The overlord single container pod adapter takes the podSpec of your ",(0,i.kt)("inlineCode",{parentName:"p"},"Overlord")," pod and creates a kubernetes job from this podSpec.  This is the default pod adapter implementation, to explicitly enable it you can specify the runtime property ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.k8s.adapter.type: overlordSingleContainer")),(0,i.kt)("p",null,"The overlord multi container pod adapter takes the podSpec of your ",(0,i.kt)("inlineCode",{parentName:"p"},"Overlord")," pod and creates a kubernetes job from this podSpec.  It uses kubexit to manage dependency ordering between the main container that runs your druid peon and other sidecars defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Overlord")," pod spec. Thus if you have sidecars such as Splunk or Istio it will be able to handle them. To enable this pod adapter you can specify the runtime property ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.k8s.adapter.type: overlordMultiContainer")," "),(0,i.kt)("p",null,"For the sidecar support to work for the multi container pod adapter, your entry point / command in docker must be explicitly defined your spec."),(0,i.kt)("p",null,"You can't have something like this:\nDockerfile:\n",(0,i.kt)("inlineCode",{parentName:"p"},'ENTRYPOINT: ["foo.sh"]')),(0,i.kt)("p",null,"and in your sidecar specs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-container:"},"        name: foo\n        args: \n           - arg1\n           - arg2 \n")),(0,i.kt)("p",null,"That will not work, because we cannot decipher what your command is, the extension needs to know it explicitly.\n*",(0,i.kt)("em",{parentName:"p"},"Even for sidecars like Istio which are dynamically created by the service mesh, this needs to happen.")),(0,i.kt)("p",null,"Instead, do the following:\nYou can keep your Dockerfile the same but you must have a sidecar spec like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-container:"},"        name: foo\n        command: foo.sh\n        args: \n           - arg1\n           - arg2 \n")),(0,i.kt)("p",null,"For both of these adapters, you can add optional labels to your K8s jobs / pods if you need them by using the following configuration:\n",(0,i.kt)("inlineCode",{parentName:"p"},'druid.indexer.runner.labels: \'{"key":"value"}\''),"\nAnnotations are the same with:\n",(0,i.kt)("inlineCode",{parentName:"p"},'druid.indexer.runner.annotations: \'{"key":"value"}\'')),(0,i.kt)("p",null,"All other configurations you had for the middle manager tasks must be moved under the overlord with one caveat, you must specify javaOpts as an array:\n",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.javaOptsArray"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.javaOpts")," is no longer supported."),(0,i.kt)("p",null,"If you are running without a middle manager you need to also use ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.processing.intermediaryData.storage.type=deepstore")),(0,i.kt)("h3",{id:"custom-template-pod-adapter"},"Custom Template Pod Adapter"),(0,i.kt)("p",null,"The custom template pod adapter allows you to specify a pod template file per task type for more flexibility on how to define your pods. This adapter expects a ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates"},"Pod Template")," to be available on the overlord's file system. This pod template is used as the base of the pod spec for the Kubernetes Job. You can override things like labels, environment variables, resources, annotation, or even the base image with this template. To enable this pod adapter you can specify the runtime property ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.k8s.adapter.type: customTemplateAdapter")),(0,i.kt)("p",null,"The base pod template must be specified as the runtime property ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.k8s.podTemplate.base: /path/to/basePodSpec.yaml")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example Pod Template that uses the regular druid docker image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: "v1"\nkind: "PodTemplate"\ntemplate:\n  metadata:\n    annotations:\n      sidecar.istio.io/proxyCPU: "512m" # to handle a injected istio sidecar\n    labels:\n      app.kubernetes.io/name: "druid-realtime-backend"\n  spec:\n    affinity: {}\n    containers:\n    - command:\n        - sh\n        - -c\n        - |\n          /peon.sh /druid/data 1\n      env:\n      - name: CUSTOM_ENV_VARIABLE\n        value: "hello"\n      image: apache/druid:31.0.1\n      name: main\n      ports:\n      - containerPort: 8091\n        name: druid-tls-port\n        protocol: TCP\n      - containerPort: 8100\n        name: druid-port\n        protocol: TCP\n      resources:\n        limits:\n          cpu: "1"\n          memory: 2400M\n        requests:\n          cpu: "1"\n          memory: 2400M\n      volumeMounts:\n      - mountPath: /opt/druid/conf/druid/cluster/master/coordinator-overlord # runtime props are still mounted in this location because that\'s where peon.sh looks for configs\n        name: nodetype-config-volume\n        readOnly: true\n      - mountPath: /druid/data\n        name: data-volume\n      - mountPath: /druid/deepstorage\n        name: deepstorage-volume\n    restartPolicy: "Never"\n    securityContext:\n      fsGroup: 1000\n      runAsGroup: 1000\n      runAsUser: 1000\n    tolerations:\n    - effect: NoExecute\n      key: node.kubernetes.io/not-ready\n      operator: Exists\n      tolerationSeconds: 300\n    - effect: NoExecute\n      key: node.kubernetes.io/unreachable\n      operator: Exists\n      tolerationSeconds: 300\n    volumes:\n    - configMap:\n        defaultMode: 420\n        name: druid-tiny-cluster-peons-config\n      name: nodetype-config-volume\n    - emptyDir: {}\n      name: data-volume\n    - emptyDir: {}\n      name: deepstorage-volume\n'))),(0,i.kt)("p",null,"The below runtime properties need to be passed to the Job's peon process."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"druid.port=8100 (what port the peon should run on)\ndruid.peon.mode=remote\ndruid.service=druid/peon (for metrics reporting)\ndruid.indexer.task.baseTaskDir=/druid/data (this should match the argument to the ./peon.sh run command in the PodTemplate)\ndruid.indexer.runner.type=k8s\ndruid.indexer.task.encapsulatedTask=true\n")),(0,i.kt)("p",null,"Any runtime property or JVM config used by the peon process can also be passed. E.G. below is a example of a ConfigMap that can be used to generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"nodetype-config-volume")," mount in the above template."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example ConfigMap"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'kind: ConfigMap\nmetadata:\n    name: druid-tiny-cluster-peons-config\n    namespace: default\napiVersion: v1\ndata:\n    jvm.config: |-\n        -server\n        -XX:MaxDirectMemorySize=1000M\n        -Duser.timezone=UTC\n        -Dfile.encoding=UTF-8\n        -Dlog4j.debug\n        -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager\n        -Djava.io.tmpdir=/druid/data\n        -Xmx1024M\n        -Xms1024M\n    log4j2.xml: |-\n        <?xml version="1.0" encoding="UTF-8" ?>\n        <Configuration status="WARN">\n            <Appenders>\n                <Console name="Console" target="SYSTEM_OUT">\n                    <PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/>\n                </Console>\n            </Appenders>\n            <Loggers>\n                <Root level="info">\n                    <AppenderRef ref="Console"/>\n                </Root>\n            </Loggers>\n        </Configuration>\n    runtime.properties: |\n        druid.port=8100\n        druid.service=druid/peon\n        druid.server.http.numThreads=5\n        druid.indexer.task.baseTaskDir=/druid/data\n        druid.indexer.runner.type=k8s\n        druid.peon.mode=remote\n        druid.indexer.task.encapsulatedTask=true\n'))),(0,i.kt)("h4",{id:"pod-template-selection"},"Pod template selection"),(0,i.kt)("p",null,"The pod template adapter can select which pod template should be used for a task using the ",(0,i.kt)("a",{parentName:"p",href:"#dynamic-config"},"task runner execution config")),(0,i.kt)("h5",{id:"select-based-on-task-type"},"Select based on task type"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TaskTypePodTemplateSelectStrategy")," strategy selects pod templates based on task type for execution purposes,\nimplementing the behavior that maps templates to specific task types. This is the default pod template selection\nstrategy. To explicitly select this strategy, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"podTemplateSelectStrategy")," in the dynamic execution config to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{ "type": "default" }\n')),(0,i.kt)("p",null,"Task specific pod templates can be specified as the runtime property\n",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.k8s.podTemplate.{taskType}: /path/to/taskSpecificPodSpec.yaml")," where {taskType} is the name of the\ntask type. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"index_parallel"),"."),(0,i.kt)("p",null,"If you are trying to use the default image's environment variable parsing feature to set runtime properties, you need to add a extra escape underscore when specifying pod templates.\nFor example, set the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"druid_indexer_runner_k8s_podTemplate_index__kafka")," when you set the runtime property ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.k8s.podTemplate.index_kafka")),(0,i.kt)("p",null,"The following example shows a configuration for task-based pod template selection:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-properties"},"druid.indexer.runner.k8s.podTemplate.base=/path/to/basePodSpec.yaml\ndruid.indexer.runner.k8s.podTemplate.index_kafka=/path/to/kafkaPodSpec.yaml\n")),(0,i.kt)("h5",{id:"select-based-on-one-or-more-conditions"},"Select based on one or more conditions"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SelectorBasedPodTemplateSelectStrategy")," strategy evaluates a series of criteria within ",(0,i.kt)("inlineCode",{parentName:"p"},"selectors")," to determine\nwhich pod template to use to run the task. Pod  templates are configured in the runtime properties like\n",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.k8s.podTemplate.<selectionKey>=..."),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "selectorBased",\n  "selectors": [\n    {\n      "selectionKey": "podSpec1", \n      "context.tags":\n      {\n        "userProvidedTag": ["tag1", "tag2"]\n      },\n      "dataSource": ["wikipedia"]\n    },\n    {\n      "selectionKey": "podSpec2",\n      "type": ["index_kafka"]\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"Selectors are processed in order. Druid selects the template based on the first matching selector. If a  task does not\nmatch any selector in the list, it will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"base")," pod template."),(0,i.kt)("p",null,"For a task to match a selector, all the conditions within the selector must match. A selector can match on"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type"),": Type of the task"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dataSource"),": Destination datasource of the task."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"context.tags"),": Tags passed in the task's context.")),(0,i.kt)("h5",{id:"example"},"Example"),(0,i.kt)("p",null,"Set the following runtime properties to define the pod specs that can be used by Druid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-properties"},"druid.indexer.runner.k8s.podTemplate.base=/path/to/basePodSpec.yaml\ndruid.indexer.runner.k8s.podTemplate.podSpec1=/path/to/podSpecWithHighMemRequests.yaml\ndruid.indexer.runner.k8s.podTemplate.podSpec2=/path/to/podSpecWithLowCpuRequests.yaml\n")),(0,i.kt)("p",null,"Set the dynamic execution config to define the pod template selection strategy."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "default",\n  "podTemplateSelectStrategy": {\n    "type": "selectorBased",\n    "selectors": [\n      {\n        "selectionKey": "podSpec1",\n        "context.tags": { "userProvidedTag": ["tag1", "tag2"] },\n        "dataSource": ["wikipedia"]\n      },\n      {\n        "selectionKey": "podSpec2",\n        "type": ["index_kafka"]\n      }\n    ]\n  }\n}\n')),(0,i.kt)("p",null,"Druid selects the pod templates as follows: "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"podSpecWithHighMemRequests.yaml")," when both of the following conditions are met:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"The task context contains a tag with the key ",(0,i.kt)("inlineCode",{parentName:"li"},"userProvidedTag")," that has the value ",(0,i.kt)("inlineCode",{parentName:"li"},"tag1")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"tag2"),"."),(0,i.kt)("li",{parentName:"ol"},"The task targets the ",(0,i.kt)("inlineCode",{parentName:"li"},"wikipedia")," datasource."))),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"podSpecWithLowCpuRequests.yaml")," when the task type is ",(0,i.kt)("inlineCode",{parentName:"li"},"index_kafka"),"."),(0,i.kt)("li",{parentName:"ol"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"basePodSpec.yaml")," for all other tasks.")),(0,i.kt)("p",null,"In this example, if there is an ",(0,i.kt)("inlineCode",{parentName:"p"},"index_kafka")," task for the ",(0,i.kt)("inlineCode",{parentName:"p"},"wikipedia")," datasource with the tag ",(0,i.kt)("inlineCode",{parentName:"p"},"userProvidedTag: tag1"),",\nDruid selects the pod template ",(0,i.kt)("inlineCode",{parentName:"p"},"podSpecWithHighMemRequests.yaml"),"."),(0,i.kt)("h3",{id:"properties"},"Properties"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Possible Values"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.debugJobs")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:null},"Clean up K8s jobs after tasks complete."),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.sidecarSupport")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:null},"Deprecated, specify adapter type as runtime property ",(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.k8s.adapter.type: overlordMultiContainer")," instead. If your overlord pod has sidecars, this will attempt to start the task with the same sidecars as the overlord pod."),(0,i.kt)("td",{parentName:"tr",align:null},"False"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.primaryContainerName")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"If running with sidecars, the ",(0,i.kt)("inlineCode",{parentName:"td"},"primaryContainerName")," should be that of your druid container like ",(0,i.kt)("inlineCode",{parentName:"td"},"druid-overlord"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"First container in ",(0,i.kt)("inlineCode",{parentName:"td"},"podSpec")," list"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.kubexitImage")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"Used kubexit project to help shutdown sidecars when the main pod completes.  Otherwise jobs with sidecars never terminate."),(0,i.kt)("td",{parentName:"tr",align:null},"karlkfi/kubexit:latest"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.disableClientProxy")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:null},"Use this if you have a global http(s) proxy and you wish to bypass it."),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.maxTaskDuration")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Duration")),(0,i.kt)("td",{parentName:"tr",align:null},"Max time a task is allowed to run for before getting killed"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PT4H")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.taskCleanupDelay")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Duration")),(0,i.kt)("td",{parentName:"tr",align:null},"How long do jobs stay around before getting reaped from K8s"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"P2D")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.taskCleanupInterval")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Duration")),(0,i.kt)("td",{parentName:"tr",align:null},"How often to check for jobs to be reaped"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PT10M")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.K8sjobLaunchTimeout")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Duration")),(0,i.kt)("td",{parentName:"tr",align:null},"How long to wait to launch a K8s task before marking it as failed, on a resource constrained cluster it may take some time."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PT1H")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.javaOptsArray")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"JsonArray")),(0,i.kt)("td",{parentName:"tr",align:null},"java opts for the task."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-Xmx1g")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.labels")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"JsonObject")),(0,i.kt)("td",{parentName:"tr",align:null},"Additional labels you want to add to peon pod"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{}")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.annotations")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"JsonObject")),(0,i.kt)("td",{parentName:"tr",align:null},"Additional annotations you want to add to peon pod"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{}")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.peonMonitors")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"JsonArray")),(0,i.kt)("td",{parentName:"tr",align:null},"Overrides ",(0,i.kt)("inlineCode",{parentName:"td"},"druid.monitoring.monitors"),". Use this property if you don't want to inherit monitors from the Overlord."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[]")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.graceTerminationPeriodSeconds")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Long")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of seconds you want to wait after a sigterm for container lifecycle hooks to complete.  Keep at a smaller value if you want tasks to hold locks for shorter periods."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PT30S")," (K8s default)"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.capacity")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Integer")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of concurrent jobs that can be sent to Kubernetes."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"2147483647")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.cpuCoreInMicro")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Integer")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of CPU micro core for the task."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"1000")),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("h3",{id:"metrics-added"},"Metrics added"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Metric"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Dimensions"),(0,i.kt)("th",{parentName:"tr",align:null},"Normal value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"k8s/peon/startup/time")),(0,i.kt)("td",{parentName:"tr",align:null},"Metric indicating the milliseconds for peon pod to startup."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dataSource"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"taskId"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"taskType"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"groupId"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"taskStatus"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"tags")),(0,i.kt)("td",{parentName:"tr",align:null},"Varies")))),(0,i.kt)("h3",{id:"gotchas"},"Gotchas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All Druid Pods belonging to one Druid cluster must be inside the same Kubernetes namespace.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You must have a role binding for the overlord's service account that provides the needed permissions for interacting with Kubernetes. An example spec could be:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: <druid-namespace>\n  name: druid-k8s-task-scheduler\nrules:\n  - apiGroups: ["batch"]\n    resources: ["jobs"]\n    verbs: ["get", "watch", "list", "delete", "create"]\n  - apiGroups: [""]\n    resources: ["pods", "pods/log"]\n    verbs: ["get", "watch", "list", "delete", "create"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: druid-k8s-binding\n  namespace: <druid-namespace>\nsubjects:\n  - kind: ServiceAccount\n    name: <druid-overlord-k8s-service-account>\n    namespace: <druid-namespace>\nroleRef:\n  kind: Role\n  name: druid-k8s-task-scheduler\n  apiGroup: rbac.authorization.k8s.io\n')),(0,i.kt)("h2",{id:"migrationkubernetes-and-worker-task-runner"},"Migration/Kubernetes and Worker Task Runner"),(0,i.kt)("p",null,"If you are running a cluster with tasks running on middle managers or indexers and want to do a zero downtime migration to mm-less ingestion, the mm-less ingestion system is capable of running in migration mode by reading tasks from middle managers/indexers and Kubernetes and writing tasks to either middle managers or to Kubernetes."),(0,i.kt)("p",null,"To do this, set the following property.\n",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.type: k8sAndWorker")," (instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"druid.indexer.runner.type: k8s"),")"),(0,i.kt)("h3",{id:"additional-configurations"},"Additional Configurations"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Possible Values"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.k8sAndWorker.runnerStrategy.type")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"k8s"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"worker"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"taskType"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines the strategy for task runner selection."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"k8s")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.k8sAndWorker.runnerStrategy.workerType")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"httpRemote"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"remote"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the variant of the worker task runner to be utilized."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"httpRemote")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"For ",(0,i.kt)("inlineCode",{parentName:"strong"},"taskType")," runner strategy:")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.k8sAndWorker.runnerStrategy.taskType.default")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"k8s"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"worker"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the default runner to use if no overrides apply. This setting ensures there is always a fallback runner available."),(0,i.kt)("td",{parentName:"tr",align:null},"None"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.indexer.runner.k8sAndWorker.runnerStrategy.taskType.overrides")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"JsonObject"),"(e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},'{"index_kafka": "worker"}'),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Defines task-specific overrides for runner types. Each entry sets a task type to a specific runner, allowing fine control."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{}")),(0,i.kt)("td",{parentName:"tr",align:null},"No")))))}N.isMDXComponent=!0}}]);