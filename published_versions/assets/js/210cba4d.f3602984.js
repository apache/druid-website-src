"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8691],{3905:(e,a,o)=>{o.d(a,{Zo:()=>u,kt:()=>f});var n=o(67294);function t(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function s(e,a){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),o.push.apply(o,n)}return o}function r(e){for(var a=1;a<arguments.length;a++){var o=null!=arguments[a]?arguments[a]:{};a%2?s(Object(o),!0).forEach((function(a){t(e,a,o[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(o,a))}))}return e}function c(e,a){if(null==e)return{};var o,n,t=function(e,a){if(null==e)return{};var o,n,t={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],a.indexOf(o)>=0||(t[o]=e[o]);return t}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)o=s[n],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var l=n.createContext({}),i=function(e){var a=n.useContext(l),o=a;return e&&(o="function"==typeof e?e(a):r(r({},a),e)),o},u=function(e){var a=i(e.components);return n.createElement(l.Provider,{value:a},e.children)},m="mdxType",x={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var o=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=i(o),d=t,f=m["".concat(l,".").concat(d)]||m[d]||x[d]||s;return o?n.createElement(f,r(r({ref:a},u),{},{components:o})):n.createElement(f,r({ref:a},u))}));function f(e,a){var o=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var s=o.length,r=new Array(s);r[0]=d;var c={};for(var l in a)hasOwnProperty.call(a,l)&&(c[l]=a[l]);c.originalType=e,c[m]="string"==typeof e?e:t,r[1]=c;for(var i=2;i<s;i++)r[i]=o[i];return n.createElement.apply(null,r)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},46852:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>i,toc:()=>m});var n=o(87462),t=o(63366),s=(o(67294),o(3905)),r=["components"],c={id:"use_sbt_to_build_fat_jar",title:"Content for build.sbt"},l=void 0,i={unversionedId:"operations/use_sbt_to_build_fat_jar",id:"operations/use_sbt_to_build_fat_jar",title:"Content for build.sbt",description:"\x3c!--",source:"@site/docs/30.0.0/operations/use_sbt_to_build_fat_jar.md",sourceDirName:"operations",slug:"/operations/use_sbt_to_build_fat_jar",permalink:"/docs/30.0.0/operations/use_sbt_to_build_fat_jar",draft:!1,tags:[],version:"current",frontMatter:{id:"use_sbt_to_build_fat_jar",title:"Content for build.sbt"},sidebar:"docs",previous:{title:"Metadata Migration",permalink:"/docs/30.0.0/operations/metadata-migration"},next:{title:"Developing on Druid",permalink:"/docs/30.0.0/development/overview"}},u={},m=[],x={toc:m},d="wrapper";function f(e){var a=e.components,o=(0,t.Z)(e,r);return(0,s.kt)(d,(0,n.Z)({},x,o,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n  "com.amazonaws" % "aws-java-sdk" % "1.9.23" exclude("common-logging", "common-logging"),\n  "org.joda" % "joda-convert" % "1.7",\n  "joda-time" % "joda-time" % "2.7",\n  "org.apache.druid" % "druid" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid" % "druid-services" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid" % "druid-indexing-service" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid" % "druid-indexing-hadoop" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid.extensions" % "mysql-metadata-storage" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid.extensions" % "druid-s3-extensions" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid.extensions" % "druid-histogram" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "org.apache.druid.extensions" % "druid-hdfs-storage" % "0.8.1" excludeAll (\n    ExclusionRule("org.ow2.asm"),\n    ExclusionRule("com.fasterxml.jackson.core"),\n    ExclusionRule("com.fasterxml.jackson.datatype"),\n    ExclusionRule("com.fasterxml.jackson.dataformat"),\n    ExclusionRule("com.fasterxml.jackson.jaxrs"),\n    ExclusionRule("com.fasterxml.jackson.module")\n  ),\n  "com.fasterxml.jackson.core" % "jackson-annotations" % "2.3.0",\n  "com.fasterxml.jackson.core" % "jackson-core" % "2.3.0",\n  "com.fasterxml.jackson.core" % "jackson-databind" % "2.3.0",\n  "com.fasterxml.jackson.datatype" % "jackson-datatype-guava" % "2.3.0",\n  "com.fasterxml.jackson.datatype" % "jackson-datatype-joda" % "2.3.0",\n  "com.fasterxml.jackson.jaxrs" % "jackson-jaxrs-base" % "2.3.0",\n  "com.fasterxml.jackson.jaxrs" % "jackson-jaxrs-json-provider" % "2.3.0",\n  "com.fasterxml.jackson.jaxrs" % "jackson-jaxrs-smile-provider" % "2.3.0",\n  "com.fasterxml.jackson.module" % "jackson-module-jaxb-annotations" % "2.3.0",\n  "com.sun.jersey" % "jersey-servlet" % "1.17.1",\n  "mysql" % "mysql-connector-java" % "5.1.34",\n  "org.scalatest" %% "scalatest" % "2.2.3" % "test",\n  "org.mockito" % "mockito-core" % "1.10.19" % "test"\n)\n\nassemblyMergeStrategy in assembly := {\n  case path if path contains "pom." => MergeStrategy.first\n  case path if path contains "javax.inject.Named" => MergeStrategy.first\n  case path if path contains "mime.types" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/impl/SimpleLog.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/impl/SimpleLog$1.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/impl/NoOpLog.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/LogFactory.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/LogConfigurationException.class" => MergeStrategy.first\n  case path if path contains "org/apache/commons/logging/Log.class" => MergeStrategy.first\n  case path if path contains "META-INF/jersey-module-version" => MergeStrategy.first\n  case path if path contains ".properties" => MergeStrategy.first\n  case path if path contains ".class" => MergeStrategy.first\n  case x =>\n    val oldStrategy = (assemblyMergeStrategy in assembly).value\n    oldStrategy(x)\n}\n')))}f.isMDXComponent=!0}}]);