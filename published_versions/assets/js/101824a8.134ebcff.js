"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2894],{15777:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"release-info/migr-ansi-sql-null","title":"Migration guide: SQL compliant mode","description":"\x3c!--","source":"@site/docs/33.0.0/release-info/migr-ansi-sql-null.md","sourceDirName":"release-info","slug":"/release-info/migr-ansi-sql-null","permalink":"/docs/33.0.0/release-info/migr-ansi-sql-null","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"migr-ansi-sql-null","title":"Migration guide: SQL compliant mode","sidebar_label":"SQL compliant mode"},"sidebar":"docs","previous":{"title":"Subquery limit","permalink":"/docs/33.0.0/release-info/migr-subquery-limit"},"next":{"title":"Papers","permalink":"/docs/33.0.0/misc/papers-and-talks"}}');var i=l(74848),t=l(28453),s=l(65537),a=l(79329);const o={id:"migr-ansi-sql-null",title:"Migration guide: SQL compliant mode",sidebar_label:"SQL compliant mode"},u=void 0,d={},c=[{value:"SQL compliant null handling",id:"sql-compliant-null-handling",level:2},{value:"Legacy null handling and two-valued filter logic",id:"legacy-null-handling-and-two-valued-filter-logic",level:2},{value:"Migrate to SQL compliant mode",id:"migrate-to-sql-compliant-mode",level:2},{value:"Replace null values at ingestion time",id:"replace-null-values-at-ingestion-time",level:3},{value:"Coerce empty strings to null at ingestion time",id:"coerce-empty-strings-to-null-at-ingestion-time",level:3},{value:"Rewrite your queries to be SQL compliant",id:"rewrite-your-queries-to-be-sql-compliant",level:3},{value:"Learn more",id:"learn-more",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In Apache Druid 32.0.0, legacy configurations which were incompatible with the ANSI SQL standard were removed."}),"\n",(0,i.jsx)(n.p,{children:"These configurations were:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"druid.generic.useDefaultValueForNull"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"druid.expressions.useStrictBooleans"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"druid.generic.useThreeValueLogicForNativeFilters"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This guide provides strategies for Druid operators who rely on legacy Druid null handling behavior in their applications to transition to Druid 32.0.0 or later."}),"\n",(0,i.jsx)(n.h2,{id:"sql-compliant-null-handling",children:"SQL compliant null handling"}),"\n",(0,i.jsx)(n.p,{children:"As of Druid 28.0.0, Druid writes segments in an ANSI SQL compatible null handling mode by default, and in Druid 32.0.0 this is no longer configurable.\nThis is a change of legacy behavior and means that Druid stores null values distinctly from empty strings for string dimensions and distinctly from 0 for numeric dimensions."}),"\n",(0,i.jsxs)(n.p,{children:["This can impact your application behavior because the ANSI SQL standard defines any comparison to null to be unknown.\nAccording to this three-valued logic, ",(0,i.jsx)(n.code,{children:"x <> 'some value'"})," only returns non-null values."]}),"\n",(0,i.jsxs)(n.p,{children:["Follow the ",(0,i.jsx)(n.a,{href:"/docs/33.0.0/tutorials/tutorial-sql-null",children:"Null handling tutorial"})," to learn how null handling works in Druid."]}),"\n",(0,i.jsx)(n.h2,{id:"legacy-null-handling-and-two-valued-filter-logic",children:"Legacy null handling and two-valued filter logic"}),"\n",(0,i.jsx)(n.p,{children:"Prior to Druid 28.0.0, Druid defaulted to a legacy mode which stored default values instead of nulls.\nIn this mode, Druid created segments with the following characteristics at ingestion time:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["String columns couldn't distinguish an empty string, ",(0,i.jsx)(n.code,{children:"''"}),", from null.\nTherefore, Druid treated both values as interchangeable."]}),"\n",(0,i.jsxs)(n.li,{children:["Numeric columns couldn't represent null valued rows.\nTherefore, Druid stored ",(0,i.jsx)(n.code,{children:"0"})," instead of ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"migrate-to-sql-compliant-mode",children:"Migrate to SQL compliant mode"}),"\n",(0,i.jsx)(n.p,{children:"If your business logic relies on the behavior of legacy mode, you have the following options to operate Druid in an ANSI SQL compatible null handling mode:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Modify incoming data to either ",(0,i.jsx)(n.a,{href:"#replace-null-values-at-ingestion-time",children:"avoid nulls"})," or ",(0,i.jsx)(n.a,{href:"#coerce-empty-strings-to-null-at-ingestion-time",children:"avoid empty strings"})," to achieve the same query behavior as legacy mode. This means modifying your ingestion SQL queries and ingestion specs to handle nulls or empty strings.\nFor example, replacing a null for a string column with an empty string or a 0 for a numeric column.\nHowever, it means that your existing queries should operate as if Druid were in legacy mode.\nIf you do not care about preserving null values, this is a good option for you."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Preserve null values and ",(0,i.jsx)(n.a,{href:"#rewrite-your-queries-to-be-sql-compliant",children:"update all of your SQL queries to be ANSI SQL compliant"}),".\nThis means you can preserve the incoming data with nulls intact.\nHowever, you must rewrite any affected client-side queries to be ANSI SQL compliant.\nIf you have a requirement to preserve null values, choose this option."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"replace-null-values-at-ingestion-time",children:"Replace null values at ingestion time"}),"\n",(0,i.jsx)(n.p,{children:"If you don't need to preserve null values within Druid, you can use a transform at ingestion time to replace nulls with other values."}),"\n",(0,i.jsx)(n.p,{children:"Consider the following input data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"time":"2024-01-01T00:00:00.000Z","string_example":"my_string","number_example":99}\n{"time":"2024-01-02T00:00:00.000Z","string_example":"","number_example":0}\n{"time":"2024-01-03T00:00:00.000Z","string_example":null,"number_example":null}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The following example illustrates how to use COALESCE and NVL at ingestion time to avoid null values in Druid:"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsx)(a.A,{value:"0",label:"SQL-based batch",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'REPLACE INTO "no_nulls_example" OVERWRITE ALL\nWITH "ext" AS (\n  SELECT *\n  FROM TABLE(\n    EXTERN(\n      \'{"type":"inline","data":"{\\"time\\":\\"2024-01-01T00:00:00.000Z\\",\\"string_example\\":\\"my_string\\",\\"number_example\\":99}\\n{\\"time\\":\\"2024-01-02T00:00:00.000Z\\",\\"string_example\\":\\"\\",\\"number_example\\":0}\\n{\\"time\\":\\"2024-01-03T00:00:00.000Z\\",\\"string_example\\":null,\\"number_example\\":null}"}\',\n      \'{"type":"json"}\'\n    )\n  ) EXTEND ("time" VARCHAR, "string_example" VARCHAR, "number_example" BIGINT)\n)\nSELECT\n  TIME_PARSE("time") AS "__time",\n  -- Replace any null string values with an empty string\n  COALESCE("string_example",\'\') AS string_example,\n  -- Replace any null numeric values with 0\n  NVL("number_example",0) AS number_example\nFROM "ext"\nPARTITIONED BY MONTH\n'})})}),(0,i.jsx)(a.A,{value:"1",label:"JSON-based batch",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "type": "index_parallel",\n  "spec": {\n    "ioConfig": {\n      "type": "index_parallel",\n      "inputSource": {\n        "type": "inline",\n        "data": "{\\"time\\":\\"2024-01-01T00:00:00.000Z\\",\\"string_example\\":\\"my_string\\",\\"number_example\\":99}\\n{\\"time\\":\\"2024-01-02T00:00:00.000Z\\",\\"string_example\\":\\"\\",\\"number_example\\":0}\\n{\\"time\\":\\"2024-01-03T00:00:00.000Z\\",\\"string_example\\":null,\\"number_example\\":null}"\n      },\n      "inputFormat": {\n        "type": "json"\n      }\n    },\n    "tuningConfig": {\n      "type": "index_parallel",\n      "partitionsSpec": {\n        "type": "dynamic"\n      }\n    },\n    "dataSchema": {\n      "dataSource": "inline_data_native",\n      "timestampSpec": {\n        "column": "time",\n        "format": "iso"\n      },\n      "dimensionsSpec": {\n        "dimensions": [\n          "string_example",\n          {\n            "type": "long",\n            "name": "number_example"\n          }\n        ]\n      },\n      "granularitySpec": {\n        "queryGranularity": "none",\n        "rollup": false,\n        "segmentGranularity": "MONTH"\n      },\n      "transformSpec": {\n        "transforms": [\n          {\n            "type": "expression",\n            "name": "string_example",\n            "expression": "COALESCE(\\"string_example\\",\'\')"\n          },\n          {\n            "type": "expression",\n            "name": "number_example",\n            "expression": "NVL(\\"number_example\\",0)"\n          }\n        ]\n      }\n    }\n  }\n}\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"Druid ingests the data with no null values as follows:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"__time"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"string_example"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"number_example"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2024-01-01T00:00:00.000Z"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"my_string"})}),(0,i.jsx)(n.td,{children:"99"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2024-01-02T00:00:00.000Z"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"empty"})}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2024-01-03T00:00:00.000Z"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"empty"})}),(0,i.jsx)(n.td,{children:"0"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"coerce-empty-strings-to-null-at-ingestion-time",children:"Coerce empty strings to null at ingestion time"}),"\n",(0,i.jsx)(n.p,{children:"In legacy mode, Druid recognized empty strings as nulls for equality comparison.\nIf your queries rely on empty strings to represent nulls, you can coerce empty strings to null at ingestion time using NULLIF."}),"\n",(0,i.jsx)(n.p,{children:"For example, consider the following sample input data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"time":"2024-01-01T00:00:00.000Z","string_example":"my_string"}\n{"time":"2024-01-02T00:00:00.000Z","string_example":""}\n{"time":"2024-01-03T00:00:00.000Z","string_example":null}\n'})}),"\n",(0,i.jsx)(n.p,{children:"In legacy mode, Druid wrote an empty string for the third record.\nTherefore the following query returned 2:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'SELECT count(*)\nFROM "null_string"\nWHERE "string_example" IS NULL\n'})}),"\n",(0,i.jsx)(n.p,{children:"In SQL compliant mode, Druid differentiates between empty strings and nulls, so the same query would return 1.\nThe following example shows how to coerce empty strings into null to accommodate IS NULL comparisons:"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsx)(a.A,{value:"0",label:"SQL-based batch",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'REPLACE INTO "null_string" OVERWRITE ALL\nWITH "ext" AS (\n  SELECT *\n  FROM TABLE(\n    EXTERN(\n      \'{"type":"inline","data":"{\\"time\\":\\"2024-01-01T00:00:00.000Z\\",\\"string_example\\":\\"my_string\\"}\\n{\\"time\\":\\"2024-01-02T00:00:00.000Z\\",\\"string_example\\":\\"\\"}\\n{\\"time\\":\\"2024-01-03T00:00:00.000Z\\",\\"string_example\\":null}"}\',\n      \'{"type":"json"}\'\n    )\n  ) EXTEND ("time" VARCHAR, "string_example" VARCHAR)\n)\nSELECT\n  TIME_PARSE("time") AS "__time",\n  NULLIF("string_example",\'\') AS "string_example"\nFROM "ext"\nPARTITIONED BY MONTH\n'})})}),(0,i.jsx)(a.A,{value:"1",label:"JSON-based batch",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "type": "index_parallel",\n  "spec": {\n    "ioConfig": {\n      "type": "index_parallel",\n      "inputSource": {\n        "type": "inline",\n        "data": "{\\"time\\":\\"2024-01-01T00:00:00.000Z\\",\\"string_example\\":\\"my_string\\"}\\n{\\"time\\":\\"2024-01-02T00:00:00.000Z\\",\\"string_example\\":\\"\\"}\\n{\\"time\\":\\"2024-01-03T00:00:00.000Z\\",\\"string_example\\":null}"\n      },\n      "inputFormat": {\n        "type": "json"\n      }\n    },\n    "tuningConfig": {\n      "type": "index_parallel",\n      "partitionsSpec": {\n        "type": "dynamic"\n      }\n    },\n    "dataSchema": {\n      "dataSource": "null_string",\n      "timestampSpec": {\n        "column": "time",\n        "format": "iso"\n      },\n      "transformSpec": {\n        "transforms": [\n          {\n            "type": "expression",\n            "expression": "case_searched((\\"string_example\\" == \'\'),null,\\"string_example\\")",\n            "name": "string_example"\n          }\n        ]\n      },\n      "dimensionsSpec": {\n        "dimensions": [\n          "string_example"\n        ]\n      },\n      "granularitySpec": {\n        "queryGranularity": "none",\n        "rollup": false,\n        "segmentGranularity": "month"\n      }\n    }\n  }\n}\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"Druid ingests the data with no empty strings as follows:"}),"\n",(0,i.jsxs)(n.p,{children:["| ",(0,i.jsx)(n.code,{children:"__time"})," | ",(0,i.jsx)(n.code,{children:"string_example"})," |\n| -- | -- | -- |\n| ",(0,i.jsx)(n.code,{children:"2024-01-01T00:00:00.000Z"}),"| ",(0,i.jsx)(n.code,{children:"my_string"}),"|\n| ",(0,i.jsx)(n.code,{children:"2024-01-02T00:00:00.000Z"}),"| ",(0,i.jsx)(n.code,{children:"null"}),"|\n| ",(0,i.jsx)(n.code,{children:"2024-01-03T00:00:00.000Z"}),"| ",(0,i.jsx)(n.code,{children:"null"}),"|"]}),"\n",(0,i.jsxs)(n.p,{children:["Therefore ",(0,i.jsx)(n.code,{children:'SELECT count(*) FROM "null_string" WHERE "string_example" IS NULL'})," returns 2."]}),"\n",(0,i.jsx)(n.h3,{id:"rewrite-your-queries-to-be-sql-compliant",children:"Rewrite your queries to be SQL compliant"}),"\n",(0,i.jsx)(n.p,{children:"If you want to maintain null values in your data within Druid, you can use the following ANSI SQL compliant querying strategies to achieve the same results as legacy null handling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Modify inequality queries to include null values.\nFor example, ",(0,i.jsx)(n.code,{children:"x <> 'some value'"})," becomes ",(0,i.jsx)(n.code,{children:"(x <> 'some value' OR x IS NULL)"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Use COALESCE or NVL to replace nulls with a value.\nFor example, ",(0,i.jsx)(n.code,{children:"x + 1"})," becomes ",(0,i.jsx)(n.code,{children:"NVL(numeric_value, 0)+1"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Consider the following Druid datasource ",(0,i.jsx)(n.code,{children:"null_example"}),":"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"__time"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"string_example"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"number_example"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2024-01-01T00:00:00.000Z"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"my_string"})}),(0,i.jsx)(n.td,{children:"99"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2024-01-02T00:00:00.000Z"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"empty"})}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2024-01-03T00:00:00.000Z"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"null"})}),(0,i.jsx)(n.td,{children:"null"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Druid excludes null strings from equality comparisons. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'SELECT COUNT(*) AS count_example\nFROM "null_example"\nWHERE "string_example"<> \'my_string\'\n'})}),"\n",(0,i.jsx)(n.p,{children:"Druid returns 1 because null is considered unknown: neither equal nor unequal to the value."}),"\n",(0,i.jsx)(n.p,{children:"To count null values in the result, you can use an OR operator:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'SELECT COUNT(*) AS count_example\nFROM "null_example"\nWHERE ("string_example"<> \'my_string\') OR "string_example" IS NULL\n'})}),"\n",(0,i.jsx)(n.p,{children:"Druid returns 2.\nTo achieve the same result, you can use IS DISTINCT FROM for null-safe comparison:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'SELECT COUNT(*) as count_example\nFROM "null_example"\nWHERE "string_example" IS DISTINCT FROM \'my_string\'\n'})}),"\n",(0,i.jsx)(n.p,{children:"Similarly, arithmetic operators on null return null. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'SELECT "number_example" + 1 AS additon_example\nFROM "null_example"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Druid returns the following because null + any value is null for the ANSI SQL standard:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"addition_example"})})})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:"100"})}),(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:"1"})}),(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:"null"})})]})]}),"\n",(0,i.jsx)(n.p,{children:"Use NVL to avoid nulls with arithmetic. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'SELECT NVL("number_example",0) + 1 AS additon_example\nFROM "null_example"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Druid returns the following:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{children:(0,i.jsx)(n.code,{children:"addition_example"})})})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:"100"})}),(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:"1"})}),(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:"1"})})]})]}),"\n",(0,i.jsx)(n.h2,{id:"learn-more",children:"Learn more"}),"\n",(0,i.jsx)(n.p,{children:"See the following topics for more information:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/33.0.0/tutorials/tutorial-sql-null",children:"Null handling tutorial"})," to learn how the default null handling works in Druid."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/33.0.0/querying/sql-data-types#null-values",children:"Null values"})," for a description of Druid's null values."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/33.0.0/design/segments#handling-null-values",children:"Handling null values"})," for details about how Druid stores null values."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>s,x:()=>a});var r=l(96540);const i={},t=r.createContext(i);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(t.Provider,{value:n},e.children)}},65537:(e,n,l)=>{l.d(n,{A:()=>_});var r=l(96540),i=l(18215),t=l(65627),s=l(56347),a=l(50372),o=l(30604),u=l(11861),d=l(78749);function c(e){var n,l;return null!=(n=null==(l=r.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,r.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:l.filter(Boolean))?n:[]}function h(e){var n=e.values,l=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:function(e){return c(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(l);return function(e){var n=(0,u.XI)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,l])}function m(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function p(e){var n=e.queryString,l=void 0!==n&&n,i=e.groupId,t=(0,s.W6)(),a=function(e){var n=e.queryString,l=void 0!==n&&n,r=e.groupId;if("string"==typeof l)return l;if(!1===l)return null;if(!0===l&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:l,groupId:i});return[(0,o.aZ)(a),(0,r.useCallback)((function(e){if(a){var n=new URLSearchParams(t.location.search);n.set(a,e),t.replace(Object.assign({},t.location,{search:n.toString()}))}}),[a,t])]}function x(e){var n,l,i,t,s=e.defaultValue,o=e.queryString,u=void 0!==o&&o,c=e.groupId,x=h(e),g=(0,r.useState)((function(){return function(e){var n,l=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(l){if(!m({value:l,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+l+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return l}var i=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:s,tabValues:x})})),j=g[0],f=g[1],v=p({queryString:u,groupId:c}),y=v[0],b=v[1],_=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),l=(0,d.Dv)(n),i=l[0],t=l[1],[i,(0,r.useCallback)((function(e){n&&t.set(e)}),[n,t])]),S=_[0],T=_[1],w=function(){var e=null!=y?y:S;return m({value:e,tabValues:x})?e:null}();return(0,a.A)((function(){w&&f(w)}),[w]),{selectedValue:j,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:x}))throw new Error("Can't select invalid tab value="+e);f(e),b(e),T(e)}),[b,T,x]),tabValues:x}}var g=l(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=l(74848);function v(e){var n=e.className,l=e.block,r=e.selectedValue,s=e.selectValue,a=e.tabValues,o=[],u=(0,t.a_)().blockElementScrollPositionUntilNextRender,d=function(e){var n=e.currentTarget,l=o.indexOf(n),i=a[l].value;i!==r&&(u(n),s(i))},c=function(e){var n,l=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var r,i=o.indexOf(e.currentTarget)+1;l=null!=(r=o[i])?r:o[0];break;case"ArrowLeft":var t,s=o.indexOf(e.currentTarget)-1;l=null!=(t=o[s])?t:o[o.length-1]}null==(n=l)||n.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":l},n),children:a.map((function(e){var n=e.value,l=e.label,t=e.attributes;return(0,f.jsx)("li",Object.assign({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:function(e){o.push(e)},onKeyDown:c,onClick:d},t,{className:(0,i.A)("tabs__item",j.tabItem,null==t?void 0:t.className,{"tabs__item--active":r===n}),children:null!=l?l:n}),n)}))})}function y(e){var n=e.lazy,l=e.children,t=e.selectedValue,s=(Array.isArray(l)?l:[l]).filter(Boolean);if(n){var a=s.find((function(e){return e.props.value===t}));return a?(0,r.cloneElement)(a,{className:(0,i.A)("margin-top--md",a.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t})}))})}function b(e){var n=x(e);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",j.tabList),children:[(0,f.jsx)(v,Object.assign({},n,e)),(0,f.jsx)(y,Object.assign({},n,e))]})}function _(e){var n=(0,g.A)();return(0,f.jsx)(b,Object.assign({},e,{children:c(e.children)}),String(n))}},79329:(e,n,l)=>{l.d(n,{A:()=>s});l(96540);var r=l(18215);const i={tabItem:"tabItem_Ymn6"};var t=l(74848);function s(e){var n=e.children,l=e.hidden,s=e.className;return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,s),hidden:l,children:n})}}}]);