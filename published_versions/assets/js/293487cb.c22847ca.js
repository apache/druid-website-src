"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[361],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},43029:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"ingestion/ingestion-spec","title":"Ingestion spec reference","description":"Reference for the configuration options in the ingestion spec.","source":"@site/docs/latest/ingestion/ingestion-spec.md","sourceDirName":"ingestion","slug":"/ingestion/ingestion-spec","permalink":"/docs/latest/ingestion/ingestion-spec","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"ingestion-spec","title":"Ingestion spec reference","sidebar_label":"Ingestion spec reference","description":"Reference for the configuration options in the ingestion spec."},"sidebar":"docs","previous":{"title":"Hadoop-based","permalink":"/docs/latest/ingestion/hadoop"},"next":{"title":"Schema design tips","permalink":"/docs/latest/ingestion/schema-design"}}');var t=s(74848),r=s(28453);const o={id:"ingestion-spec",title:"Ingestion spec reference",sidebar_label:"Ingestion spec reference",description:"Reference for the configuration options in the ingestion spec."},d=void 0,c={},a=[{value:"<code>dataSchema</code>",id:"dataschema",level:2},{value:"<code>dataSource</code>",id:"datasource",level:3},{value:"<code>timestampSpec</code>",id:"timestampspec",level:3},{value:"<code>dimensionsSpec</code>",id:"dimensionsspec",level:3},{value:"Dimension objects",id:"dimension-objects",level:4},{value:"Inclusions and exclusions",id:"inclusions-and-exclusions",level:4},{value:"<code>metricsSpec</code>",id:"metricsspec",level:3},{value:"<code>granularitySpec</code>",id:"granularityspec",level:3},{value:"<code>transformSpec</code>",id:"transformspec",level:3},{value:"Transforms",id:"transforms",level:4},{value:"Filter",id:"filter",level:4},{value:"Legacy <code>dataSchema</code> spec",id:"legacy-dataschema-spec",level:3},{value:"<code>parser</code> (Deprecated)",id:"parser-deprecated",level:4},{value:"<code>flattenSpec</code>",id:"flattenspec",level:4},{value:"<code>ioConfig</code>",id:"ioconfig",level:2},{value:"<code>tuningConfig</code>",id:"tuningconfig",level:2},{value:"<code>indexSpec</code>",id:"indexspec",level:3},{value:"Front coding",id:"front-coding",level:4},{value:"Enable front coding",id:"enable-front-coding",level:5}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["All ingestion methods use ingestion tasks to load data into Druid. Streaming ingestion uses ongoing supervisors that run and supervise a set of tasks over time. Native batch and Hadoop-based ingestion use a one-time ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/tasks",children:"task"}),". Other than with SQL-based ingestion, use an ",(0,t.jsx)(n.em,{children:"ingestion spec"})," to configure your ingestion."]}),"\n",(0,t.jsx)(n.p,{children:"Ingestion specs consists of three main components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#dataschema",children:(0,t.jsx)(n.code,{children:"dataSchema"})}),", which configures the ",(0,t.jsx)(n.a,{href:"#datasource",children:"datasource name"}),",\n",(0,t.jsx)(n.a,{href:"#timestampspec",children:"primary timestamp"}),", ",(0,t.jsx)(n.a,{href:"#dimensionsspec",children:"dimensions"}),", ",(0,t.jsx)(n.a,{href:"#metricsspec",children:"metrics"}),", and ",(0,t.jsx)(n.a,{href:"#transformspec",children:"transforms and filters"})," (if needed)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#ioconfig",children:(0,t.jsx)(n.code,{children:"ioConfig"})}),", which tells Druid how to connect to the source system and how to parse data. For more information, see the\ndocumentation for each ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/#ingestion-methods",children:"ingestion method"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#tuningconfig",children:(0,t.jsx)(n.code,{children:"tuningConfig"})}),", which controls various tuning parameters specific to each\n",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/#ingestion-methods",children:"ingestion method"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Example ingestion spec for task type ",(0,t.jsx)(n.code,{children:"index_parallel"})," (native batch):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "type": "index_parallel",\n  "spec": {\n    "dataSchema": {\n      "dataSource": "wikipedia",\n      "timestampSpec": {\n        "column": "timestamp",\n        "format": "auto"\n      },\n      "dimensionsSpec": {\n        "dimensions": [\n          "page",\n          "language",\n          { "type": "long", "name": "userId" }\n        ]\n      },\n      "metricsSpec": [\n        { "type": "count", "name": "count" },\n        { "type": "doubleSum", "name": "bytes_added_sum", "fieldName": "bytes_added" },\n        { "type": "doubleSum", "name": "bytes_deleted_sum", "fieldName": "bytes_deleted" }\n      ],\n      "granularitySpec": {\n        "segmentGranularity": "day",\n        "queryGranularity": "none",\n        "intervals": [\n          "2013-08-31/2013-09-01"\n        ]\n      }\n    },\n    "ioConfig": {\n      "type": "index_parallel",\n      "inputSource": {\n        "type": "local",\n        "baseDir": "examples/indexing/",\n        "filter": "wikipedia_data.json"\n      },\n      "inputFormat": {\n        "type": "json",\n        "flattenSpec": {\n          "useFieldDiscovery": true,\n          "fields": [\n            { "type": "path", "name": "userId", "expr": "$.user.id" }\n          ]\n        }\n      }\n    },\n    "tuningConfig": {\n      "type": "index_parallel"\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The specific options supported by these sections will depend on the ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/#ingestion-methods",children:"ingestion method"})," you have chosen.\nFor more examples, refer to the documentation for each ingestion method."]}),"\n",(0,t.jsxs)(n.p,{children:['You can also load data visually, without the need to write an ingestion spec, using the "Load data" functionality\navailable in Druid\'s ',(0,t.jsx)(n.a,{href:"/docs/latest/operations/web-console",children:"web console"}),". Druid's visual data loader supports\n",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/kafka-ingestion",children:"Kafka"}),",\n",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/kinesis-ingestion",children:"Kinesis"}),", and\n",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/native-batch",children:"native batch"})," mode."]}),"\n",(0,t.jsx)(n.h2,{id:"dataschema",children:(0,t.jsx)(n.code,{children:"dataSchema"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"dataSchema"})," spec has been changed in 0.17.0. The new spec is supported by all ingestion methods\nexcept for ",(0,t.jsx)(n.em,{children:"Hadoop"})," ingestion. See the ",(0,t.jsxs)(n.a,{href:"#legacy-dataschema-spec",children:["Legacy ",(0,t.jsx)(n.code,{children:"dataSchema"})," spec"]})," for the old spec."]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"dataSchema"})," is a holder for the following components:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#datasource",children:"datasource name"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#timestampspec",children:"primary timestamp"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#dimensionsspec",children:"dimensions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#metricsspec",children:"metrics"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#transformspec",children:"transforms and filters"})," (if needed)."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["An example ",(0,t.jsx)(n.code,{children:"dataSchema"})," is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"dataSchema": {\n  "dataSource": "wikipedia",\n  "timestampSpec": {\n    "column": "timestamp",\n    "format": "auto"\n  },\n  "dimensionsSpec": {\n    "dimensions": [\n      "page",\n      "language",\n      { "type": "long", "name": "userId" }\n    ]\n  },\n  "metricsSpec": [\n    { "type": "count", "name": "count" },\n    { "type": "doubleSum", "name": "bytes_added_sum", "fieldName": "bytes_added" },\n    { "type": "doubleSum", "name": "bytes_deleted_sum", "fieldName": "bytes_deleted" }\n  ],\n  "granularitySpec": {\n    "segmentGranularity": "day",\n    "queryGranularity": "none",\n    "intervals": [\n      "2013-08-31/2013-09-01"\n    ]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"datasource",children:(0,t.jsx)(n.code,{children:"dataSource"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"dataSource"})," is located in ",(0,t.jsx)(n.code,{children:"dataSchema"})," \u2192 ",(0,t.jsx)(n.code,{children:"dataSource"})," and is simply the name of the\n",(0,t.jsx)(n.a,{href:"/docs/latest/design/storage",children:"datasource"})," that data will be written to. An example\n",(0,t.jsx)(n.code,{children:"dataSource"})," is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"dataSource": "my-first-datasource"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"timestampspec",children:(0,t.jsx)(n.code,{children:"timestampSpec"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"timestampSpec"})," is located in ",(0,t.jsx)(n.code,{children:"dataSchema"})," \u2192 ",(0,t.jsx)(n.code,{children:"timestampSpec"})," and is responsible for\nconfiguring the ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/schema-model#primary-timestamp",children:"primary timestamp"}),". An example ",(0,t.jsx)(n.code,{children:"timestampSpec"})," is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"timestampSpec": {\n  "column": "timestamp",\n  "format": "auto"\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Conceptually, after input data records are read, Druid applies ingestion spec components in a particular order:\nfirst ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats#flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})})," (if any), then ",(0,t.jsx)(n.a,{href:"#timestampspec",children:(0,t.jsx)(n.code,{children:"timestampSpec"})}),", then ",(0,t.jsx)(n.a,{href:"#transformspec",children:(0,t.jsx)(n.code,{children:"transformSpec"})}),",\nand finally ",(0,t.jsx)(n.a,{href:"#dimensionsspec",children:(0,t.jsx)(n.code,{children:"dimensionsSpec"})})," and ",(0,t.jsx)(n.a,{href:"#metricsspec",children:(0,t.jsx)(n.code,{children:"metricsSpec"})}),". Keep this in mind when writing\nyour ingestion spec."]})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"timestampSpec"})," can have the following components:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"column"}),(0,t.jsxs)(n.td,{children:["Input row field to read the primary timestamp from.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Regardless of the name of this input field, the primary timestamp will always be stored as a column named ",(0,t.jsx)(n.code,{children:"__time"})," in your Druid datasource."]}),(0,t.jsx)(n.td,{children:"timestamp"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"format"}),(0,t.jsxs)(n.td,{children:["Timestamp format. Options are: ",(0,t.jsxs)("ul",{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)(n.code,{children:"iso"}),": ISO8601 with 'T' separator, like \"2000-01-01T01:02:03.456\""]}),(0,t.jsxs)("li",{children:[(0,t.jsx)(n.code,{children:"posix"}),": seconds since epoch"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)(n.code,{children:"millis"}),": milliseconds since epoch"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)(n.code,{children:"micro"}),": microseconds since epoch"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)(n.code,{children:"nano"}),": nanoseconds since epoch"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)(n.code,{children:"auto"}),": automatically detects ISO (either 'T' or space separator) or millis format"]}),(0,t.jsxs)("li",{children:["any ",(0,t.jsx)(n.a,{href:"http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html",children:"Joda DateTimeFormat string"})]})]})]}),(0,t.jsx)(n.td,{children:"auto"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"missingValue"}),(0,t.jsxs)(n.td,{children:["Timestamp to use for input records that have a null or missing timestamp ",(0,t.jsx)(n.code,{children:"column"}),". Should be in ISO8601 format, like ",(0,t.jsx)(n.code,{children:'"2000-01-01T01:02:03.456"'}),", even if you have specified something else for ",(0,t.jsx)(n.code,{children:"format"}),". Since Druid requires a primary timestamp, this setting can be useful for ingesting datasets that do not have any per-record timestamps at all."]}),(0,t.jsx)(n.td,{children:"none"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["You can use the timestamp in a expression as ",(0,t.jsx)(n.code,{children:"__time"})," because Druid parses the ",(0,t.jsx)(n.code,{children:"timestampSpec"})," before applying ",(0,t.jsx)(n.a,{href:"#transforms",children:"transforms"}),".  You can also set the expression ",(0,t.jsx)(n.code,{children:"name"})," to ",(0,t.jsx)(n.code,{children:"__time"})," to replace the value of the timestamp."]}),"\n",(0,t.jsxs)(n.p,{children:["Treat ",(0,t.jsx)(n.code,{children:"__time"})," as a millisecond timestamp: the number of milliseconds since Jan 1, 1970 at midnight UTC."]}),"\n",(0,t.jsx)(n.h3,{id:"dimensionsspec",children:(0,t.jsx)(n.code,{children:"dimensionsSpec"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"dimensionsSpec"})," is located in ",(0,t.jsx)(n.code,{children:"dataSchema"})," \u2192 ",(0,t.jsx)(n.code,{children:"dimensionsSpec"})," and is responsible for\nconfiguring ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/schema-model#dimensions",children:"dimensions"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"You can either manually specify the dimensions or take advantage of schema auto-discovery where you allow Druid to infer all or some of the schema for your data. This means that you don't have to explicitly specify your dimensions and their type."}),"\n",(0,t.jsxs)(n.p,{children:["To use schema auto-discovery, set ",(0,t.jsx)(n.code,{children:"useSchemaDiscovery"})," to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, you can use the string-based schemaless ingestion where any discovered dimensions are treated as strings. To do so, leave ",(0,t.jsx)(n.code,{children:"useSchemaDiscovery"})," set to ",(0,t.jsx)(n.code,{children:"false"})," (default). Then, set the dimensions list to empty or set the  ",(0,t.jsx)(n.code,{children:"includeAllDimensions"})," property to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The following ",(0,t.jsx)(n.code,{children:"dimensionsSpec"})," example uses schema auto-discovery (",(0,t.jsx)(n.code,{children:'"useSchemaDiscovery": true'}),") in conjunction with explicitly defined dimensions to have Druid infer some of the schema for the data:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"dimensionsSpec" : {\n  "dimensions": [\n    "page",\n    "language",\n    { "type": "long", "name": "userId" }\n  ],\n  "dimensionExclusions" : [],\n  "spatialDimensions" : [],\n  "useSchemaDiscovery": true\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Conceptually, after input data records are read, Druid applies ingestion spec components in a particular order:\nfirst ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats#flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})})," (if any), then ",(0,t.jsx)(n.a,{href:"#timestampspec",children:(0,t.jsx)(n.code,{children:"timestampSpec"})}),", then ",(0,t.jsx)(n.a,{href:"#transformspec",children:(0,t.jsx)(n.code,{children:"transformSpec"})}),",\nand finally ",(0,t.jsx)(n.a,{href:"#dimensionsspec",children:(0,t.jsx)(n.code,{children:"dimensionsSpec"})})," and ",(0,t.jsx)(n.a,{href:"#metricsspec",children:(0,t.jsx)(n.code,{children:"metricsSpec"})}),". Keep this in mind when writing\nyour ingestion spec."]})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"dimensionsSpec"})," can have the following components:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dimensions"})}),(0,t.jsxs)(n.td,{children:["A list of ",(0,t.jsx)(n.a,{href:"#dimension-objects",children:"dimension names or objects"}),". You cannot include the same column in both ",(0,t.jsx)(n.code,{children:"dimensions"})," and ",(0,t.jsx)(n.code,{children:"dimensionExclusions"}),".",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"If ",(0,t.jsx)(n.code,{children:"dimensions"})," and ",(0,t.jsx)(n.code,{children:"spatialDimensions"})," are both null or empty arrays, Druid treats all columns other than timestamp or metrics that do not appear in ",(0,t.jsx)(n.code,{children:"dimensionExclusions"})," as String-typed dimension columns. See ",(0,t.jsx)(n.a,{href:"#inclusions-and-exclusions",children:"inclusions and exclusions"})," for details.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"As a best practice, put the most frequently filtered dimensions at the beginning of the dimensions list. In this case, it would also be good to consider ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/partitioning",children:(0,t.jsx)(n.code,{children:"partitioning"})})," by those same dimensions."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"[]"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dimensionExclusions"})}),(0,t.jsxs)(n.td,{children:["The names of dimensions to exclude from ingestion. Only names are supported here, not objects.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"This list is only used if the ",(0,t.jsx)(n.code,{children:"dimensions"})," and ",(0,t.jsx)(n.code,{children:"spatialDimensions"})," lists are both null or empty arrays; otherwise it is ignored. See ",(0,t.jsx)(n.a,{href:"#inclusions-and-exclusions",children:"inclusions and exclusions"})," below for details."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"[]"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"spatialDimensions"})}),(0,t.jsxs)(n.td,{children:["An array of ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/geo",children:"spatial dimensions"}),"."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"[]"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"includeAllDimensions"})}),(0,t.jsxs)(n.td,{children:["Note that this field only applies to string-based schema discovery where Druid ingests dimensions it discovers as strings. This is different from schema auto-discovery where Druid infers the type for data. You can set ",(0,t.jsx)(n.code,{children:"includeAllDimensions"})," to true to ingest both explicit dimensions in the ",(0,t.jsx)(n.code,{children:"dimensions"})," field and other dimensions that the ingestion task discovers from input data. In this case, the explicit dimensions will appear first in the order that you specify them, and the dimensions dynamically discovered will come after. This flag can be useful especially with auto schema discovery using ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats#flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})}),". If this is not set and the ",(0,t.jsx)(n.code,{children:"dimensions"})," field is not empty, Druid will ingest only explicit dimensions. If this is not set and the ",(0,t.jsx)(n.code,{children:"dimensions"})," field is empty, all discovered dimensions will be ingested."]}),(0,t.jsx)(n.td,{children:"false"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"useSchemaDiscovery"})}),(0,t.jsx)(n.td,{children:"Configure Druid to use schema auto-discovery to discover some or all of the dimensions and types for your data. For any dimensions that aren't a uniform type, Druid ingests them as JSON. You can use this for native batch or streaming ingestion."}),(0,t.jsx)(n.td,{children:"false"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"forceSegmentSortByTime"})}),(0,t.jsxs)(n.td,{children:["When set to true (the default), segments created by the ingestion job are sorted by ",(0,t.jsx)(n.code,{children:"{__time, dimensions[0], dimensions[1], ...}"}),". When set to false, segments created by the ingestion job are sorted by ",(0,t.jsx)(n.code,{children:"{dimensions[0], dimensions[1], ...}"}),". To include ",(0,t.jsx)(n.code,{children:"__time"})," in the sort order when this parameter is set to ",(0,t.jsx)(n.code,{children:"false"}),", you must include a dimension named ",(0,t.jsx)(n.code,{children:"__time"})," with type ",(0,t.jsx)(n.code,{children:"long"})," explicitly in the ",(0,t.jsx)(n.code,{children:"dimensions"})," list.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Setting this to ",(0,t.jsx)(n.code,{children:"false"})," is an experimental feature; see ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/partitioning#sorting",children:"Sorting"})," for details."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"dimension-objects",children:"Dimension objects"}),"\n",(0,t.jsxs)(n.p,{children:["Each dimension in the ",(0,t.jsx)(n.code,{children:"dimensions"})," list can either be a name or an object. Providing a name is equivalent to providing\na ",(0,t.jsx)(n.code,{children:"string"})," type dimension object with the given name, e.g. ",(0,t.jsx)(n.code,{children:'"page"'})," is equivalent to ",(0,t.jsx)(n.code,{children:'{"name": "page", "type": "string"}'}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Dimension objects can have the following components:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"type"}),(0,t.jsxs)(n.td,{children:["Either ",(0,t.jsx)(n.code,{children:"auto"}),", ",(0,t.jsx)(n.code,{children:"string"}),", ",(0,t.jsx)(n.code,{children:"long"}),", ",(0,t.jsx)(n.code,{children:"float"}),", ",(0,t.jsx)(n.code,{children:"double"}),", or ",(0,t.jsx)(n.code,{children:"json"}),". For the ",(0,t.jsx)(n.code,{children:"auto"})," type, Druid determines the most appropriate type for the dimension and assigns one of the following: STRING, ARRAY<String>, LONG, ARRAY<LONG>, DOUBLE, ARRAY<DOUBLE>, or COMPLEX<json> columns, all sharing a common 'nested' format. When Druid infers the schema with schema auto-discovery, the type is ",(0,t.jsx)(n.code,{children:"auto"}),"."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"name"}),(0,t.jsxs)(n.td,{children:["The name of the dimension. This will be used as the field name to read from input records, as well as the column name stored in generated segments.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Note that you can use a ",(0,t.jsx)(n.a,{href:"#transformspec",children:(0,t.jsx)(n.code,{children:"transformSpec"})})," if you want to rename columns during ingestion time."]}),(0,t.jsx)(n.td,{children:"none (required)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"createBitmapIndex"}),(0,t.jsxs)(n.td,{children:["For ",(0,t.jsx)(n.code,{children:"string"})," typed dimensions, whether or not bitmap indexes should be created for the column in generated segments. Creating a bitmap index requires more storage, but speeds up certain kinds of filtering (especially equality and prefix filtering). Only supported for ",(0,t.jsx)(n.code,{children:"string"})," typed dimensions."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"multiValueHandling"}),(0,t.jsxs)(n.td,{children:["For ",(0,t.jsx)(n.code,{children:"string"})," typed dimensions, specifies the type of handling for ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/multi-value-dimensions",children:"multi-value fields"}),". Possible values are ",(0,t.jsx)(n.code,{children:"array"})," (ingest string arrays as-is), ",(0,t.jsx)(n.code,{children:"sorted_array"})," (sort string arrays during ingestion), and ",(0,t.jsx)(n.code,{children:"sorted_set"})," (sort and de-duplicate string arrays during ingestion). This parameter is ignored for types other than ",(0,t.jsx)(n.code,{children:"string"}),"."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"sorted_array"})})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"inclusions-and-exclusions",children:"Inclusions and exclusions"}),"\n",(0,t.jsxs)(n.p,{children:["Druid will interpret a ",(0,t.jsx)(n.code,{children:"dimensionsSpec"})," in two possible ways: ",(0,t.jsx)(n.em,{children:"normal"})," or ",(0,t.jsx)(n.em,{children:"schemaless"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Normal interpretation occurs when either ",(0,t.jsx)(n.code,{children:"dimensions"})," or ",(0,t.jsx)(n.code,{children:"spatialDimensions"})," is non-empty. In this case, the combination of the two lists will be taken as the set of dimensions to be ingested, and the list of ",(0,t.jsx)(n.code,{children:"dimensionExclusions"})," will be ignored."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The following description of schemaless refers to  string-based schemaless  where Druid treats dimensions it discovers as strings. We recommend you use schema auto-discovery instead where Druid infers the type for the dimension. For more information, see ",(0,t.jsx)(n.a,{href:"#dimensionsspec",children:(0,t.jsx)(n.code,{children:"dimensionsSpec"})}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["Schemaless interpretation occurs when both ",(0,t.jsx)(n.code,{children:"dimensions"})," and ",(0,t.jsx)(n.code,{children:"spatialDimensions"})," are empty or null. In this case, the set of dimensions is determined in the following way:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["First, start from the set of all root-level fields from the input record, as determined by the ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats",children:(0,t.jsx)(n.code,{children:"inputFormat"})}),'. "Root-level" includes all fields at the top level of a data structure, but does not included fields nested within maps or lists. To extract these, you must use a ',(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats#flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})}),". All fields of non-nested data formats, such as CSV and delimited text, are considered root-level."]}),"\n",(0,t.jsxs)(n.li,{children:["If a ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats#flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})})," is being used, the set of root-level fields includes any fields generated by the ",(0,t.jsx)(n.code,{children:"flattenSpec"}),". The ",(0,t.jsx)(n.code,{children:"useFieldDiscovery"})," parameter determines whether the original root-level fields will be retained or discarded."]}),"\n",(0,t.jsxs)(n.li,{children:["Any field listed in ",(0,t.jsx)(n.code,{children:"dimensionExclusions"})," is excluded."]}),"\n",(0,t.jsxs)(n.li,{children:["The field listed as ",(0,t.jsx)(n.code,{children:"column"})," in the ",(0,t.jsx)(n.a,{href:"#timestampspec",children:(0,t.jsx)(n.code,{children:"timestampSpec"})})," is excluded."]}),"\n",(0,t.jsxs)(n.li,{children:["Any field used as an input to an aggregator from the ",(0,t.jsx)(n.a,{href:"#metricsspec",children:"metricsSpec"})," is excluded."]}),"\n",(0,t.jsxs)(n.li,{children:["Any field with the same name as an aggregator from the ",(0,t.jsx)(n.a,{href:"#metricsspec",children:"metricsSpec"})," is excluded."]}),"\n",(0,t.jsxs)(n.li,{children:["All other fields are ingested as ",(0,t.jsx)(n.code,{children:"string"})," typed dimensions with the ",(0,t.jsx)(n.a,{href:"#dimension-objects",children:"default settings"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, if you have empty columns that you want to include in the string-based schemaless ingestion, you'll need to include the context parameter ",(0,t.jsx)(n.code,{children:"storeEmptyColumns"})," and set it to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Note: Fields generated by a ",(0,t.jsx)(n.a,{href:"#transformspec",children:(0,t.jsx)(n.code,{children:"transformSpec"})})," are not currently considered candidates for\nschemaless dimension interpretation."]})}),"\n",(0,t.jsx)(n.h3,{id:"metricsspec",children:(0,t.jsx)(n.code,{children:"metricsSpec"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"metricsSpec"})," is located in ",(0,t.jsx)(n.code,{children:"dataSchema"})," \u2192 ",(0,t.jsx)(n.code,{children:"metricsSpec"})," and is a list of ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/aggregations",children:"aggregators"}),"\nto apply at ingestion time. This is most useful when ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/rollup",children:"rollup"})," is enabled, since it's how you configure\ningestion-time aggregation."]}),"\n",(0,t.jsxs)(n.p,{children:["An example ",(0,t.jsx)(n.code,{children:"metricsSpec"})," is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"metricsSpec": [\n  { "type": "count", "name": "count" },\n  { "type": "doubleSum", "name": "bytes_added_sum", "fieldName": "bytes_added" },\n  { "type": "doubleSum", "name": "bytes_deleted_sum", "fieldName": "bytes_deleted" }\n]\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Generally, when ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/rollup",children:"rollup"})," is disabled, you should have an empty ",(0,t.jsx)(n.code,{children:"metricsSpec"})," (because without rollup,\nDruid does not do any ingestion-time aggregation, so there is little reason to include an ingestion-time aggregator). However,\nin some cases, it can still make sense to define metrics: for example, if you want to create a complex column as a way of\npre-computing part of an ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/aggregations#approximate-aggregations",children:"approximate aggregation"}),", this can only\nbe done by defining a metric in a ",(0,t.jsx)(n.code,{children:"metricsSpec"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"granularityspec",children:(0,t.jsx)(n.code,{children:"granularitySpec"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"granularitySpec"}),", located in ",(0,t.jsx)(n.code,{children:"dataSchema"})," \u2192 ",(0,t.jsx)(n.code,{children:"granularitySpec"}),", specifies the following:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"segmentGranularity"})," to partitioning a datasource into ",(0,t.jsx)(n.a,{href:"/docs/latest/design/storage",children:"time chunks"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"queryGranularity"})," to optionally truncate the timestamp."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"intervals"})," to define the time chunks of segments to create for batch ingestion."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rollup"})," to enable ingestion-time ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/rollup",children:"rollup"})," or not."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Other than ",(0,t.jsx)(n.code,{children:"rollup"}),", these operations are all based on the ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/schema-model#primary-timestamp",children:"primary timestamp"}),".\nUse the format from [Query granularities] to specify both ",(0,t.jsx)(n.code,{children:"segmentGranualarity"})," and ",(0,t.jsx)(n.code,{children:"queryGranularity"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["An example ",(0,t.jsx)(n.code,{children:"granularitySpec"})," is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"granularitySpec": {\n  "segmentGranularity": "day",\n  "queryGranularity": "none",\n  "intervals": [\n    "2013-08-31/2013-09-01"\n  ],\n  "rollup": true\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"granularitySpec"})," can have the following components:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"type"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"uniform"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"uniform"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"segmentGranularity"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.a,{href:"/docs/latest/design/storage",children:"Time chunking"})," granularity for this datasource. Multiple segments can be created per time chunk. For example, when set to ",(0,t.jsx)(n.code,{children:"day"}),", the events of the same day fall into the same time chunk which can be optionally further partitioned into multiple segments based on other configurations and input size. Any ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/granularities",children:"granularity"})," can be provided here. Note that all segments in the same time chunk should have the same segment granularity.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Avoid ",(0,t.jsx)(n.code,{children:"WEEK"})," granularity for data partitioning because weeks don't align neatly with months and years, making it difficult to change partitioning by coarser granularity. Instead, opt for other partitioning options such as ",(0,t.jsx)(n.code,{children:"DAY"})," or ",(0,t.jsx)(n.code,{children:"MONTH"}),", which offer more flexibility."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"day"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"queryGranularity"}),(0,t.jsxs)(n.td,{children:["The resolution of timestamp storage within each segment. This must be equal to, or finer, than ",(0,t.jsx)(n.code,{children:"segmentGranularity"}),". This will be the finest granularity that you can query at and still receive sensible results, but note that you can still query at anything coarser than this granularity. E.g., a value of ",(0,t.jsx)(n.code,{children:"minute"})," will mean that records will be stored at minutely granularity, and can be sensibly queried at any multiple of minutes (including minutely, 5-minutely, hourly, etc).",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Any ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/granularities",children:"granularity"})," can be provided here. Use ",(0,t.jsx)(n.code,{children:"none"})," to store timestamps as-is, without any truncation. Note that ",(0,t.jsx)(n.code,{children:"rollup"})," will be applied if it is set even when the ",(0,t.jsx)(n.code,{children:"queryGranularity"})," is set to ",(0,t.jsx)(n.code,{children:"none"}),"."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"none"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"rollup"}),(0,t.jsxs)(n.td,{children:["Whether to use ingestion-time ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/rollup",children:"rollup"})," or not. Note that rollup is still effective even when ",(0,t.jsx)(n.code,{children:"queryGranularity"})," is set to ",(0,t.jsx)(n.code,{children:"none"}),". Your data will be rolled up if they have the exactly same timestamp."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"intervals"}),(0,t.jsxs)(n.td,{children:["A list of intervals defining time chunks for segments. Specify interval values using ISO8601 format. For example, ",(0,t.jsx)(n.code,{children:'["2021-12-06T21:27:10+00:00/2021-12-07T00:00:00+00:00"]'}),'. If you omit the time, the time defaults to "00:00:00".',(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Druid breaks the list up and rounds off the list values based on the ",(0,t.jsx)(n.code,{children:"segmentGranularity"}),".",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"If ",(0,t.jsx)(n.code,{children:"null"})," or not provided, batch ingestion tasks generally determine which time chunks to output based on the timestamps found in the input data.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"If specified, batch ingestion tasks may be able to skip a determining-partitions phase, which can result in faster ingestion. Batch ingestion tasks may also be able to request all their locks up-front instead of one by one. Batch ingestion tasks throw away any records with timestamps outside of the specified intervals.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Ignored for any form of streaming ingestion."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"null"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"transformspec",children:(0,t.jsx)(n.code,{children:"transformSpec"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"transformSpec"})," is located in ",(0,t.jsx)(n.code,{children:"dataSchema"})," \u2192 ",(0,t.jsx)(n.code,{children:"transformSpec"})," and is responsible for transforming and filtering\nrecords during ingestion time. It is optional. An example ",(0,t.jsx)(n.code,{children:"transformSpec"})," is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"transformSpec": {\n  "transforms": [\n    { "type": "expression", "name": "countryUpper", "expression": "upper(country)" }\n  ],\n  "filter": {\n    "type": "selector",\n    "dimension": "country",\n    "value": "San Serriffe"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Conceptually, after input data records are read, Druid applies ingestion spec components in a particular order:\nfirst ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats#flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})})," (if any), then ",(0,t.jsx)(n.a,{href:"#timestampspec",children:(0,t.jsx)(n.code,{children:"timestampSpec"})}),", then ",(0,t.jsx)(n.a,{href:"#transformspec",children:(0,t.jsx)(n.code,{children:"transformSpec"})}),",\nand finally ",(0,t.jsx)(n.a,{href:"#dimensionsspec",children:(0,t.jsx)(n.code,{children:"dimensionsSpec"})})," and ",(0,t.jsx)(n.a,{href:"#metricsspec",children:(0,t.jsx)(n.code,{children:"metricsSpec"})}),". Keep this in mind when writing\nyour ingestion spec."]})}),"\n",(0,t.jsx)(n.h4,{id:"transforms",children:"Transforms"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"transforms"}),' list allows you to specify a set of expressions to evaluate on top of input data. Each transform has a\n"name" which can be referred to by your ',(0,t.jsx)(n.code,{children:"dimensionsSpec"}),", ",(0,t.jsx)(n.code,{children:"metricsSpec"}),", etc."]}),"\n",(0,t.jsx)(n.p,{children:'If a transform has the same name as a field in an input row, then it will shadow the original field. Transforms that\nshadow fields may still refer to the fields they shadow. This can be used to transform a field "in-place".'}),"\n",(0,t.jsx)(n.p,{children:"Transforms do have some limitations. They can only refer to fields present in the actual input rows; in particular,\nthey cannot refer to other transforms. And they cannot remove fields, only add them. However, they can shadow a field\nwith another field containing all nulls, which will act similarly to removing the field."}),"\n",(0,t.jsx)(n.p,{children:"Druid currently includes one kind of built-in transform, the expression transform. It has the following syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "type": "expression",\n  "name": "<output name>",\n  "expression": "<expr>"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"expression"})," is a ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/math-expr",children:"Druid query expression"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Conceptually, after input data records are read, Druid applies ingestion spec components in a particular order:\nfirst ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats#flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})})," (if any), then ",(0,t.jsx)(n.a,{href:"#timestampspec",children:(0,t.jsx)(n.code,{children:"timestampSpec"})}),", then ",(0,t.jsx)(n.a,{href:"#transformspec",children:(0,t.jsx)(n.code,{children:"transformSpec"})}),",\nand finally ",(0,t.jsx)(n.a,{href:"#dimensionsspec",children:(0,t.jsx)(n.code,{children:"dimensionsSpec"})})," and ",(0,t.jsx)(n.a,{href:"#metricsspec",children:(0,t.jsx)(n.code,{children:"metricsSpec"})}),". Keep this in mind when writing\nyour ingestion spec."]})}),"\n",(0,t.jsx)(n.h4,{id:"filter",children:"Filter"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"filter"})," conditionally filters input rows during ingestion. Only rows that pass the filter will be\ningested. Any of Druid's standard ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/filters",children:"query filters"})," can be used. Note that within a\n",(0,t.jsx)(n.code,{children:"transformSpec"}),", the ",(0,t.jsx)(n.code,{children:"transforms"})," are applied before the ",(0,t.jsx)(n.code,{children:"filter"}),", so the filter can refer to a transform."]}),"\n",(0,t.jsxs)(n.h3,{id:"legacy-dataschema-spec",children:["Legacy ",(0,t.jsx)(n.code,{children:"dataSchema"})," spec"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"dataSchema"})," spec has been changed in 0.17.0. The new spec is supported by all ingestion methods\nexcept for ",(0,t.jsx)(n.em,{children:"Hadoop"})," ingestion. See ",(0,t.jsx)(n.a,{href:"#dataschema",children:(0,t.jsx)(n.code,{children:"dataSchema"})})," for the new spec."]})}),"\n",(0,t.jsxs)(n.p,{children:["The legacy ",(0,t.jsx)(n.code,{children:"dataSchema"})," spec has below two more components in addition to the ones listed in the ",(0,t.jsx)(n.a,{href:"#dataschema",children:(0,t.jsx)(n.code,{children:"dataSchema"})})," section above."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#parser-deprecated",children:"input row parser"}),", ",(0,t.jsx)(n.a,{href:"#flattenspec",children:"flattening of nested data"})," (if needed)"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"parser-deprecated",children:[(0,t.jsx)(n.code,{children:"parser"})," (Deprecated)"]}),"\n",(0,t.jsxs)(n.p,{children:["In legacy ",(0,t.jsx)(n.code,{children:"dataSchema"}),", the ",(0,t.jsx)(n.code,{children:"parser"})," is located in the ",(0,t.jsx)(n.code,{children:"dataSchema"})," \u2192 ",(0,t.jsx)(n.code,{children:"parser"})," and is responsible for configuring a wide variety of\nitems related to parsing input records. The ",(0,t.jsx)(n.code,{children:"parser"})," is deprecated and it is highly recommended to use ",(0,t.jsx)(n.code,{children:"inputFormat"})," instead.\nFor details about ",(0,t.jsx)(n.code,{children:"inputFormat"})," and supported ",(0,t.jsx)(n.code,{children:"parser"})," types, see the ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats",children:'"Data formats" page'}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For details about major components of the ",(0,t.jsx)(n.code,{children:"parseSpec"}),", refer to their subsections:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#timestampspec",children:(0,t.jsx)(n.code,{children:"timestampSpec"})}),", responsible for configuring the ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/schema-model#primary-timestamp",children:"primary timestamp"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#dimensionsspec",children:(0,t.jsx)(n.code,{children:"dimensionsSpec"})}),", responsible for configuring ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/schema-model#dimensions",children:"dimensions"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})}),", responsible for flattening nested data formats."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["An example ",(0,t.jsx)(n.code,{children:"parser"})," is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"parser": {\n  "type": "string",\n  "parseSpec": {\n    "format": "json",\n    "flattenSpec": {\n      "useFieldDiscovery": true,\n      "fields": [\n        { "type": "path", "name": "userId", "expr": "$.user.id" }\n      ]\n    },\n    "timestampSpec": {\n      "column": "timestamp",\n      "format": "auto"\n    },\n    "dimensionsSpec": {\n      "dimensions": [\n        "page",\n        "language",\n        { "type": "long", "name": "userId" }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"flattenspec",children:(0,t.jsx)(n.code,{children:"flattenSpec"})}),"\n",(0,t.jsxs)(n.p,{children:["In the legacy ",(0,t.jsx)(n.code,{children:"dataSchema"}),", the ",(0,t.jsx)(n.code,{children:"flattenSpec"})," is located in ",(0,t.jsx)(n.code,{children:"dataSchema"})," \u2192 ",(0,t.jsx)(n.code,{children:"parser"})," \u2192 ",(0,t.jsx)(n.code,{children:"parseSpec"})," \u2192 ",(0,t.jsx)(n.code,{children:"flattenSpec"})," and is responsible for\nbridging the gap between potentially nested input data (such as JSON, Avro, etc) and Druid's flat data model.\nSee ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/data-formats#flattenspec",children:"Flatten spec"})," for more details."]}),"\n",(0,t.jsx)(n.h2,{id:"ioconfig",children:(0,t.jsx)(n.code,{children:"ioConfig"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ioConfig"})," influences how data is read from a source system, such as Apache Kafka, Amazon S3, a mounted\nfilesystem, or any other supported source system. The ",(0,t.jsx)(n.code,{children:"inputFormat"})," property applies to all\n",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/#ingestion-methods",children:"ingestion method"})," except for Hadoop ingestion. The Hadoop ingestion still\nuses the ",(0,t.jsx)(n.a,{href:"#parser-deprecated",children:(0,t.jsx)(n.code,{children:"parser"})})," in the legacy ",(0,t.jsx)(n.code,{children:"dataSchema"}),".\nThe rest of ",(0,t.jsx)(n.code,{children:"ioConfig"})," is specific to each individual ingestion method.\nAn example ",(0,t.jsx)(n.code,{children:"ioConfig"})," to read JSON data is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"ioConfig": {\n    "type": "<ingestion-method-specific type code>",\n    "inputFormat": {\n      "type": "json"\n    },\n    ...\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For details, see the documentation provided by each ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/#ingestion-methods",children:"ingestion method"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"tuningconfig",children:(0,t.jsx)(n.code,{children:"tuningConfig"})}),"\n",(0,t.jsxs)(n.p,{children:["You specify tuning properties in a ",(0,t.jsx)(n.code,{children:"tuningConfig"})," object, which goes at the top level of an ingestion spec.\nSome properties apply to all ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/#ingestion-methods",children:"ingestion methods"}),", but most are specific to each individual ingestion method."]}),"\n",(0,t.jsx)(n.p,{children:"The following table lists the common tuning properties shared among ingestion methods:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"type"}),(0,t.jsxs)(n.td,{children:["Each ingestion method has its own tuning type code. You must specify the type code that matches your ingestion method. Common options are ",(0,t.jsx)(n.code,{children:"index"}),", ",(0,t.jsx)(n.code,{children:"hadoop"}),", ",(0,t.jsx)(n.code,{children:"kafka"}),", and ",(0,t.jsx)(n.code,{children:"kinesis"}),"."]}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"maxRowsInMemory"}),(0,t.jsxs)(n.td,{children:["The maximum number of records to store in memory before persisting to disk. Note that this is the number of rows\xa0post-rollup, and so it may not be equal to the number of input records. Ingested records will be persisted to disk when either ",(0,t.jsx)(n.code,{children:"maxRowsInMemory"})," or ",(0,t.jsx)(n.code,{children:"maxBytesInMemory"})," are reached (whichever happens first)."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"1000000"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"maxBytesInMemory"}),(0,t.jsxs)(n.td,{children:["The maximum aggregate size of records, in bytes, to store in the JVM heap before persisting. This is based on a rough estimate of memory usage. Ingested records will be persisted to disk when either ",(0,t.jsx)(n.code,{children:"maxRowsInMemory"})," or ",(0,t.jsx)(n.code,{children:"maxBytesInMemory"})," are reached (whichever happens first). ",(0,t.jsx)(n.code,{children:"maxBytesInMemory"})," also includes heap usage of artifacts created from intermediary persists. This means that after every persist, the amount of ",(0,t.jsx)(n.code,{children:"maxBytesInMemory"})," until the next persist will decrease. If the sum of bytes of all intermediary persisted artifacts exceeds ",(0,t.jsx)(n.code,{children:"maxBytesInMemory"})," the task fails.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Setting ",(0,t.jsx)(n.code,{children:"maxBytesInMemory"})," to -1 disables this check, meaning Druid will rely entirely on ",(0,t.jsx)(n.code,{children:"maxRowsInMemory"})," to control memory usage. Setting it to zero means the default value will be used (one-sixth of JVM heap size).",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"Note that the estimate of memory usage is designed to be an overestimate, and can be especially high when using complex ingest-time aggregators, including sketches. If this causes your indexing workloads to persist to disk too often, you can set ",(0,t.jsx)(n.code,{children:"maxBytesInMemory"})," to -1 and rely on ",(0,t.jsx)(n.code,{children:"maxRowsInMemory"})," instead."]}),(0,t.jsx)(n.td,{children:"One-sixth of max JVM heap size"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"skipBytesInMemoryOverheadCheck"}),(0,t.jsx)(n.td,{children:"The calculation of maxBytesInMemory takes into account overhead objects created during ingestion and each intermediate persist. Setting this to true can exclude the bytes of these overhead objects from maxBytesInMemory check."}),(0,t.jsx)(n.td,{children:"false"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"indexSpec"}),(0,t.jsx)(n.td,{children:"Defines segment storage format options to use at indexing time."}),(0,t.jsxs)(n.td,{children:["See ",(0,t.jsx)(n.a,{href:"#indexspec",children:(0,t.jsx)(n.code,{children:"indexSpec"})})," for more information."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"indexSpecForIntermediatePersists"}),(0,t.jsx)(n.td,{children:"Defines segment storage format options to use at indexing time for intermediate persisted temporary segments."}),(0,t.jsxs)(n.td,{children:["See ",(0,t.jsx)(n.a,{href:"#indexspec",children:(0,t.jsx)(n.code,{children:"indexSpec"})})," for more information."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Other properties"}),(0,t.jsxs)(n.td,{children:["Each ingestion method has its own list of additional tuning properties. See the documentation for each method for a full list: ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/kafka-ingestion#tuning-configuration",children:"Kafka indexing service"}),", ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/kinesis-ingestion#tuning-configuration",children:"Kinesis indexing service"}),", ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/native-batch#tuningconfig",children:"Native batch"}),", and ",(0,t.jsx)(n.a,{href:"/docs/latest/ingestion/hadoop#tuningconfig",children:"Hadoop-based"}),"."]}),(0,t.jsx)(n.td,{})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["The following example shows a ",(0,t.jsx)(n.code,{children:"tuningConfig"})," object that sets all of the shared common properties to their defaults:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:'"tuningConfig": {\n  "type": "<ingestion-method-specific type code>",\n  "maxRowsInMemory": 1000000,\n  "maxBytesInMemory": <one-sixth of JVM memory>,\n  "indexSpec": {\n    "bitmap": { "type": "roaring" },\n    "dimensionCompression": "lz4",\n    "metricCompression": "lz4",\n    "longEncoding": "longs"\n  },\n  <other ingestion-method-specific properties>\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"indexspec",children:(0,t.jsx)(n.code,{children:"indexSpec"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"indexSpec"})," object can include the following properties.\nFor information on defining an ",(0,t.jsx)(n.code,{children:"indexSpec"})," in a query context, see ",(0,t.jsx)(n.a,{href:"/docs/latest/multi-stage-query/reference#context-parameters",children:"SQL-based ingestion reference"}),"."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"bitmap"}),(0,t.jsxs)(n.td,{children:["Compression format for bitmap indexes. Should be a JSON object with ",(0,t.jsx)(n.code,{children:"type"})," set to ",(0,t.jsx)(n.code,{children:"roaring"})," or ",(0,t.jsx)(n.code,{children:"concise"}),"."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'{"type": "roaring"}'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"dimensionCompression"}),(0,t.jsxs)(n.td,{children:["Compression format for dimension columns. One of ",(0,t.jsx)(n.code,{children:"lz4"}),", ",(0,t.jsx)(n.code,{children:"lzf"}),", ",(0,t.jsx)(n.code,{children:"zstd"}),", or ",(0,t.jsx)(n.code,{children:"uncompressed"}),"."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"lz4"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"stringDictionaryEncoding"}),(0,t.jsxs)(n.td,{children:["Encoding format for string value dictionaries used by STRING and ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/nested-columns",children:"COMPLEX<json>"})," columns. To enable front coding, set ",(0,t.jsx)(n.code,{children:"stringDictionaryEncoding.type"})," to ",(0,t.jsx)(n.code,{children:"frontCoded"}),". Optionally, you can specify the ",(0,t.jsx)(n.code,{children:"bucketSize"})," and ",(0,t.jsx)(n.code,{children:"formatVersion"})," properties. See ",(0,t.jsx)(n.a,{href:"#front-coding",children:"Front coding"})," for more information."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'{"type":"utf8"}'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"metricCompression"}),(0,t.jsxs)(n.td,{children:["Compression format for primitive type metric columns. Options are ",(0,t.jsx)(n.code,{children:"lz4"}),", ",(0,t.jsx)(n.code,{children:"lzf"}),", ",(0,t.jsx)(n.code,{children:"zstd"}),", ",(0,t.jsx)(n.code,{children:"uncompressed"}),", or ",(0,t.jsx)(n.code,{children:"none"})," (which is more efficient than ",(0,t.jsx)(n.code,{children:"uncompressed"}),", but not supported by older versions of Druid)."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"lz4"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"longEncoding"}),(0,t.jsxs)(n.td,{children:["Encoding format for long-typed columns. Applies regardless of whether they are dimensions or metrics. Options are ",(0,t.jsx)(n.code,{children:"auto"})," or ",(0,t.jsx)(n.code,{children:"longs"}),". ",(0,t.jsx)(n.code,{children:"auto"})," encodes the values using offset or lookup table depending on column cardinality, and store them with variable size. ",(0,t.jsx)(n.code,{children:"longs"})," stores the value as-is with 8 bytes each."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"longs"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"complexMetricCompression"}),(0,t.jsxs)(n.td,{children:["Compression format for complex type metric columns. Options are ",(0,t.jsx)(n.code,{children:"lz4"}),", ",(0,t.jsx)(n.code,{children:"lzf"}),", ",(0,t.jsx)(n.code,{children:"zstd"}),", ",(0,t.jsx)(n.code,{children:"uncompressed"}),". Options other than ",(0,t.jsx)(n.code,{children:"uncompressed"})," are not compatible with Druid versions older than 31, and only applies to complex metrics which do not have specialized column formats."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"uncompressed"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"jsonCompression"}),(0,t.jsxs)(n.td,{children:["Compression format to use for nested column raw data. Options are ",(0,t.jsx)(n.code,{children:"lz4"}),", ",(0,t.jsx)(n.code,{children:"lzf"}),", ",(0,t.jsx)(n.code,{children:"zstd"}),", or ",(0,t.jsx)(n.code,{children:"uncompressed"}),"."]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"lz4"})})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"front-coding",children:"Front coding"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Front coding is an ",(0,t.jsx)(n.a,{href:"/docs/latest/development/experimental",children:"experimental feature"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["Druid encodes string columns into dictionaries for better compression.\nFront coding is an incremental encoding strategy that lets you store STRING and ",(0,t.jsx)(n.a,{href:"/docs/latest/querying/nested-columns",children:"COMPLEX<json>"})," columns in Druid with minimal performance impact.\nFront-coded dictionaries reduce storage and improve performance by optimizing for strings where the front part looks similar.\nFor example, if you are tracking website visits, most URLs start with ",(0,t.jsx)(n.code,{children:"https://domain.xyz/"}),", and front coding is able to exploit this pattern for more optimal compression when storing such datasets.\nDruid performs the optimization automatically, which means that the performance of string columns is generally not affected when they don't match the front-coded pattern.\nConsequently, you can enable this feature universally without having to know the underlying data shapes of the columns."]}),"\n",(0,t.jsx)(n.p,{children:"You can use front coding with all types of ingestion."}),"\n",(0,t.jsx)(n.h5,{id:"enable-front-coding",children:"Enable front coding"}),"\n",(0,t.jsxs)(n.p,{children:["Before you enable front coding for your cluster, review the ",(0,t.jsx)(n.a,{href:"/docs/latest/release-info/migr-front-coded-dict",children:"Migration guide for front-coded dictionaries"}),".\nIt contains important information about compatibility with Druid versions preceding 25.0.0."]}),"\n",(0,t.jsxs)(n.p,{children:["To enable front coding, set ",(0,t.jsx)(n.code,{children:"indexSpec.stringDictionaryEncoding.type"})," to ",(0,t.jsx)(n.code,{children:"frontCoded"})," in the ",(0,t.jsx)(n.code,{children:"tuningConfig"})," object of your ingestion spec."]}),"\n",(0,t.jsx)(n.p,{children:"You can specify the following optional properties:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bucketSize"}),": Number of values to place in a bucket to perform delta encoding. Setting this property instructs indexing tasks to write segments using compressed dictionaries of the specified bucket size. You can set it to any power of 2 less than or equal to 128. ",(0,t.jsx)(n.code,{children:"bucketSize"})," defaults to 4."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"formatVersion"}),": Specifies which front coding version to use. Options are 0 and 1 (supported for Druid versions 26.0.0 and higher). ",(0,t.jsx)(n.code,{children:"formatVersion"})," defaults to 0. For faster speeds and smaller storage sizes, set ",(0,t.jsx)(n.code,{children:"formatVersion"})," to 1. After setting ",(0,t.jsx)(n.code,{children:"formatVersion"})," to 1, you can no longer downgrade to Druid 25.0.0 seamlessly. To downgrade to Druid 25.0.0, you must re-ingest your data with the ",(0,t.jsx)(n.code,{children:"formatVersion"})," property set to 0."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"tuningConfig": {\n  "indexSpec": {\n    "stringDictionaryEncoding": {\n      "type":"frontCoded",\n      "bucketSize": 4,\n      "formatVersion": 0\n    }\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);